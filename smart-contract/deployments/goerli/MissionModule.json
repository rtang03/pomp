{
  "address": "0x78D9281b576a1e0c5C78D211c77B167982665785",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pompHub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_missionNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Aborted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BatchVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Completed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reason",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Failed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endtime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Started",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUB_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "missionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.AbortWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "abortWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "profileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "challenges",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.BatchVerifyWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "batchVerifyWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "profileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "challenges",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.CanBatchVerifyData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "canBatchVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "missionId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "challenge",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CompleteWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "completeWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "challenge",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reason",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FailWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "failWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challenge",
          "type": "string"
        }
      ],
      "name": "missionByChallenge",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "starttime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endtime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challengeHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum DataTypes.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.MissionStruct",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        }
      ],
      "name": "missionById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "starttime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endtime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challengeHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum DataTypes.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.MissionStruct",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "missionBySlug",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "starttime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endtime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challengeHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum DataTypes.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.MissionStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "missionIdBySlug",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "missionNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pompHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sigNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "slug",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minutesToExpire",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.StartWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "startWithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "challenge",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.VerifyWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "verifyWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5334a245e93716454b9cd42cd3ee42bcf9f7cc3e2263d26256211de577f9bfa4",
  "receipt": {
    "to": null,
    "from": "0xc93b8F86c949962f3B6D01C4cdB5fC4663b1af0A",
    "contractAddress": "0x78D9281b576a1e0c5C78D211c77B167982665785",
    "transactionIndex": 75,
    "gasUsed": "4717204",
    "logsBloom": "0x
    "blockHash": "0x1e04875481870384bf14f279d327f74d5cb339a3a4e2dd48895717b8b29b4c68",
    "transactionHash": "0x5334a245e93716454b9cd42cd3ee42bcf9f7cc3e2263d26256211de577f9bfa4",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 7830216,
        "transactionHash": "0x5334a245e93716454b9cd42cd3ee42bcf9f7cc3e2263d26256211de577f9bfa4",
        "address": "0x78D9281b576a1e0c5C78D211c77B167982665785",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a"
        ],
        "data": "0x",
        "logIndex": 172,
        "blockHash": "0x1e04875481870384bf14f279d327f74d5cb339a3a4e2dd48895717b8b29b4c68"
      },
      {
        "transactionIndex": 75,
        "blockNumber": 7830216,
        "transactionHash": "0x5334a245e93716454b9cd42cd3ee42bcf9f7cc3e2263d26256211de577f9bfa4",
        "address": "0x78D9281b576a1e0c5C78D211c77B167982665785",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d5",
          "0x000000000000000000000000b2f669cca65ca0c3e70364a07c311aa86fc030a5",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a"
        ],
        "data": "0x",
        "logIndex": 173,
        "blockHash": "0x1e04875481870384bf14f279d327f74d5cb339a3a4e2dd48895717b8b29b4c68"
      }
    ],
    "blockNumber": 7830216,
    "cumulativeGasUsed": "13277294",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb2f669cca65ca0c3e70364a07c311aa86fc030a5",
    "0xafEC3b28bf567fb768B71586EA72541781Bd3c13"
  ],
  "numDeployments": 1,
  "solcInputHash": "a8a00f00559ae78872c380c4531d99e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pompHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_missionNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Aborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BatchVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Failed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUB_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.AbortWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"abortWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"challenges\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.BatchVerifyWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"batchVerifyWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"challenges\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.CanBatchVerifyData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"canBatchVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CompleteWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"completeWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FailWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"failWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"}],\"name\":\"missionByChallenge\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataTypes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.MissionStruct\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"}],\"name\":\"missionById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataTypes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.MissionStruct\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"missionBySlug\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataTypes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.MissionStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"missionIdBySlug\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"missionNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pompHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sigNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minutesToExpire\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.StartWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"startWithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.VerifyWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verifyWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MissionModule.sol\":\"MissionModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@khronus/time-cog/contracts/src/KhronusTimeCog.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary KhronusTimeCog {\\n\\n     /* \\n    Reference Constants\\n    MONTH_NORMALIZER_MULTIPLIER = 153;\\n    MONTH_NORMALIZER_COMPLEMENT = 2;\\n    MONTH_NORMALIZER_DIVISOR = 5;\\n    NORMAL_YEAR_DAYS = 365;\\n    */\\n    \\n    //Used Constants\\n    uint constant DAYS_IN_ERA = 146097;\\n    uint constant DAYS_TO_UNIXEPOCH = 719468;\\n    uint constant LIMIT_YEAR = 2200;\\n    uint constant LIMET_DAY_TIMESTAMP = 84006;\\n    uint constant BASE_YEAR = 1740;\\n    //Main Library Functions\\n\\n    /*  \\n        Time format conversion functions \\n        The functions below transform date formats either from date format to day or seconds timestamps (unix format) or from timestamps to date format.\\n    */\\n\\n    //Get a timestamp in days since begining of unix epoch from a Civil Date to make it a Unix Timestamp multiply by number of seconds in day or solidity (1 days)\\n    function getDayTimestamp(uint _year, uint _month, uint _day) internal pure returns (uint _timestamp, uint _direction){\\n       require (isValidDate(_year, _month, _day), \\\"not a valid date as input as date object\\\");\\n       uint serializedDate = _serializeDate(_eralizeYear(_year, _month), _eralizeMonth(_month), _day);\\n       (serializedDate >= DAYS_TO_UNIXEPOCH) ? (_timestamp = serializedDate - DAYS_TO_UNIXEPOCH, _direction = 0):(_timestamp = DAYS_TO_UNIXEPOCH - serializedDate, _direction = 1);\\n    }\\n    \\n    //Get a Unix Timestamp from a full date-time object expressed as an array of 5 integers Year, Month, Day, Hour, Minute.\\n    function getDateObject(uint _timestamp, uint _direction) internal pure returns (uint[5] memory _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid day timestamp\\\");\\n        (_result[0],_result[1],_result[2]) = _deserializeDate(_timestamp/1 days, _direction);\\n        _result[3] = (_timestamp % 1 days) / 1 hours;\\n        _result[4] = (_timestamp % 1 hours) / 1 minutes;\\n    }\\n    //Get a day Timestamp from a full date object expressed as an array of 3 integers Year, Month, Day, to make it a Unix Timestamp multiply by number of seconds in day or solidity (1 days)\\n    function getDateObjectShort(uint _timestampDays, uint _direction) internal pure returns (uint[3] memory _result) {\\n        require (isValidDayTimestamp(_timestampDays), \\\"Not a valid day timestamp\\\");\\n        (_result[0],_result[1],_result[2]) = _deserializeDate(_timestampDays, _direction);\\n    }\\n    \\n    //Time Delta, returns the result in days of substracting the compared date from the base date, it returns the number of days and the direction 0 for positive, 1 for negative.\\n    function timeDelta(uint[3] memory _baseDate,uint[3] memory _comparedDate) internal pure returns (uint _timestampDays, uint _direction){\\n        require (isValidDate(_baseDate[0], _baseDate[1], _baseDate[2]) && isValidDate(_comparedDate[0], _comparedDate[1], _comparedDate[2]), \\\"One of the dates is not valid\\\");\\n        uint[2] memory baseT;\\n        (baseT[0], baseT[1])  = getDayTimestamp(_baseDate[0],_baseDate[1],_baseDate[2]);\\n        uint[2] memory comparedT;\\n        (comparedT[0], comparedT[1]) = getDayTimestamp(_comparedDate[0],_comparedDate[1],_comparedDate[2]);\\n        if (baseT[1] == comparedT[1]) {\\n            if (baseT[1] == 0){\\n                (baseT[0] >= comparedT[0]) ? (_timestampDays = baseT[0] - comparedT[0], _direction = 0): (_timestampDays = comparedT[0] - baseT[0], _direction = 1);\\n            }\\n            else{\\n                (baseT[0] >= comparedT[0]) ? (_timestampDays = baseT[0] - comparedT[0], _direction = 1): (_timestampDays = comparedT[0] - baseT[0], _direction = 0);\\n            }\\n        }\\n        else{\\n            (baseT[1] == 0) ? (_timestampDays = baseT[0] + comparedT[0], _direction = 0): (_timestampDays = baseT[0] + comparedT[0], _direction = 1);  \\n        }\\n    }\\n\\n    //Next Unit of time, these functions return the unix timestamp of the next unit of time, the returned timestamp is always rounded to the 0 value.\\n    function nextMinute(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 minutes) + 1  minutes;\\n    }\\n\\n    function nextHour(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 hours) + 1 hours;\\n    }\\n\\n    function nextDay(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 days) + 1 days;\\n    }\\n    \\n    function nextMonth(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        uint[3] memory dateObject;\\n        uint flag;\\n        (dateObject[0],dateObject[1],dateObject[2]) = _deserializeDate(_timestamp / 1 days,0);\\n        dateObject[2] = 1;\\n        (dateObject[1] + 1 > 12) ? (dateObject[1]=1,dateObject[0] +=1): (dateObject[1] += 1, dateObject[0] =dateObject[0]);\\n        (_result, flag) = getDayTimestamp(dateObject[0],dateObject[1],dateObject[2]);\\n        _result = (_result * 1 days);\\n    }\\n\\n    //Add Units of Time, returns the timestamp in seconds of adding a given number of units of time.\\n\\n    function addMinutes(uint _timestamp, uint _minutes) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_minutes * 1 minutes);\\n    }\\n\\n    function addHours(uint _timestamp, uint _hours) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_hours * 1 hours);\\n    }\\n\\n    function addDays(uint _timestamp, uint _days) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_days * 1 days);\\n    }\\n\\n    function addMonths(uint _timestamp, uint _months) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        uint[3] memory dateObject;\\n        uint remainder = _timestamp % 1 days;\\n        uint flag;\\n        (dateObject[0],dateObject[1],dateObject[2]) = _deserializeDate(_timestamp / 1 days,0);\\n        (dateObject[0],dateObject[1],dateObject[2]) = _addMonths(dateObject[0],dateObject[1],dateObject[2], _months);\\n        (_result, flag) = getDayTimestamp(dateObject[0],dateObject[1],dateObject[2]);\\n        _result = (_result * 1 days) + remainder;\\n    }\\n\\n    //utility functions for Civil Dates\\n    function isLeapYear(uint _year) internal pure returns(bool _result) {\\n        _result = _result = (_year % 4 == 0 &&( _year % 100 > 0 ||  _year % 400 == 0)) ? true:false;\\n    }\\n    \\n    function getDaysInMonth(uint _year,uint _month)internal pure returns(uint _result) {\\n        uint8[12] memory daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\\n        _result = (isLeapYear(_year) && _month == 2) ? 29: daysInMonth[_month - 1];\\n    }\\n\\n    function isValidDate(uint _year, uint _month, uint _day) internal pure returns(bool _result) {\\n        if (_year >= LIMIT_YEAR || _year < BASE_YEAR || _month < 1 || _month > 12 || _day < 1) {_result = false;}\\n        else{\\n            _result = (_day <= getDaysInMonth(_year, _month)) ? true: false;\\n        }\\n    }\\n\\n    function isValidTimestamp(uint _timestamp) internal pure returns(bool _result) {\\n      return (_timestamp <= (LIMET_DAY_TIMESTAMP* 1 days));\\n    }\\n\\n    function isValidDayTimestamp(uint _timestamp) internal pure returns(bool _result) {\\n       return _timestamp <= (LIMET_DAY_TIMESTAMP);\\n    }\\n\\n    // Private Functions\\n\\n    //Algorithm private functions for library use\\n    \\n    function _eralizeYear(uint _year, uint _month) private pure returns(uint _result){\\n        _result = (_month > 2) ? _year: _year -1;\\n    }\\n\\n    function _eralizeMonth(uint _month) private pure returns (uint _result) {\\n        _result = (_month > 2) ? _month - 3: _month + 9;  \\n    }\\n\\n\\n    function _getBaseMonthDay(uint _eralizedMonth) private pure returns (uint _result) {\\n        _result = ((_eralizedMonth * 153) + 2) / 5;\\n    }\\n    \\n    function _serializeDate(uint _eralizedYear, uint _eralizedMonth, uint _day) private pure returns (uint _result) {\\n        uint eras = _eralizedYear / 400;\\n        uint yearOfEra = _eralizedYear % 400;\\n        uint dayOfYear = _getBaseMonthDay(_eralizedMonth) + _day -1;\\n        uint dayOfEra = (yearOfEra * 365) + ((yearOfEra)/4) - (yearOfEra/100) + dayOfYear;\\n        uint serializedDay = (eras* DAYS_IN_ERA) + dayOfEra;\\n        _result = serializedDay;\\n    }\\n\\n    function _deserializeDate(uint _daysTimestamp, uint _direction) private pure returns (uint _year, uint _month, uint _day) {\\n        uint daysSinceBOT = (_direction == 0) ? DAYS_TO_UNIXEPOCH + _daysTimestamp:  DAYS_TO_UNIXEPOCH - _daysTimestamp;\\n        uint eras = daysSinceBOT/DAYS_IN_ERA;\\n        uint dayOfEra = daysSinceBOT % DAYS_IN_ERA;\\n        uint yearOfEra = (dayOfEra - (dayOfEra/1460) + (dayOfEra/36524) - (dayOfEra/146096))/365;\\n        uint eralizedYear = (eras * 400) + yearOfEra;\\n        uint eralizedDayOfYear = dayOfEra - ((yearOfEra*365) + (yearOfEra/4) - (yearOfEra/100));\\n        uint eralizedMonth = ((eralizedDayOfYear*5) + 2) /153;\\n        _month = (eralizedMonth < 10) ? eralizedMonth + 3: eralizedMonth - 9;\\n        _year = (_month < 3) ? eralizedYear + 1: eralizedYear; \\n        _day = eralizedDayOfYear - _getBaseMonthDay(eralizedMonth) +1;\\n    }\\n\\n    function _roundTimeUnit (uint _timestamp, uint _secondsUnit) private pure returns (uint _result) {\\n        _result = _timestamp - (_timestamp % _secondsUnit);\\n    }\\n\\n    function _addMonths (uint _year, uint _month, uint _day, uint _months) private pure returns (uint _rYear, uint _rMonth, uint _rDay){\\n    uint yearsToAdd = _months/12;\\n    uint monthsToAdd = _months % 12;\\n    _rMonth = ((_month + monthsToAdd) % 12 == 0 ) ?  12: (_month + monthsToAdd) % 12;\\n    _rYear = (_month + monthsToAdd > 12)  ? _year + yearsToAdd + 1: _year + yearsToAdd;\\n    _rDay = _day > getDaysInMonth(_rYear, _rMonth) ? getDaysInMonth(_rYear, _rMonth): _day;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb3ddae5ddb0c0246a484c948490267fd70c1796816f2bacc70b65efc50045583\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MissionModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport 'hardhat/console.sol';\\nimport './libraries/DataTypes.sol';\\nimport './libraries/Logic.sol';\\nimport './interfaces/IPompHub.sol';\\nimport './interfaces/IMissionModule.sol';\\nimport './interfaces/IMissionNFT.sol';\\n\\ncontract MissionModule is AccessControl, EIP712, ERC721Holder, IMissionModule {\\n  address public immutable pompHub;\\n  address public immutable missionNFT;\\n  bytes32 public constant HUB_ROLE = keccak256('HUB_ROLE');\\n  bytes32 internal constant ABORT_WITH_SIG_TYPEHASH =\\n    keccak256('Abort(uint256 profileId,uint256 missionId,uint256 nonce,uint256 deadline)');\\n  bytes32 internal constant COMPLETE_WITH_SIG_TYPEHASH =\\n    keccak256(\\n      'Complete(uint256 profileId,uint256 missionId,string challenge,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 internal constant FAIL_WITH_SIG_TYPEHASH =\\n    keccak256(\\n      'Fail(uint256 profileId,string challenge,uint256 reason,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 internal constant START_WITH_SIG_TYPEHASH =\\n    keccak256(\\n      'Start(uint256 profileId,string slug,string contentURI,uint256 minutesToExpire,address creator,address verifier,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 internal constant VERIFY_WITH_SIG_TYPEHASH =\\n    keccak256('Verify(uint256 profileId,string challenge,uint256 nonce,uint256 deadline)');\\n  bytes32 internal constant BATCH_VERIFY_WITH_SIG_TYPEHASH =\\n    keccak256('BatchVerify(uint256[] profileIds,string challenges,uint256 nonce,uint256 deadline)');\\n  mapping(address => uint256) public sigNonces;\\n  mapping(bytes32 => uint256) internal _missionIdBySlugHash;\\n  mapping(bytes32 => uint256) internal _missionIdByChallengeHash;\\n  mapping(bytes32 => uint256) internal _profileIdByChallengeHash;\\n  mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) internal _missionByIdByProfile;\\n\\n  event Aborted(uint256 indexed profileId, uint256 indexed missionId, uint256 timestamp);\\n  event Completed(\\n    address indexed verifier,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    bytes32 challenge,\\n    uint256 timestamp\\n  );\\n  event Started(\\n    address indexed creator,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    uint256 endtime,\\n    uint256 timestamp\\n  );\\n  event Verified(\\n    address indexed verifier,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    bytes32 challenge,\\n    uint256 timestamp\\n  );\\n  event Failed(\\n    address indexed verifier,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    bytes32 challenge,\\n    uint256 reason,\\n    uint256 timestamp\\n  );\\n  event BatchVerified(address indexed verifier, uint256 indexed count, uint256 timestamp);\\n\\n  constructor(address _pompHub, address _missionNFT) EIP712('Pomp', '1') {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _grantRole(HUB_ROLE, _pompHub);\\n    pompHub = _pompHub;\\n    missionNFT = _missionNFT;\\n  }\\n\\n  /// *********************************\\n  /// *****WRITE FUNCTIONS*****\\n  /// *********************************\\n\\n  /// @inheritdoc IMissionModule\\n  function abortWithSig(DataTypes.AbortWithSigData calldata vars, address owner) external override {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    Logic.validateSignature(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            ABORT_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            vars.missionId,\\n            sigNonces[owner],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      owner,\\n      vars.signature,\\n      vars.deadline\\n    );\\n    Logic.canAbortOrComplete(vars.profileId, vars.missionId, false, _missionByIdByProfile);\\n    ++sigNonces[owner];\\n    IMissionNFT(missionNFT).burn(_missionByIdByProfile[vars.profileId][vars.missionId].tokenId);\\n    _missionByIdByProfile[vars.profileId][vars.missionId].state = DataTypes.State.aborted;\\n\\n    emit Aborted(vars.profileId, vars.missionId, block.timestamp);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function batchVerifyWithSig(DataTypes.BatchVerifyWithSigData calldata vars, address sender)\\n    external\\n    override\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    (address[] memory _owners, uint256[] memory _tokenIds, uint256[] memory _missionIds) = Logic\\n      .batchVerify(\\n        _hashTypedDataV4(\\n          keccak256(\\n            abi.encode(\\n              BATCH_VERIFY_WITH_SIG_TYPEHASH,\\n              keccak256(abi.encodePacked(vars.profileIds)),\\n              keccak256(bytes(vars.challenges)),\\n              sigNonces[sender],\\n              vars.deadline\\n            )\\n          )\\n        ),\\n        sender,\\n        vars.signature,\\n        vars.deadline,\\n        DataTypes.BatchVerifyData(vars.profileIds, vars.challenges, sender),\\n        _missionByIdByProfile,\\n        _missionIdByChallengeHash\\n      );\\n\\n    ++sigNonces[sender];\\n\\n    IMissionNFT(missionNFT).oneToManyTransfer(address(this), _owners, _tokenIds);\\n\\n    for (uint256 i = 0; i < vars.profileIds.length; ++i) {\\n      _missionByIdByProfile[vars.profileIds[i]][_missionIds[i]].state = DataTypes.State.verified;\\n    }\\n\\n    emit BatchVerified(sender, _owners.length, block.timestamp);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function completeWithSig(DataTypes.CompleteWithSigData calldata vars, address owner)\\n    external\\n    override\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    Logic.validateSignature(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            COMPLETE_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            vars.missionId,\\n            keccak256(bytes(vars.challenge)),\\n            sigNonces[owner],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      owner,\\n      vars.signature,\\n      vars.deadline\\n    );\\n    (address verifier, bytes32 challengeHash) = Logic.completeMission(\\n      vars.profileId,\\n      vars.missionId,\\n      vars.challenge,\\n      owner,\\n      _missionByIdByProfile,\\n      _missionIdByChallengeHash,\\n      _profileIdByChallengeHash,\\n      sigNonces\\n    );\\n\\n    emit Completed(verifier, vars.profileId, vars.missionId, challengeHash, block.timestamp);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function failWithSig(DataTypes.FailWithSigData calldata vars, address sender) external override {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    bytes32 hash = keccak256(bytes(vars.challenge));\\n    Logic.validateSignature(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            FAIL_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            hash,\\n            vars.reason,\\n            sigNonces[sender],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      sender,\\n      vars.signature,\\n      vars.deadline\\n    );\\n    uint256 missionId = Logic.getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n    Logic.canVerifyOrFail(vars.profileId, missionId, sender, _missionByIdByProfile);\\n\\n    ++sigNonces[sender];\\n\\n    IMissionNFT(missionNFT).burn(_missionByIdByProfile[vars.profileId][missionId].tokenId);\\n    _missionByIdByProfile[vars.profileId][missionId].state = DataTypes.State.failed;\\n\\n    emit Failed(\\n      sender,\\n      vars.profileId,\\n      missionId,\\n      _missionByIdByProfile[vars.profileId][missionId].challengeHash,\\n      vars.reason,\\n      block.timestamp\\n    );\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function startWithSig(DataTypes.StartWithSigData calldata vars, address owner)\\n    external\\n    override\\n    returns (uint256)\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    Logic.validationStart(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            START_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            keccak256(bytes(vars.slug)),\\n            keccak256(bytes(vars.contentURI)),\\n            vars.minutesToExpire,\\n            vars.creator,\\n            vars.verifier,\\n            sigNonces[owner],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      owner,\\n      vars.signature,\\n      vars.deadline,\\n      vars.slug,\\n      _missionIdBySlugHash\\n    );\\n    ++sigNonces[owner];\\n    uint256 missionId = IPompHub(pompHub).getCountAndIncrement(vars.profileId);\\n    // todo fix royaltyRecipient & royaltyValue\\n    uint256 tokenId = IMissionNFT(missionNFT).safeMint(\\n      address(this),\\n      vars.contentURI,\\n      vars.creator,\\n      0\\n    );\\n    uint256 endtime = Logic.startMission(\\n      DataTypes.startMissionData(\\n        vars.profileId,\\n        tokenId,\\n        vars.slug,\\n        vars.minutesToExpire,\\n        vars.creator,\\n        vars.verifier,\\n        owner,\\n        missionId\\n      ),\\n      _missionByIdByProfile,\\n      _missionIdBySlugHash\\n    );\\n\\n    emit Started(vars.creator, vars.profileId, missionId, endtime, block.timestamp);\\n\\n    return tokenId;\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function verifyWithSig(DataTypes.VerifyWithSigData calldata vars, address sender)\\n    external\\n    override\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    bytes32 hash = Logic.validationVerify(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            VERIFY_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            keccak256(bytes(vars.challenge)),\\n            sigNonces[sender],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      sender,\\n      vars.signature,\\n      vars.deadline,\\n      vars.challenge\\n    );\\n    uint256 missionId = Logic.getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n    Logic.canVerifyOrFail(vars.profileId, missionId, sender, _missionByIdByProfile);\\n    ++sigNonces[sender];\\n    IERC721(missionNFT).safeTransferFrom(\\n      address(this),\\n      _missionByIdByProfile[vars.profileId][missionId].owner,\\n      _missionByIdByProfile[vars.profileId][missionId].tokenId\\n    );\\n    _missionByIdByProfile[vars.profileId][missionId].state = DataTypes.State.verified;\\n\\n    emit Verified(\\n      sender,\\n      vars.profileId,\\n      missionId,\\n      _missionByIdByProfile[vars.profileId][missionId].challengeHash,\\n      block.timestamp\\n    );\\n  }\\n\\n  /// ***********************\\n  /// ***VIEW FUNCTIONS***\\n  /// ***********************\\n\\n  /// @inheritdoc IMissionModule\\n  function canBatchVerify(DataTypes.CanBatchVerifyData calldata vars, address sender)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    Logic.canBatchVerify(\\n      DataTypes.BatchVerifyData(vars.profileIds, vars.challenges, sender),\\n      _missionByIdByProfile,\\n      _missionIdByChallengeHash\\n    );\\n    return true;\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionByChallenge(string calldata challenge)\\n    external\\n    view\\n    override\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    return\\n      Logic.missionByChallenge(\\n        challenge,\\n        missionNFT,\\n        _missionByIdByProfile,\\n        _missionIdByChallengeHash,\\n        _profileIdByChallengeHash\\n      );\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionById(uint256 profileId, uint256 missionId)\\n    external\\n    view\\n    override\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    return Logic.missionById(profileId, missionId, missionNFT, _missionByIdByProfile);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionBySlug(uint256 profileId, string calldata slug)\\n    external\\n    view\\n    override\\n    returns (DataTypes.MissionStruct memory)\\n  {\\n    return _missionByIdByProfile[profileId][_missionIdBySlugHash[keccak256(bytes(slug))]];\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionIdBySlug(string calldata slug) external view override returns (uint256) {\\n    return _missionIdBySlugHash[keccak256(bytes(slug))];\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(AccessControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x715d937990c478b933cb18095aa2125a1a6df3aeec85ecd5dcc3b8c7c572052f\",\"license\":\"MIT\"},\"contracts/interfaces/IMissionModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/DataTypes.sol';\\n\\ninterface IMissionModule {\\n  function abortWithSig(DataTypes.AbortWithSigData calldata vars, address owner) external;\\n\\n  function batchVerifyWithSig(DataTypes.BatchVerifyWithSigData calldata vars, address sender)\\n    external;\\n\\n  function canBatchVerify(DataTypes.CanBatchVerifyData calldata vars, address sender)\\n    external\\n    view\\n    returns (bool);\\n\\n  function completeWithSig(DataTypes.CompleteWithSigData calldata vars, address owner) external;\\n\\n  function failWithSig(DataTypes.FailWithSigData calldata vars, address sender) external;\\n\\n  function missionByChallenge(string calldata challenge)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  function missionById(uint256 profileId, uint256 missionId)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  function missionBySlug(uint256 profileId, string calldata slug)\\n    external\\n    view\\n    returns (DataTypes.MissionStruct memory);\\n\\n  function missionIdBySlug(string calldata slug) external view returns (uint256);\\n\\n  function startWithSig(DataTypes.StartWithSigData calldata vars, address owner)\\n    external\\n    returns (uint256);\\n\\n  function sigNonces(address wallet) external view returns (uint256);\\n\\n  function verifyWithSig(DataTypes.VerifyWithSigData calldata vars, address sender) external;\\n}\\n\",\"keccak256\":\"0x19819f20f8097507b00a8d54c57eaf7d93257dee468aeaff8b88e3fc00307d82\",\"license\":\"MIT\"},\"contracts/interfaces/IMissionNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMissionNFT {\\n  function safeMint(\\n    address to,\\n    string memory uri,\\n    address royaltyRecipient,\\n    uint96 royaltyValue\\n  ) external returns (uint256);\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function oneToManyTransfer(\\n    address from,\\n    address[] memory toAddresses,\\n    uint256[] memory tokenIds\\n  ) external;\\n}\\n\",\"keccak256\":\"0xdc38f15989ed8bf607b45196e8d53f56e1927a96e9f74f2e5be1584bfcdf92e4\",\"license\":\"MIT\"},\"contracts/interfaces/IPompHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\n/**\\n * @title Proof of Mission Protocol\\n *\\n * @notice This is the interface for the Pomp contract, the main entry point for the Pomp Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface IPompHub {\\n  /**\\n   * @notice Abort a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A AbortWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function abortWithSig(DataTypes.AbortWithSigData calldata vars) external;\\n\\n  function batchVerifyWithSig(DataTypes.BatchVerifyWithSigData calldata vars) external;\\n\\n  function canBatchVerify(DataTypes.CanBatchVerifyData calldata vars) external view returns (bool);\\n\\n  /**\\n   * @notice Check the eligiblity to claim profile.\\n   *\\n   * @param claimer Address of claimer.\\n   *\\n   * @param handle Check the handle fulfilling the format requirement.\\n   *\\n   * @param proof Merkle proof of the claimer.\\n   *\\n   * @return bool\\n   */\\n  function canClaim(\\n    address claimer,\\n    string calldata handle,\\n    bytes32[] calldata proof\\n  ) external view returns (bool);\\n\\n  function claimed(address wallet) external view returns (bool);\\n\\n  /**\\n   * @notice Complete a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A CompleteWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function completeWithSig(DataTypes.CompleteWithSigData calldata vars) external;\\n\\n  /**\\n   * @notice Creates a profile with the specified parameters. This\\n   * function must be called by a whitelisted profile creator.\\n   *\\n   * @param handle: The handle to set for the profile, must be unique and non-empty.\\n   *\\n   * @param proof: Merkle Tree proof of being whitelisted\\n   */\\n  function createProfile(string calldata handle, bytes32[] calldata proof)\\n    external\\n    returns (uint256);\\n\\n  function getCountAndIncrement(uint256) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the handle associated with a profile.\\n   *\\n   * @param profileId Profile identity.p\\n   *\\n   * @return string The handle associated with the profile.\\n   */\\n  function getHandle(uint256 profileId) external view returns (string memory);\\n\\n  /**\\n   * @notice Verify a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A VerifyWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function failWithSig(DataTypes.FailWithSigData calldata vars) external;\\n\\n  function missionByChallenge(string calldata challenge)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  function merkleroot() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the Mission struct associated with a profile.\\n   *\\n   * @param profileId Profile identity.\\n   *\\n   * @param missionId The token ID of the mission.\\n   *\\n   * @return MissionStruct Mission\\n   */\\n  function missionById(uint256 profileId, uint256 missionId)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  /**\\n   * @notice Returns the Mission struct associated with a profile.\\n   *\\n   * @param profileId main profile identity.\\n   *\\n   * @param slug Mission slug.\\n   *\\n   * @return MissionStruct Mission.\\n   */\\n  function missionBySlug(uint256 profileId, string calldata slug)\\n    external\\n    view\\n    returns (DataTypes.MissionStruct memory);\\n\\n  function missionIdBySlug(string calldata slug) external view returns (uint256);\\n\\n  function pause() external;\\n\\n  /**\\n   * @notice Returns the Profile struct associated with an address\\n   *\\n   * @param wallet Wallet holder address.\\n   *\\n   * @return ProfileId, ProfileStruct, Creator, Verifier\\n   */\\n  function profileByAddress(address wallet)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      DataTypes.ProfileStruct memory,\\n      bool,\\n      bool\\n    );\\n\\n  /**\\n   * @notice Returns the Profile struct associated with a profile.\\n   *\\n   * @param handle Profile handle.\\n   *\\n   * @return ProfileStruct The Profile struct associated with the profile.\\n   */\\n  function profileByHandle(string calldata handle)\\n    external\\n    view\\n    returns (DataTypes.ProfileStruct memory);\\n\\n  /**\\n   * @notice Returns the Profile struct associated with a profile.\\n   *\\n   * @param profileId The token ID of the profile to query the handle for.\\n   *\\n   * @return ProfileStruct The Profile struct associated with the profile.\\n   */\\n  function profileById(uint256 profileId) external view returns (DataTypes.ProfileStruct memory);\\n\\n  /**\\n   * @notice Returns the Profile identity associated with a profile.\\n   *\\n   * @param wallet Wallet holder address.\\n   *\\n   * @return uint256 An integer representing the profileId.\\n   */\\n  function profileIdByAddress(address wallet) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the Profile identity associated with a profile.\\n   *\\n   * @param handle Profile handle.\\n   *\\n   * @return uint256 An integer representing the profileId.\\n   */\\n  function profileIdByHandle(string calldata handle) external view returns (uint256);\\n\\n  function profileIdCounter() external view returns (uint256);\\n\\n  function setProfileModule(address _profileModule) external;\\n\\n  /**\\n   * @notice set Merkle root for whitelisted profiles.\\n   *\\n   * @param root A Merkle Tree Root for whitelisted profiles.\\n   *\\n   */\\n  function setMerklerootForProfiles(bytes32 root) external;\\n\\n  function setMissionModule(address _missionModule) external;\\n\\n  function sigNonces(address wallet) external view returns (uint256);\\n\\n  /**\\n   * @notice Start a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A StartWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   * @return uint256 An integer representing the missionId.\\n   */\\n  function startWithSig(DataTypes.StartWithSigData calldata vars) external returns (uint256);\\n\\n  function unpause() external;\\n\\n  /**\\n   * @notice Verify a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A VerifyWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function verifyWithSig(DataTypes.VerifyWithSigData calldata vars) external;\\n}\\n\",\"keccak256\":\"0xd9d293dfa0a38e25fe52270459155fc65dcda5179d356b46c2b2a3c1649e452e\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title DataTypes\\n * @author Pomp Protocol\\n *\\n * @notice A standard library of data types used throughout the Pomp Protocol.\\n */\\nlibrary DataTypes {\\n  /**\\n   * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n   *\\n   * @param Unpaused The fully unpaused state.\\n   * @param Paused The fully paused state.\\n   */\\n  enum ProtocolState {\\n    Unpaused,\\n    Paused\\n  }\\n\\n  enum State {\\n    nftDeposited,\\n    aborted,\\n    completed,\\n    verified,\\n    failed\\n  }\\n\\n  /**\\n   * @notice Mission\\n   *\\n   * @param owner Address of mission creator\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param verifier Address of verifier\\n   * @param starttime Mission start time (in second)\\n   * @param endtime Mission expiry time (in second)\\n   * @param challengeHash Challenge hash\\n   * @param state Mission state\\n   */\\n  struct MissionStruct {\\n    address owner;\\n    uint256 profileId;\\n    uint256 tokenId;\\n    address verifier;\\n    uint256 starttime;\\n    uint256 endtime;\\n    bytes32 challengeHash;\\n    State state;\\n    address creator;\\n  }\\n\\n  /**\\n   * @notice Profile\\n   *\\n   * @param missionCount number of missions of profile started\\n   * @param handle Profile handle, max-32 lowercase alphanumeric chars\\n   * @param owner Address of profile owner\\n   */\\n  struct ProfileStruct {\\n    uint256 missionCount;\\n    string handle;\\n    address owner;\\n  }\\n\\n  /**\\n   * @notice Argument to abort mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct AbortWithSigData {\\n    uint256 profileId;\\n    uint256 missionId;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to complete mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param challenge Challenge issued by verifier. Usually obtained via out-of-band process\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct CompleteWithSigData {\\n    uint256 profileId;\\n    uint256 missionId;\\n    string challenge;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to complete mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param challenge Challenge previously issued by verifier\\n   * @param reason The reason to fail this mission\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct FailWithSigData {\\n    uint256 profileId;\\n    string challenge;\\n    uint256 reason;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to start mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param slug The Slug of the mission\\n   * @param contentURI The contentURI for missionNFT\\n   * @param minutesToExpire Number of minutes to expire\\n   * @param verifier Address of the verifier\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct StartWithSigData {\\n    uint256 profileId;\\n    string slug;\\n    string contentURI;\\n    uint256 minutesToExpire;\\n    address creator;\\n    address verifier;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to verify mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param challenge Challenge previously issued by verifier\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct VerifyWithSigData {\\n    uint256 profileId;\\n    string challenge;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  struct CanBatchVerifyData {\\n    uint256[] profileIds;\\n    string challenges;\\n  }\\n\\n  struct BatchVerifyWithSigData {\\n    uint256[] profileIds;\\n    string challenges;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  struct BatchVerifyData {\\n    uint256[] profileIds;\\n    string challenges;\\n    address sender;\\n  }\\n\\n  struct startMissionData {\\n    uint256 profileId;\\n    uint256 tokenId;\\n    string slug;\\n    uint256 minutesToExpire;\\n    address creator;\\n    address verifier;\\n    address owner;\\n    uint256 missionId;\\n  }\\n}\\n\",\"keccak256\":\"0xe9a162131d8e79d3b95052bd81c27d52ee0769dbcbbfb78d10df787055448a56\",\"license\":\"MIT\"},\"contracts/libraries/Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@khronus/time-cog/contracts/src/KhronusTimeCog.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport 'hardhat/console.sol';\\nimport './DataTypes.sol';\\n\\nlibrary Logic {\\n  uint8 internal constant MAX_HANDLE_LENGTH = 31;\\n\\n  error Claimed();\\n  error ContainsInvalidChars();\\n  error Expired();\\n  error InvalidLength();\\n  error HandleTaken();\\n  error ChallengeTaken();\\n  error NotFound();\\n  error NotMatched();\\n  error NotOwner();\\n  error NotVerifiable();\\n  error NotReady();\\n  error NotVerifier();\\n  error NotWhitelisted();\\n  error SecurityViolated();\\n  error SignatureExpired();\\n  error SignatureInvalid();\\n  error SlugTaken();\\n\\n  function isValidChallenges(DataTypes.BatchVerifyData calldata vars) public pure returns (bool) {\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n\\n    if (\\n      !((challengesBytesArray.length % 43) == 0 &&\\n        challengesBytesArray.length >= 43 &&\\n        uint256(challengesBytesArray.length / 43) == profileCount)\\n    ) revert InvalidLength();\\n    return true;\\n  }\\n\\n  function canBatchVerify(\\n    DataTypes.BatchVerifyData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view {\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n    isValidChallenges(vars);\\n    bytes memory tempChallengeBytes = new bytes(43);\\n    for (uint256 i = 0; i < profileCount; ++i) {\\n      for (uint256 j = 0; j < 43; ++j) {\\n        tempChallengeBytes[j] = challengesBytesArray[j + (i * 43)];\\n      }\\n      bytes32 hash = keccak256(tempChallengeBytes);\\n      uint256 missionId = getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n      uint256 profileId = vars.profileIds[i];\\n\\n      if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n      if (_missionByIdByProfile[profileId][missionId].verifier != vars.sender) revert NotVerifier();\\n      if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n        revert NotVerifiable();\\n      if (_missionByIdByProfile[profileId][missionId].challengeHash != hash) revert NotMatched();\\n    }\\n  }\\n\\n  function batchVerify(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    DataTypes.BatchVerifyData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory,\\n      uint256[] memory,\\n      uint256[] memory\\n    )\\n  {\\n    validateSignature(digest, owner, signature, deadline);\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n    isValidChallenges(vars);\\n    uint256[] memory _missionIds = new uint256[](profileCount);\\n    address[] memory _owners = new address[](profileCount);\\n    uint256[] memory _tokenIds = new uint256[](profileCount);\\n    bytes memory tempChallengeBytes = new bytes(43);\\n    for (uint256 i = 0; i < profileCount; ++i) {\\n      for (uint256 j = 0; j < 43; ++j) {\\n        tempChallengeBytes[j] = challengesBytesArray[j + (i * 43)];\\n      }\\n      bytes32 hash = keccak256(tempChallengeBytes);\\n      uint256 missionId = getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n      uint256 profileId = vars.profileIds[i];\\n\\n      if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n      if (_missionByIdByProfile[profileId][missionId].verifier != vars.sender) revert NotVerifier();\\n      if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n        revert NotVerifiable();\\n      if (_missionByIdByProfile[profileId][missionId].challengeHash != hash) revert NotMatched();\\n\\n      _owners[i] = _missionByIdByProfile[profileId][missionId].owner;\\n      _tokenIds[i] = _missionByIdByProfile[profileId][missionId].tokenId;\\n      _missionIds[i] = missionId;\\n    }\\n    return (_owners, _tokenIds, _missionIds);\\n  }\\n\\n  function canAbortOrComplete(\\n    uint256 profileId,\\n    uint256 missionId,\\n    bool check, // check Expiry boolean\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) public view {\\n    if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n    if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.nftDeposited)\\n      revert NotReady();\\n    if (check == true && _missionByIdByProfile[profileId][missionId].endtime < block.timestamp)\\n      revert Expired();\\n  }\\n\\n  function canClaimProfileWithRevert(\\n    mapping(address => bool) storage claimed,\\n    address owner,\\n    bytes32[] calldata proof,\\n    string calldata handle,\\n    bytes32 merkleroot,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash\\n  ) public view {\\n    if (claimed[owner]) revert Claimed();\\n    if (!MerkleProof.verify(proof, merkleroot, keccak256(abi.encodePacked(owner))))\\n      revert NotWhitelisted();\\n    validateHandleOrSlug(handle);\\n    if (_profileIdByHandleHash[keccak256(bytes(handle))] != 0) revert HandleTaken();\\n  }\\n\\n  function canClaimProfile(\\n    mapping(address => bool) storage claimed,\\n    address claimer,\\n    bytes32[] calldata proof,\\n    string calldata handle,\\n    bytes32 merkleroot,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash\\n  ) public view returns (bool) {\\n    return\\n      !claimed[claimer] &&\\n      (MerkleProof.verify(proof, merkleroot, keccak256(abi.encodePacked(claimer)))) &&\\n      (_profileIdByHandleHash[keccak256(bytes(handle))] == 0);\\n  }\\n\\n  function canVerifyOrFail(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address sender,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) public view {\\n    if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n    if (_missionByIdByProfile[profileId][missionId].verifier != sender) revert NotVerifier();\\n    if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n      revert NotVerifiable();\\n  }\\n\\n  function completeMission(\\n    uint256 profileId,\\n    uint256 missionId,\\n    string calldata challenge,\\n    address owner,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash,\\n    mapping(bytes32 => uint256) storage _profileIdByChallengeHash,\\n    mapping(address => uint256) storage sigNonces\\n  ) public returns (address, bytes32) {\\n    // check right length\\n    if (bytes(challenge).length != 43) revert InvalidLength();\\n    canAbortOrComplete(profileId, missionId, true, _missionByIdByProfile);\\n    isChallengeAvailable(challenge, _missionIdByChallengeHash);\\n\\n    sigNonces[owner]++;\\n\\n    bytes32 challengeHash = keccak256(bytes(challenge));\\n    _missionByIdByProfile[profileId][missionId].state = DataTypes.State.completed;\\n    _missionByIdByProfile[profileId][missionId].challengeHash = challengeHash;\\n    _missionIdByChallengeHash[challengeHash] = missionId;\\n    _profileIdByChallengeHash[challengeHash] = profileId;\\n\\n    return (_missionByIdByProfile[profileId][missionId].verifier, challengeHash);\\n  }\\n\\n  function createProfile(\\n    mapping(address => bool) storage claimed,\\n    address owner,\\n    string calldata handle,\\n    uint256 profileId,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash,\\n    mapping(uint256 => DataTypes.ProfileStruct) storage _profileById,\\n    mapping(address => uint256) storage _profileIdByAddress\\n  ) external {\\n    _profileIdByHandleHash[keccak256(bytes(handle))] = profileId;\\n    _profileById[profileId].handle = handle;\\n    _profileById[profileId].owner = owner;\\n    _profileIdByAddress[owner] = profileId;\\n\\n    claimed[owner] = true;\\n  }\\n\\n  function getMissionIdByChallengeHash(\\n    bytes32 hash,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view returns (uint256) {\\n    uint256 missionId = _missionIdByChallengeHash[hash];\\n    if (missionId == 0) revert NotFound();\\n    return missionId;\\n  }\\n\\n  function getTokenUri(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) internal view returns (string memory) {\\n    string memory uri = (_missionByIdByProfile[profileId][missionId].state ==\\n      DataTypes.State.aborted ||\\n      _missionByIdByProfile[profileId][missionId].state == DataTypes.State.failed ||\\n      _missionByIdByProfile[profileId][missionId].tokenId == 0)\\n      ? ''\\n      : IERC721Metadata(missionNFT).tokenURI(_missionByIdByProfile[profileId][missionId].tokenId);\\n    return uri;\\n  }\\n\\n  function isChallengeAvailable(\\n    string calldata challenge,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view {\\n    if (_missionIdByChallengeHash[keccak256(bytes(challenge))] != 0) revert ChallengeTaken();\\n  }\\n\\n  function isSlugAvailable(\\n    string calldata slug,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) internal view {\\n    if (_missionIdBySlugHash[keccak256(bytes(slug))] != 0) revert SlugTaken();\\n  }\\n\\n  function missionByChallenge(\\n    string calldata challenge,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash,\\n    mapping(bytes32 => uint256) storage _profileIdByChallengeHash\\n  )\\n    public\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    bytes32 challengeHash = keccak256(bytes(challenge));\\n    uint256 profileId = _profileIdByChallengeHash[challengeHash];\\n    uint256 missionId = _missionIdByChallengeHash[challengeHash];\\n    string memory uri = getTokenUri(profileId, missionId, missionNFT, _missionByIdByProfile);\\n    return (_missionByIdByProfile[profileId][missionId], missionId, uri);\\n  }\\n\\n  function missionById(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  )\\n    public\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    string memory uri = getTokenUri(profileId, missionId, missionNFT, _missionByIdByProfile);\\n    return (_missionByIdByProfile[profileId][missionId], missionId, uri);\\n  }\\n\\n  function startMission(\\n    DataTypes.startMissionData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) public returns (uint256) {\\n    _missionIdBySlugHash[keccak256(bytes(vars.slug))] = vars.missionId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].owner = vars.owner;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].profileId = vars.profileId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].tokenId = vars.tokenId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].creator = vars.creator;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].verifier = vars.verifier;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].starttime = KhronusTimeCog.addMinutes(\\n      block.timestamp,\\n      0\\n    );\\n    uint256 endtime = KhronusTimeCog.addMinutes(block.timestamp, vars.minutesToExpire);\\n    _missionByIdByProfile[vars.profileId][vars.missionId].endtime = endtime;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].state = DataTypes.State.nftDeposited;\\n\\n    return endtime;\\n  }\\n\\n  function validateHandleOrSlug(string calldata handle) internal pure {\\n    bytes memory byteHandle = bytes(handle);\\n    if (byteHandle.length == 0 || byteHandle.length > MAX_HANDLE_LENGTH) revert InvalidLength();\\n\\n    uint256 byteHandleLength = byteHandle.length;\\n    for (uint256 i = 0; i < byteHandleLength; ) {\\n      if (\\n        (byteHandle[i] < '0' ||\\n          byteHandle[i] > 'z' ||\\n          (byteHandle[i] > '9' && byteHandle[i] < 'a')) &&\\n        byteHandle[i] != '.' &&\\n        byteHandle[i] != '-' &&\\n        byteHandle[i] != '_'\\n      ) revert ContainsInvalidChars();\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function validateSignature(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline\\n  ) public view returns (bool) {\\n    if (deadline < block.timestamp) revert SignatureExpired();\\n    address recoveredAddress = ECDSA.recover(digest, signature);\\n    if (\\n      owner != recoveredAddress || !SignatureChecker.isValidSignatureNow(owner, digest, signature)\\n    ) revert SignatureInvalid();\\n    return true;\\n  }\\n\\n  function validationStart(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    string calldata slug,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) public view {\\n    validateSignature(digest, owner, signature, deadline);\\n    validateHandleOrSlug(slug);\\n    isSlugAvailable(slug, _missionIdBySlugHash);\\n  }\\n\\n  function validationVerify(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    string calldata challenge\\n  ) public view returns (bytes32) {\\n    // check right length\\n    bytes memory challengeBytesArray = bytes(challenge);\\n    if (challengeBytesArray.length != 43) revert InvalidLength();\\n    bytes32 hash = keccak256(challengeBytesArray);\\n    validateSignature(digest, owner, signature, deadline);\\n    return hash;\\n  }\\n}\\n\",\"keccak256\":\"0x50e73d66f2cacdea14c41e963efdda4c26ed72df919ea53fd726ae41e02f2677\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620058ef380380620058ef833981810160405281019062000038919062000418565b6040518060400160405280600481526020017f506f6d70000000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a081815250506200010d8184846200020f60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050506200016b6000801b336200024b60201b60201c565b6200019d7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d5836200024b60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1681525050505062000503565b600083838346306040516020016200022c959493929190620004a6565b6040516020818303038152906040528051906020012090509392505050565b6200025d82826200033c60201b60201c565b6200033857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002dd620003a660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003e082620003b3565b9050919050565b620003f281620003d3565b8114620003fe57600080fd5b50565b6000815190506200041281620003e7565b92915050565b60008060408385031215620004325762000431620003ae565b5b6000620004428582860162000401565b9250506020620004558582860162000401565b9150509250929050565b6000819050919050565b62000474816200045f565b82525050565b6000819050919050565b6200048f816200047a565b82525050565b620004a081620003d3565b82525050565b600060a082019050620004bd600083018862000469565b620004cc602083018762000469565b620004db604083018662000469565b620004ea606083018562000484565b620004f9608083018462000495565b9695505050505050565b60805160a05160c05160e0516101005161012051610140516101605161534e620005a160003960008181610baf01528181611041015281816110eb0152818161143a0152818161190b01528181611e1a0152818161235f015261267301526000818161201b01526122ac01526000612a9e01526000612ae001526000612abf015260006129f401526000612a4a01526000612a73015261534e6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063a217fddf116100c3578063cb3c0a1e1161007c578063cb3c0a1e146103d6578063d547741f146103f2578063e5d9ce0b1461040e578063ed23bab91461042c578063f990ccd71461045c578063f9ea0daa1461048c5761014d565b8063a217fddf14610300578063a61e4f761461031e578063b51de50e14610350578063c171e3891461036e578063c263beaa1461038a578063c483dc3e146103a65761014d565b80632a1d5955116101155780632a1d59551461022e5780632f2ff15d1461024a57806336568abe1461026657806347119c5f1461028257806391d14854146102b257806399dac981146102e25761014d565b806301ffc9a7146101525780630c426988146101825780630dd0a9961461019e578063150b7a02146101ce578063248a9ca3146101fe575b600080fd5b61016c60048036038101906101679190612f5f565b6104be565b6040516101799190612fa7565b60405180910390f35b61019c60048036038101906101979190613044565b6104d0565b005b6101b860048036038101906101b391906130bf565b6107ba565b6040516101c59190612fa7565b60405180910390f35b6101e860048036038101906101e39190613297565b610904565b6040516101f59190613329565b60405180910390f35b6102186004803603810190610213919061337a565b610918565b60405161022591906133b6565b60405180910390f35b610248600480360381019061024391906133f0565b610937565b005b610264600480360381019061025f919061344c565b610d04565b005b610280600480360381019061027b919061344c565b610d25565b005b61029c600480360381019061029791906134ec565b610da8565b6040516102a991906136a7565b60405180910390f35b6102cc60048036038101906102c7919061344c565b610f82565b6040516102d99190612fa7565b60405180910390f35b6102ea610fec565b6040516102f791906133b6565b60405180910390f35b610308611010565b60405161031591906133b6565b60405180910390f35b610338600480360381019061033391906136c3565b611017565b604051610347939291906137a7565b60405180910390f35b6103586110e9565b60405161036591906137f7565b60405180910390f35b61038860048036038101906103839190613831565b61110d565b005b6103a4600480360381019061039f91906138ac565b6115cf565b005b6103c060048036038101906103bb91906136c3565b611aae565b6040516103cd9190613908565b60405180910390f35b6103f060048036038101906103eb9190613942565b611ae3565b005b61040c6004803603810190610407919061344c565b611ff8565b005b610416612019565b60405161042391906137f7565b60405180910390f35b610446600480360381019061044191906139be565b61203d565b6040516104539190613908565b60405180910390f35b61047660048036038101906104719190613a1a565b612631565b6040516104839190613908565b60405180910390f35b6104a660048036038101906104a19190613a47565b612649565b6040516104b5939291906137a7565b60405180910390f35b60006104c982612715565b9050919050565b6104fa7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090613ad3565b60405180910390fd5b7360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63a3cdda1361061c7fd4f619864f63edbc545c29cb83475e9806d540c2177352618fabef4fcac34e14856000013586602001358780604001906105919190613b02565b60405161059f929190613b95565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896080013560405160200161060196959493929190613bae565b6040516020818303038152906040528051906020012061278f565b8385806060019061062d9190613c0f565b87608001356040518663ffffffff1660e01b8152600401610652959493929190613cdd565b60206040518083038186803b15801561066a57600080fd5b505af415801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190613d57565b506000807360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63b032ea0c856000013586602001358780604001906106da9190613b02565b8860056003600460016040518a63ffffffff1660e01b815260040161070799989796959493929190613dd7565b604080518083038186803b15801561071e57600080fd5b505af4158015610732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107569190613e88565b91509150836020013584600001358373ffffffffffffffffffffffffffffffffffffffff167fcca46c76156e4bf43e5edc1745b6c45eac7cfc0fda52475fa0f81cdcb42a5c6284426040516107ac929190613ec8565b60405180910390a450505050565b60007360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63952c277860405180606001604052808680600001906107f19190613ef1565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018680602001906108469190613b02565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018573ffffffffffffffffffffffffffffffffffffffff16815250600560036040518463ffffffff1660e01b81526004016108ca939291906140c2565b60006040518083038186803b1580156108e257600080fd5b505af41580156108f6573d6000803e3d6000fd5b505050506001905092915050565b600063150b7a0260e01b9050949350505050565b6000806000838152602001908152602001600020600101549050919050565b6109617f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b6109a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099790613ad3565b60405180910390fd5b7360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63a3cdda13610a5c7f76193c8d609e139a018adf57bae0c3c4c7a2d0eb05701223b06bd8c01adc48c885600001358660200135600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548860600135604051602001610a41959493929190614100565b6040516020818303038152906040528051906020012061278f565b83858060400190610a6d9190613c0f565b87606001356040518663ffffffff1660e01b8152600401610a92959493929190613cdd565b60206040518083038186803b158015610aaa57600080fd5b505af4158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190613d57565b507360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63ae4bd6d083600001358460200135600060056040518563ffffffff1660e01b8152600401610b2a9493929190614162565b60006040518083038186803b158015610b4257600080fd5b505af4158015610b56573d6000803e3d6000fd5b50505050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154610ba6906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c686005600085600001358152602001908152602001600020600085602001358152602001908152602001600020600201546040518263ffffffff1660e01b8152600401610c359190613908565b600060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506001600560008460000135815260200190815260200160002060008460200135815260200190815260200160002060070160006101000a81548160ff02191690836004811115610cba57610cb9613579565b5b0217905550816020013582600001357fff3596231ab8e5bb37a9baf7f9355110d118c17f0c60731ec93eb199d37f745742604051610cf89190613908565b60405180910390a35050565b610d0d82610918565b610d16816127a9565b610d2083836127bd565b505050565b610d2d61289d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190614291565b60405180910390fd5b610da482826128a5565b5050565b610db0612e50565b600560008581526020019081526020016000206000600260008686604051610dd9929190613b95565b60405180910390208152602001908152602001600020548152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff166004811115610f0d57610f0c613579565b5b6004811115610f1f57610f1e613579565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090509392505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d581565b6000801b81565b61101f612e50565b600060607360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63b4d61add86867f00000000000000000000000000000000000000000000000000000000000000006005600360046040518763ffffffff1660e01b8152600401611087969594939291906142b1565b60006040518083038186803b15801561109f57600080fd5b505af41580156110b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110dc91906144cd565b9250925092509250925092565b7f000000000000000000000000000000000000000000000000000000000000000081565b6111377f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d90613ad3565b60405180910390fd5b60008280602001906111889190613b02565b604051611196929190613b95565b604051809103902090507360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63a3cdda1361125e7f9cc3774350162d9de873401b80ebde33ff0f4f4a6bc7ee58dda6ef202b2d860f8660000135858860400135600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a608001356040516020016112439695949392919061453f565b6040516020818303038152906040528051906020012061278f565b8486806060019061126f9190613c0f565b88608001356040518663ffffffff1660e01b8152600401611294959493929190613cdd565b60206040518083038186803b1580156112ac57600080fd5b505af41580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190613d57565b5060007360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63818a024c8360036040518363ffffffff1660e01b81526004016113219291906145a0565b60206040518083038186803b15801561133957600080fd5b505af415801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906145c9565b90507360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63735d8b2a8560000135838660056040518563ffffffff1660e01b81526004016113b594939291906145f6565b60006040518083038186803b1580156113cd57600080fd5b505af41580156113e1573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611431906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c6860056000876000013581526020019081526020016000206000848152602001908152602001600020600201546040518263ffffffff1660e01b81526004016114bc9190613908565b600060405180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b5050505060046005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff0219169083600481111561153d5761153c613579565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167f707b8ad08e58bc5a2367c8c45625ddb87d54731363b778f5722d10a345254dec60056000896000013581526020019081526020016000206000868152602001908152602001600020600601548860400135426040516115c19392919061463b565b60405180910390a450505050565b6115f97f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b611638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162f90613ad3565b60405180910390fd5b60008060007360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63d8a6271061174c7f4ec37a5398d88f8f6568620d918107772e8b3aa8ee69e4329a3daeeb0a6a357288806000019061168b9190613ef1565b60405160200161169c9291906146de565b604051602081830303815290604052805190602001208980602001906116c29190613b02565b6040516116d0929190613b95565b6040518091039020600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b606001356040516020016117319594939291906146f7565b6040516020818303038152906040528051906020012061278f565b8688806040019061175d9190613c0f565b8a6060013560405180606001604052808d806000019061177d9190613ef1565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018d80602001906117d29190613b02565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018c73ffffffffffffffffffffffffffffffffffffffff16815250600560036040518963ffffffff1660e01b815260040161185b98979695949392919061474a565b60006040518083038186803b15801561187357600080fd5b505af4158015611887573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b0919061494f565b925092509250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611902906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c182178e3085856040518463ffffffff1660e01b815260040161196693929190614b2c565b600060405180830381600087803b15801561198057600080fd5b505af1158015611994573d6000803e3d6000fd5b5050505060005b8580600001906119ab9190613ef1565b9050811015611a56576003600560008880600001906119ca9190613ef1565b858181106119db576119da614b71565b5b9050602002013581526020019081526020016000206000848481518110611a0557611a04614b71565b5b6020026020010151815260200190815260200160002060070160006101000a81548160ff02191690836004811115611a4057611a3f613579565b5b021790555080611a4f906141d6565b905061199b565b5082518473ffffffffffffffffffffffffffffffffffffffff167f4f1c4c01ed0bb6c3c7eab533380dc1f5a1688f9dca14f664f51a8052002a882942604051611a9f9190613908565b60405180910390a35050505050565b6000600260008484604051611ac4929190613b95565b6040518091039020815260200190815260200160002054905092915050565b611b0d7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b611b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4390613ad3565b60405180910390fd5b60007360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b637da7cda0611c2b7fa40842dfb38adb5c9b877f026d498df2a82043c9a0f6e3f83bb60ac349e14b498660000135878060200190611ba19190613b02565b604051611baf929190613b95565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548960600135604051602001611c10959493929190614ba0565b6040516020818303038152906040528051906020012061278f565b84868060400190611c3c9190613c0f565b8860600135898060200190611c519190613b02565b6040518863ffffffff1660e01b8152600401611c739796959493929190614bf3565b60206040518083038186803b158015611c8b57600080fd5b505af4158015611c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc39190614c58565b905060007360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63818a024c8360036040518363ffffffff1660e01b8152600401611d019291906145a0565b60206040518083038186803b158015611d1957600080fd5b505af4158015611d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5191906145c9565b90507360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b63735d8b2a8560000135838660056040518563ffffffff1660e01b8152600401611d9594939291906145f6565b60006040518083038186803b158015611dad57600080fd5b505af4158015611dc1573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611e11906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e306005600088600001358152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056000896000013581526020019081526020016000206000868152602001908152602001600020600201546040518463ffffffff1660e01b8152600401611eeb93929190614c85565b600060405180830381600087803b158015611f0557600080fd5b505af1158015611f19573d6000803e3d6000fd5b5050505060036005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff02191690836004811115611f6c57611f6b613579565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167fd9cc7312aeed0c2fe657f2d0972f6fde1b32ff59c7abcf319942e84f507e738e600560008960000135815260200190815260200160002060008681526020019081526020016000206006015442604051611fea929190613ec8565b60405180910390a450505050565b61200182610918565b61200a816127a9565b61201483836128a5565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006120697f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b6120a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209f90613ad3565b60405180910390fd5b7360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b634dd689186121da7f29be98e70cea08d618dc7e253dea019af07adea87df664c2c3c55cb783cfd3bb86600001358780602001906120fb9190613b02565b604051612109929190613b95565b60405180910390208880604001906121219190613b02565b60405161212f929190613b95565b604051809103902089606001358a608001602081019061214f9190613a1a565b8b60a00160208101906121629190613a1a565b600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548d60e001356040516020016121bf99989796959493929190614cbc565b6040516020818303038152906040528051906020012061278f565b84868060c001906121eb9190613c0f565b8860e001358980602001906122009190613b02565b60026040518963ffffffff1660e01b8152600401612225989796959493929190614d49565b60006040518083038186803b15801561223d57600080fd5b505af4158015612251573d6000803e3d6000fd5b50505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546122a1906141d6565b9190508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166316cd4c3a85600001356040518263ffffffff1660e01b81526004016123079190613908565b602060405180830381600087803b15801561232157600080fd5b505af1158015612335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235991906145c9565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635ff97ebf308780604001906123aa9190613b02565b8960800160208101906123bd9190613a1a565b60006040518663ffffffff1660e01b81526004016123df959493929190614e46565b602060405180830381600087803b1580156123f957600080fd5b505af115801561240d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243191906145c9565b905060007360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b6393e7ae646040518061010001604052808960000135815260200185815260200189806020019061247b9190613b02565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001896060013581526020018960800160208101906124e09190613a1a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018960a001602081019061250e9190613a1a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200186815250600560026040518463ffffffff1660e01b815260040161256b93929190614f44565b60206040518083038186803b15801561258357600080fd5b505af4158015612597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bb91906145c9565b90508286600001358760800160208101906125d69190613a1a565b73ffffffffffffffffffffffffffffffffffffffff167f27bf9a004cd5f8eb61e6bd7610afc3aeeb4d046a608102a140f1508064d85165844260405161261d929190614f82565b60405180910390a481935050505092915050565b60016020528060005260406000206000915090505481565b612651612e50565b600060607360011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b633ba0f99186867f000000000000000000000000000000000000000000000000000000000000000060056040518563ffffffff1660e01b81526004016126b394939291906145f6565b60006040518083038186803b1580156126cb57600080fd5b505af41580156126df573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061270891906144cd565b9250925092509250925092565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612788575061278782612986565b5b9050919050565b60006127a261279c6129f0565b83612b0a565b9050919050565b6127ba816127b561289d565b612b3d565b50565b6127c78282610f82565b61289957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061283e61289d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6128af8282610f82565b1561298257600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061292761289d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015612a6c57507f000000000000000000000000000000000000000000000000000000000000000046145b15612a99577f00000000000000000000000000000000000000000000000000000000000000009050612b07565b612b047f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612bda565b90505b90565b60008282604051602001612b1f929190615023565b60405160208183030381529060405280519060200120905092915050565b612b478282610f82565b612bd657612b6c8173ffffffffffffffffffffffffffffffffffffffff166014612c14565b612b7a8360001c6020612c14565b604051602001612b8b929190615123565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcd919061515d565b60405180910390fd5b5050565b60008383834630604051602001612bf595949392919061517f565b6040516020818303038152906040528051906020012090509392505050565b606060006002836002612c2791906151d2565b612c31919061522c565b67ffffffffffffffff811115612c4a57612c4961316c565b5b6040519080825280601f01601f191660200182016040528015612c7c5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612cb457612cb3614b71565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612d1857612d17614b71565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612d5891906151d2565b612d62919061522c565b90505b6001811115612e02577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612da457612da3614b71565b5b1a60f81b828281518110612dbb57612dba614b71565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612dfb90615282565b9050612d65565b5060008414612e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3d906152f8565b60405180910390fd5b8091505092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000801916815260200160006004811115612ed057612ecf613579565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f3c81612f07565b8114612f4757600080fd5b50565b600081359050612f5981612f33565b92915050565b600060208284031215612f7557612f74612efd565b5b6000612f8384828501612f4a565b91505092915050565b60008115159050919050565b612fa181612f8c565b82525050565b6000602082019050612fbc6000830184612f98565b92915050565b600080fd5b600060a08284031215612fdd57612fdc612fc2565b5b81905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061301182612fe6565b9050919050565b61302181613006565b811461302c57600080fd5b50565b60008135905061303e81613018565b92915050565b6000806040838503121561305b5761305a612efd565b5b600083013567ffffffffffffffff81111561307957613078612f02565b5b61308585828601612fc7565b92505060206130968582860161302f565b9150509250929050565b6000604082840312156130b6576130b5612fc2565b5b81905092915050565b600080604083850312156130d6576130d5612efd565b5b600083013567ffffffffffffffff8111156130f4576130f3612f02565b5b613100858286016130a0565b92505060206131118582860161302f565b9150509250929050565b6000819050919050565b61312e8161311b565b811461313957600080fd5b50565b60008135905061314b81613125565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131a48261315b565b810181811067ffffffffffffffff821117156131c3576131c261316c565b5b80604052505050565b60006131d6612ef3565b90506131e2828261319b565b919050565b600067ffffffffffffffff8211156132025761320161316c565b5b61320b8261315b565b9050602081019050919050565b82818337600083830152505050565b600061323a613235846131e7565b6131cc565b90508281526020810184848401111561325657613255613156565b5b613261848285613218565b509392505050565b600082601f83011261327e5761327d613151565b5b813561328e848260208601613227565b91505092915050565b600080600080608085870312156132b1576132b0612efd565b5b60006132bf8782880161302f565b94505060206132d08782880161302f565b93505060406132e18782880161313c565b925050606085013567ffffffffffffffff81111561330257613301612f02565b5b61330e87828801613269565b91505092959194509250565b61332381612f07565b82525050565b600060208201905061333e600083018461331a565b92915050565b6000819050919050565b61335781613344565b811461336257600080fd5b50565b6000813590506133748161334e565b92915050565b6000602082840312156133905761338f612efd565b5b600061339e84828501613365565b91505092915050565b6133b081613344565b82525050565b60006020820190506133cb60008301846133a7565b92915050565b6000608082840312156133e7576133e6612fc2565b5b81905092915050565b6000806040838503121561340757613406612efd565b5b600083013567ffffffffffffffff81111561342557613424612f02565b5b613431858286016133d1565b92505060206134428582860161302f565b9150509250929050565b6000806040838503121561346357613462612efd565b5b600061347185828601613365565b92505060206134828582860161302f565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126134ac576134ab613151565b5b8235905067ffffffffffffffff8111156134c9576134c861348c565b5b6020830191508360018202830111156134e5576134e4613491565b5b9250929050565b60008060006040848603121561350557613504612efd565b5b60006135138682870161313c565b935050602084013567ffffffffffffffff81111561353457613533612f02565b5b61354086828701613496565b92509250509250925092565b61355581613006565b82525050565b6135648161311b565b82525050565b61357381613344565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106135b9576135b8613579565b5b50565b60008190506135ca826135a8565b919050565b60006135da826135bc565b9050919050565b6135ea816135cf565b82525050565b61012082016000820151613607600085018261354c565b50602082015161361a602085018261355b565b50604082015161362d604085018261355b565b506060820151613640606085018261354c565b506080820151613653608085018261355b565b5060a082015161366660a085018261355b565b5060c082015161367960c085018261356a565b5060e082015161368c60e08501826135e1565b506101008201516136a161010085018261354c565b50505050565b6000610120820190506136bd60008301846135f0565b92915050565b600080602083850312156136da576136d9612efd565b5b600083013567ffffffffffffffff8111156136f8576136f7612f02565b5b61370485828601613496565b92509250509250929050565b6137198161311b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561375957808201518184015260208101905061373e565b83811115613768576000848401525b50505050565b60006137798261371f565b613783818561372a565b935061379381856020860161373b565b61379c8161315b565b840191505092915050565b6000610160820190506137bd60008301866135f0565b6137cb610120830185613710565b8181036101408301526137de818461376e565b9050949350505050565b6137f181613006565b82525050565b600060208201905061380c60008301846137e8565b92915050565b600060a0828403121561382857613827612fc2565b5b81905092915050565b6000806040838503121561384857613847612efd565b5b600083013567ffffffffffffffff81111561386657613865612f02565b5b61387285828601613812565b92505060206138838582860161302f565b9150509250929050565b6000608082840312156138a3576138a2612fc2565b5b81905092915050565b600080604083850312156138c3576138c2612efd565b5b600083013567ffffffffffffffff8111156138e1576138e0612f02565b5b6138ed8582860161388d565b92505060206138fe8582860161302f565b9150509250929050565b600060208201905061391d6000830184613710565b92915050565b60006080828403121561393957613938612fc2565b5b81905092915050565b6000806040838503121561395957613958612efd565b5b600083013567ffffffffffffffff81111561397757613976612f02565b5b61398385828601613923565b92505060206139948582860161302f565b9150509250929050565b600061010082840312156139b5576139b4612fc2565b5b81905092915050565b600080604083850312156139d5576139d4612efd565b5b600083013567ffffffffffffffff8111156139f3576139f2612f02565b5b6139ff8582860161399e565b9250506020613a108582860161302f565b9150509250929050565b600060208284031215613a3057613a2f612efd565b5b6000613a3e8482850161302f565b91505092915050565b60008060408385031215613a5e57613a5d612efd565b5b6000613a6c8582860161313c565b9250506020613a7d8582860161313c565b9150509250929050565b7f4e6f744875620000000000000000000000000000000000000000000000000000600082015250565b6000613abd60068361372a565b9150613ac882613a87565b602082019050919050565b60006020820190508181036000830152613aec81613ab0565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613b1f57613b1e613af3565b5b80840192508235915067ffffffffffffffff821115613b4157613b40613af8565b5b602083019250600182023603831315613b5d57613b5c613afd565b5b509250929050565b600081905092915050565b6000613b7c8385613b65565b9350613b89838584613218565b82840190509392505050565b6000613ba2828486613b70565b91508190509392505050565b600060c082019050613bc360008301896133a7565b613bd06020830188613710565b613bdd6040830187613710565b613bea60608301866133a7565b613bf76080830185613710565b613c0460a0830184613710565b979650505050505050565b60008083356001602003843603038112613c2c57613c2b613af3565b5b80840192508235915067ffffffffffffffff821115613c4e57613c4d613af8565b5b602083019250600182023603831315613c6a57613c69613afd565b5b509250929050565b613c7b81613344565b82525050565b613c8a81613006565b82525050565b600082825260208201905092915050565b6000613cad8385613c90565b9350613cba838584613218565b613cc38361315b565b840190509392505050565b613cd78161311b565b82525050565b6000608082019050613cf26000830188613c72565b613cff6020830187613c81565b8181036040830152613d12818587613ca1565b9050613d216060830184613cce565b9695505050505050565b613d3481612f8c565b8114613d3f57600080fd5b50565b600081519050613d5181613d2b565b92915050565b600060208284031215613d6d57613d6c612efd565b5b6000613d7b84828501613d42565b91505092915050565b600082825260208201905092915050565b6000613da18385613d84565b9350613dae838584613218565b613db78361315b565b840190509392505050565b8082525050565b8082525050565b8082525050565b600061010082019050613ded600083018c613cce565b613dfa602083018b613cce565b8181036040830152613e0d81898b613d95565b9050613e1c6060830188613c81565b613e296080830187613dc2565b613e3660a0830186613dc9565b613e4360c0830185613dc9565b613e5060e0830184613dd0565b9a9950505050505050505050565b600081519050613e6d81613018565b92915050565b600081519050613e828161334e565b92915050565b60008060408385031215613e9f57613e9e612efd565b5b6000613ead85828601613e5e565b9250506020613ebe85828601613e73565b9150509250929050565b6000604082019050613edd60008301856133a7565b613eea6020830184613710565b9392505050565b60008083356001602003843603038112613f0e57613f0d613af3565b5b80840192508235915067ffffffffffffffff821115613f3057613f2f613af8565b5b602083019250602082023603831315613f4c57613f4b613afd565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613f898161311b565b82525050565b6000613f9b8383613f80565b60208301905092915050565b6000602082019050919050565b6000613fbf82613f54565b613fc98185613f5f565b9350613fd483613f70565b8060005b83811015614005578151613fec8882613f8f565b9750613ff783613fa7565b925050600181019050613fd8565b5085935050505092915050565b600082825260208201905092915050565b600061402e8261371f565b6140388185614012565b935061404881856020860161373b565b6140518161315b565b840191505092915050565b61406581613006565b82525050565b600060608301600083015184820360008601526140888282613fb4565b915050602083015184820360208601526140a28282614023565b91505060408301516140b7604086018261405c565b508091505092915050565b600060608201905081810360008301526140dc818661406b565b90506140eb6020830185613dc2565b6140f86040830184613dc9565b949350505050565b600060a08201905061411560008301886133a7565b6141226020830187613710565b61412f6040830186613710565b61413c6060830185613710565b6141496080830184613710565b9695505050505050565b61415c81612f8c565b82525050565b60006080820190506141776000830187613cce565b6141846020830186613cce565b6141916040830185614153565b61419e6060830184613dc2565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006141e18261311b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614214576142136141a7565b5b600182019050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061427b602f8361372a565b91506142868261421f565b604082019050919050565b600060208201905081810360008301526142aa8161426e565b9050919050565b600060a08201905081810360008301526142cc81888a613d95565b90506142db6020830187613c81565b6142e86040830186613dc2565b6142f56060830185613dc9565b6143026080830184613dc9565b979650505050505050565b600080fd5b60008151905061432181613125565b92915050565b6005811061433457600080fd5b50565b60008151905061434681614327565b92915050565b600061012082840312156143635761436261430d565b5b61436e6101206131cc565b9050600061437e84828501613e5e565b600083015250602061439284828501614312565b60208301525060406143a684828501614312565b60408301525060606143ba84828501613e5e565b60608301525060806143ce84828501614312565b60808301525060a06143e284828501614312565b60a08301525060c06143f684828501613e73565b60c08301525060e061440a84828501614337565b60e08301525061010061441f84828501613e5e565b6101008301525092915050565b600067ffffffffffffffff8211156144475761444661316c565b5b6144508261315b565b9050602081019050919050565b600061447061446b8461442c565b6131cc565b90508281526020810184848401111561448c5761448b613156565b5b61449784828561373b565b509392505050565b600082601f8301126144b4576144b3613151565b5b81516144c484826020860161445d565b91505092915050565b600080600061016084860312156144e7576144e6612efd565b5b60006144f58682870161434c565b93505061012061450786828701614312565b92505061014084015167ffffffffffffffff81111561452957614528612f02565b5b6145358682870161449f565b9150509250925092565b600060c08201905061455460008301896133a7565b6145616020830188613710565b61456e60408301876133a7565b61457b6060830186613710565b6145886080830185613710565b61459560a0830184613710565b979650505050505050565b60006040820190506145b56000830185613c72565b6145c26020830184613dc9565b9392505050565b6000602082840312156145df576145de612efd565b5b60006145ed84828501614312565b91505092915050565b600060808201905061460b6000830187613cce565b6146186020830186613cce565b6146256040830185613c81565b6146326060830184613dc2565b95945050505050565b600060608201905061465060008301866133a7565b61465d6020830185613710565b61466a6040830184613710565b949350505050565b600081905092915050565b600080fd5b600061468e8385614672565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156146c1576146c061467d565b5b6020830292506146d2838584613218565b82840190509392505050565b60006146eb828486614682565b91508190509392505050565b600060a08201905061470c60008301886133a7565b61471960208301876133a7565b61472660408301866133a7565b6147336060830185613710565b6147406080830184613710565b9695505050505050565b600060e08201905061475f600083018b613c72565b61476c602083018a613c81565b818103604083015261477f81888a613ca1565b905061478e6060830187613cce565b81810360808301526147a0818661406b565b90506147af60a0830185613dc2565b6147bc60c0830184613dc9565b9998505050505050505050565b600067ffffffffffffffff8211156147e4576147e361316c565b5b602082029050602081019050919050565b6000614808614803846147c9565b6131cc565b9050808382526020820190506020840283018581111561482b5761482a613491565b5b835b8181101561485457806148408882613e5e565b84526020840193505060208101905061482d565b5050509392505050565b600082601f83011261487357614872613151565b5b81516148838482602086016147f5565b91505092915050565b600067ffffffffffffffff8211156148a7576148a661316c565b5b602082029050602081019050919050565b60006148cb6148c68461488c565b6131cc565b905080838252602082019050602084028301858111156148ee576148ed613491565b5b835b8181101561491757806149038882614312565b8452602084019350506020810190506148f0565b5050509392505050565b600082601f83011261493657614935613151565b5b81516149468482602086016148b8565b91505092915050565b60008060006060848603121561496857614967612efd565b5b600084015167ffffffffffffffff81111561498657614985612f02565b5b6149928682870161485e565b935050602084015167ffffffffffffffff8111156149b3576149b2612f02565b5b6149bf86828701614921565b925050604084015167ffffffffffffffff8111156149e0576149df612f02565b5b6149ec86828701614921565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614a2e838361354c565b60208301905092915050565b6000602082019050919050565b6000614a52826149f6565b614a5c8185614a01565b9350614a6783614a12565b8060005b83811015614a98578151614a7f8882614a22565b9750614a8a83614a3a565b925050600181019050614a6b565b5085935050505092915050565b600082825260208201905092915050565b6000614ac2838361355b565b60208301905092915050565b6000614ad982613f54565b614ae38185614aa5565b9350614aee83613f70565b8060005b83811015614b1f578151614b068882614ab6565b9750614b1183613fa7565b925050600181019050614af2565b5085935050505092915050565b6000606082019050614b4160008301866137e8565b8181036020830152614b538185614a47565b90508181036040830152614b678184614ace565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a082019050614bb560008301886133a7565b614bc26020830187613710565b614bcf60408301866133a7565b614bdc6060830185613710565b614be96080830184613710565b9695505050505050565b600060a082019050614c08600083018a613c72565b614c156020830189613c81565b8181036040830152614c28818789613ca1565b9050614c376060830186613cce565b8181036080830152614c4a818486613d95565b905098975050505050505050565b600060208284031215614c6e57614c6d612efd565b5b6000614c7c84828501613e73565b91505092915050565b6000606082019050614c9a60008301866137e8565b614ca760208301856137e8565b614cb46040830184613710565b949350505050565b600061012082019050614cd2600083018c6133a7565b614cdf602083018b613710565b614cec604083018a6133a7565b614cf960608301896133a7565b614d066080830188613710565b614d1360a08301876137e8565b614d2060c08301866137e8565b614d2d60e0830185613710565b614d3b610100830184613710565b9a9950505050505050505050565b600060c082019050614d5e600083018b613c72565b614d6b602083018a613c81565b8181036040830152614d7e81888a613ca1565b9050614d8d6060830187613cce565b8181036080830152614da0818587613d95565b9050614daf60a0830184613dc9565b9998505050505050505050565b6000614dc8838561372a565b9350614dd5838584613218565b614dde8361315b565b840190509392505050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614e30614e2b614e2684614de9565b614e0b565b614df3565b9050919050565b614e4081614e15565b82525050565b6000608082019050614e5b60008301886137e8565b8181036020830152614e6e818688614dbc565b9050614e7d60408301856137e8565b614e8a6060830184614e37565b9695505050505050565b600061010083016000830151614ead6000860182613f80565b506020830151614ec06020860182613f80565b5060408301518482036040860152614ed88282614023565b9150506060830151614eed6060860182613f80565b506080830151614f00608086018261405c565b5060a0830151614f1360a086018261405c565b5060c0830151614f2660c086018261405c565b5060e0830151614f3960e0860182613f80565b508091505092915050565b60006060820190508181036000830152614f5e8186614e94565b9050614f6d6020830185613dc2565b614f7a6040830184613dc9565b949350505050565b6000604082019050614f976000830185613710565b614fa46020830184613710565b9392505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614fec600283614fab565b9150614ff782614fb6565b600282019050919050565b6000819050919050565b61501d61501882613344565b615002565b82525050565b600061502e82614fdf565b915061503a828561500c565b60208201915061504a828461500c565b6020820191508190509392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615090601783614fab565b915061509b8261505a565b601782019050919050565b60006150b18261371f565b6150bb8185614fab565b93506150cb81856020860161373b565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061510d601183614fab565b9150615118826150d7565b601182019050919050565b600061512e82615083565b915061513a82856150a6565b915061514582615100565b915061515182846150a6565b91508190509392505050565b60006020820190508181036000830152615177818461376e565b905092915050565b600060a08201905061519460008301886133a7565b6151a160208301876133a7565b6151ae60408301866133a7565b6151bb6060830185613710565b6151c860808301846137e8565b9695505050505050565b60006151dd8261311b565b91506151e88361311b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615221576152206141a7565b5b828202905092915050565b60006152378261311b565b91506152428361311b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615277576152766141a7565b5b828201905092915050565b600061528d8261311b565b915060008214156152a1576152a06141a7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006152e260208361372a565b91506152ed826152ac565b602082019050919050565b60006020820190508181036000830152615311816152d5565b905091905056fea264697066735822122074be4707c907bedaa60c3a4fbf21be5af5b74734758fbc584864feda3da1ca3a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063a217fddf116100c3578063cb3c0a1e1161007c578063cb3c0a1e146103d6578063d547741f146103f2578063e5d9ce0b1461040e578063ed23bab91461042c578063f990ccd71461045c578063f9ea0daa1461048c5761014d565b8063a217fddf14610300578063a61e4f761461031e578063b51de50e14610350578063c171e3891461036e578063c263beaa1461038a578063c483dc3e146103a65761014d565b80632a1d5955116101155780632a1d59551461022e5780632f2ff15d1461024a57806336568abe1461026657806347119c5f1461028257806391d14854146102b257806399dac981146102e25761014d565b806301ffc9a7146101525780630c426988146101825780630dd0a9961461019e578063150b7a02146101ce578063248a9ca3146101fe575b600080fd5b61016c60048036038101906101679190612f5f565b6104be565b6040516101799190612fa7565b60405180910390f35b61019c60048036038101906101979190613044565b6104d0565b005b6101b860048036038101906101b391906130bf565b6107ba565b6040516101c59190612fa7565b60405180910390f35b6101e860048036038101906101e39190613297565b610904565b6040516101f59190613329565b60405180910390f35b6102186004803603810190610213919061337a565b610918565b60405161022591906133b6565b60405180910390f35b610248600480360381019061024391906133f0565b610937565b005b610264600480360381019061025f919061344c565b610d04565b005b610280600480360381019061027b919061344c565b610d25565b005b61029c600480360381019061029791906134ec565b610da8565b6040516102a991906136a7565b60405180910390f35b6102cc60048036038101906102c7919061344c565b610f82565b6040516102d99190612fa7565b60405180910390f35b6102ea610fec565b6040516102f791906133b6565b60405180910390f35b610308611010565b60405161031591906133b6565b60405180910390f35b610338600480360381019061033391906136c3565b611017565b604051610347939291906137a7565b60405180910390f35b6103586110e9565b60405161036591906137f7565b60405180910390f35b61038860048036038101906103839190613831565b61110d565b005b6103a4600480360381019061039f91906138ac565b6115cf565b005b6103c060048036038101906103bb91906136c3565b611aae565b6040516103cd9190613908565b60405180910390f35b6103f060048036038101906103eb9190613942565b611ae3565b005b61040c6004803603810190610407919061344c565b611ff8565b005b610416612019565b60405161042391906137f7565b60405180910390f35b610446600480360381019061044191906139be565b61203d565b6040516104539190613908565b60405180910390f35b61047660048036038101906104719190613a1a565b612631565b6040516104839190613908565b60405180910390f35b6104a660048036038101906104a19190613a47565b612649565b6040516104b5939291906137a7565b60405180910390f35b60006104c982612715565b9050919050565b6104fa7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090613ad3565b60405180910390fd5b73__$9842325bb1826b70c2ef476a1c714a02a7$__63a3cdda1361061c7fd4f619864f63edbc545c29cb83475e9806d540c2177352618fabef4fcac34e14856000013586602001358780604001906105919190613b02565b60405161059f929190613b95565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896080013560405160200161060196959493929190613bae565b6040516020818303038152906040528051906020012061278f565b8385806060019061062d9190613c0f565b87608001356040518663ffffffff1660e01b8152600401610652959493929190613cdd565b60206040518083038186803b15801561066a57600080fd5b505af415801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190613d57565b5060008073__$9842325bb1826b70c2ef476a1c714a02a7$__63b032ea0c856000013586602001358780604001906106da9190613b02565b8860056003600460016040518a63ffffffff1660e01b815260040161070799989796959493929190613dd7565b604080518083038186803b15801561071e57600080fd5b505af4158015610732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107569190613e88565b91509150836020013584600001358373ffffffffffffffffffffffffffffffffffffffff167fcca46c76156e4bf43e5edc1745b6c45eac7cfc0fda52475fa0f81cdcb42a5c6284426040516107ac929190613ec8565b60405180910390a450505050565b600073__$9842325bb1826b70c2ef476a1c714a02a7$__63952c277860405180606001604052808680600001906107f19190613ef1565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018680602001906108469190613b02565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018573ffffffffffffffffffffffffffffffffffffffff16815250600560036040518463ffffffff1660e01b81526004016108ca939291906140c2565b60006040518083038186803b1580156108e257600080fd5b505af41580156108f6573d6000803e3d6000fd5b505050506001905092915050565b600063150b7a0260e01b9050949350505050565b6000806000838152602001908152602001600020600101549050919050565b6109617f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b6109a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099790613ad3565b60405180910390fd5b73__$9842325bb1826b70c2ef476a1c714a02a7$__63a3cdda13610a5c7f76193c8d609e139a018adf57bae0c3c4c7a2d0eb05701223b06bd8c01adc48c885600001358660200135600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548860600135604051602001610a41959493929190614100565b6040516020818303038152906040528051906020012061278f565b83858060400190610a6d9190613c0f565b87606001356040518663ffffffff1660e01b8152600401610a92959493929190613cdd565b60206040518083038186803b158015610aaa57600080fd5b505af4158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190613d57565b5073__$9842325bb1826b70c2ef476a1c714a02a7$__63ae4bd6d083600001358460200135600060056040518563ffffffff1660e01b8152600401610b2a9493929190614162565b60006040518083038186803b158015610b4257600080fd5b505af4158015610b56573d6000803e3d6000fd5b50505050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154610ba6906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c686005600085600001358152602001908152602001600020600085602001358152602001908152602001600020600201546040518263ffffffff1660e01b8152600401610c359190613908565b600060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506001600560008460000135815260200190815260200160002060008460200135815260200190815260200160002060070160006101000a81548160ff02191690836004811115610cba57610cb9613579565b5b0217905550816020013582600001357fff3596231ab8e5bb37a9baf7f9355110d118c17f0c60731ec93eb199d37f745742604051610cf89190613908565b60405180910390a35050565b610d0d82610918565b610d16816127a9565b610d2083836127bd565b505050565b610d2d61289d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190614291565b60405180910390fd5b610da482826128a5565b5050565b610db0612e50565b600560008581526020019081526020016000206000600260008686604051610dd9929190613b95565b60405180910390208152602001908152602001600020548152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff166004811115610f0d57610f0c613579565b5b6004811115610f1f57610f1e613579565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090509392505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d581565b6000801b81565b61101f612e50565b6000606073__$9842325bb1826b70c2ef476a1c714a02a7$__63b4d61add86867f00000000000000000000000000000000000000000000000000000000000000006005600360046040518763ffffffff1660e01b8152600401611087969594939291906142b1565b60006040518083038186803b15801561109f57600080fd5b505af41580156110b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110dc91906144cd565b9250925092509250925092565b7f000000000000000000000000000000000000000000000000000000000000000081565b6111377f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d90613ad3565b60405180910390fd5b60008280602001906111889190613b02565b604051611196929190613b95565b6040518091039020905073__$9842325bb1826b70c2ef476a1c714a02a7$__63a3cdda1361125e7f9cc3774350162d9de873401b80ebde33ff0f4f4a6bc7ee58dda6ef202b2d860f8660000135858860400135600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a608001356040516020016112439695949392919061453f565b6040516020818303038152906040528051906020012061278f565b8486806060019061126f9190613c0f565b88608001356040518663ffffffff1660e01b8152600401611294959493929190613cdd565b60206040518083038186803b1580156112ac57600080fd5b505af41580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190613d57565b50600073__$9842325bb1826b70c2ef476a1c714a02a7$__63818a024c8360036040518363ffffffff1660e01b81526004016113219291906145a0565b60206040518083038186803b15801561133957600080fd5b505af415801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906145c9565b905073__$9842325bb1826b70c2ef476a1c714a02a7$__63735d8b2a8560000135838660056040518563ffffffff1660e01b81526004016113b594939291906145f6565b60006040518083038186803b1580156113cd57600080fd5b505af41580156113e1573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611431906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c6860056000876000013581526020019081526020016000206000848152602001908152602001600020600201546040518263ffffffff1660e01b81526004016114bc9190613908565b600060405180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b5050505060046005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff0219169083600481111561153d5761153c613579565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167f707b8ad08e58bc5a2367c8c45625ddb87d54731363b778f5722d10a345254dec60056000896000013581526020019081526020016000206000868152602001908152602001600020600601548860400135426040516115c19392919061463b565b60405180910390a450505050565b6115f97f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b611638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162f90613ad3565b60405180910390fd5b600080600073__$9842325bb1826b70c2ef476a1c714a02a7$__63d8a6271061174c7f4ec37a5398d88f8f6568620d918107772e8b3aa8ee69e4329a3daeeb0a6a357288806000019061168b9190613ef1565b60405160200161169c9291906146de565b604051602081830303815290604052805190602001208980602001906116c29190613b02565b6040516116d0929190613b95565b6040518091039020600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b606001356040516020016117319594939291906146f7565b6040516020818303038152906040528051906020012061278f565b8688806040019061175d9190613c0f565b8a6060013560405180606001604052808d806000019061177d9190613ef1565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018d80602001906117d29190613b02565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018c73ffffffffffffffffffffffffffffffffffffffff16815250600560036040518963ffffffff1660e01b815260040161185b98979695949392919061474a565b60006040518083038186803b15801561187357600080fd5b505af4158015611887573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b0919061494f565b925092509250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611902906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c182178e3085856040518463ffffffff1660e01b815260040161196693929190614b2c565b600060405180830381600087803b15801561198057600080fd5b505af1158015611994573d6000803e3d6000fd5b5050505060005b8580600001906119ab9190613ef1565b9050811015611a56576003600560008880600001906119ca9190613ef1565b858181106119db576119da614b71565b5b9050602002013581526020019081526020016000206000848481518110611a0557611a04614b71565b5b6020026020010151815260200190815260200160002060070160006101000a81548160ff02191690836004811115611a4057611a3f613579565b5b021790555080611a4f906141d6565b905061199b565b5082518473ffffffffffffffffffffffffffffffffffffffff167f4f1c4c01ed0bb6c3c7eab533380dc1f5a1688f9dca14f664f51a8052002a882942604051611a9f9190613908565b60405180910390a35050505050565b6000600260008484604051611ac4929190613b95565b6040518091039020815260200190815260200160002054905092915050565b611b0d7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b611b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4390613ad3565b60405180910390fd5b600073__$9842325bb1826b70c2ef476a1c714a02a7$__637da7cda0611c2b7fa40842dfb38adb5c9b877f026d498df2a82043c9a0f6e3f83bb60ac349e14b498660000135878060200190611ba19190613b02565b604051611baf929190613b95565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548960600135604051602001611c10959493929190614ba0565b6040516020818303038152906040528051906020012061278f565b84868060400190611c3c9190613c0f565b8860600135898060200190611c519190613b02565b6040518863ffffffff1660e01b8152600401611c739796959493929190614bf3565b60206040518083038186803b158015611c8b57600080fd5b505af4158015611c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc39190614c58565b9050600073__$9842325bb1826b70c2ef476a1c714a02a7$__63818a024c8360036040518363ffffffff1660e01b8152600401611d019291906145a0565b60206040518083038186803b158015611d1957600080fd5b505af4158015611d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5191906145c9565b905073__$9842325bb1826b70c2ef476a1c714a02a7$__63735d8b2a8560000135838660056040518563ffffffff1660e01b8152600401611d9594939291906145f6565b60006040518083038186803b158015611dad57600080fd5b505af4158015611dc1573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611e11906141d6565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e306005600088600001358152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056000896000013581526020019081526020016000206000868152602001908152602001600020600201546040518463ffffffff1660e01b8152600401611eeb93929190614c85565b600060405180830381600087803b158015611f0557600080fd5b505af1158015611f19573d6000803e3d6000fd5b5050505060036005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff02191690836004811115611f6c57611f6b613579565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167fd9cc7312aeed0c2fe657f2d0972f6fde1b32ff59c7abcf319942e84f507e738e600560008960000135815260200190815260200160002060008681526020019081526020016000206006015442604051611fea929190613ec8565b60405180910390a450505050565b61200182610918565b61200a816127a9565b61201483836128a5565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006120697f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f82565b6120a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209f90613ad3565b60405180910390fd5b73__$9842325bb1826b70c2ef476a1c714a02a7$__634dd689186121da7f29be98e70cea08d618dc7e253dea019af07adea87df664c2c3c55cb783cfd3bb86600001358780602001906120fb9190613b02565b604051612109929190613b95565b60405180910390208880604001906121219190613b02565b60405161212f929190613b95565b604051809103902089606001358a608001602081019061214f9190613a1a565b8b60a00160208101906121629190613a1a565b600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548d60e001356040516020016121bf99989796959493929190614cbc565b6040516020818303038152906040528051906020012061278f565b84868060c001906121eb9190613c0f565b8860e001358980602001906122009190613b02565b60026040518963ffffffff1660e01b8152600401612225989796959493929190614d49565b60006040518083038186803b15801561223d57600080fd5b505af4158015612251573d6000803e3d6000fd5b50505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546122a1906141d6565b9190508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166316cd4c3a85600001356040518263ffffffff1660e01b81526004016123079190613908565b602060405180830381600087803b15801561232157600080fd5b505af1158015612335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235991906145c9565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635ff97ebf308780604001906123aa9190613b02565b8960800160208101906123bd9190613a1a565b60006040518663ffffffff1660e01b81526004016123df959493929190614e46565b602060405180830381600087803b1580156123f957600080fd5b505af115801561240d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243191906145c9565b9050600073__$9842325bb1826b70c2ef476a1c714a02a7$__6393e7ae646040518061010001604052808960000135815260200185815260200189806020019061247b9190613b02565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001896060013581526020018960800160208101906124e09190613a1a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018960a001602081019061250e9190613a1a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200186815250600560026040518463ffffffff1660e01b815260040161256b93929190614f44565b60206040518083038186803b15801561258357600080fd5b505af4158015612597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bb91906145c9565b90508286600001358760800160208101906125d69190613a1a565b73ffffffffffffffffffffffffffffffffffffffff167f27bf9a004cd5f8eb61e6bd7610afc3aeeb4d046a608102a140f1508064d85165844260405161261d929190614f82565b60405180910390a481935050505092915050565b60016020528060005260406000206000915090505481565b612651612e50565b6000606073__$9842325bb1826b70c2ef476a1c714a02a7$__633ba0f99186867f000000000000000000000000000000000000000000000000000000000000000060056040518563ffffffff1660e01b81526004016126b394939291906145f6565b60006040518083038186803b1580156126cb57600080fd5b505af41580156126df573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061270891906144cd565b9250925092509250925092565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612788575061278782612986565b5b9050919050565b60006127a261279c6129f0565b83612b0a565b9050919050565b6127ba816127b561289d565b612b3d565b50565b6127c78282610f82565b61289957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061283e61289d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6128af8282610f82565b1561298257600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061292761289d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015612a6c57507f000000000000000000000000000000000000000000000000000000000000000046145b15612a99577f00000000000000000000000000000000000000000000000000000000000000009050612b07565b612b047f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612bda565b90505b90565b60008282604051602001612b1f929190615023565b60405160208183030381529060405280519060200120905092915050565b612b478282610f82565b612bd657612b6c8173ffffffffffffffffffffffffffffffffffffffff166014612c14565b612b7a8360001c6020612c14565b604051602001612b8b929190615123565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcd919061515d565b60405180910390fd5b5050565b60008383834630604051602001612bf595949392919061517f565b6040516020818303038152906040528051906020012090509392505050565b606060006002836002612c2791906151d2565b612c31919061522c565b67ffffffffffffffff811115612c4a57612c4961316c565b5b6040519080825280601f01601f191660200182016040528015612c7c5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612cb457612cb3614b71565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612d1857612d17614b71565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612d5891906151d2565b612d62919061522c565b90505b6001811115612e02577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612da457612da3614b71565b5b1a60f81b828281518110612dbb57612dba614b71565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612dfb90615282565b9050612d65565b5060008414612e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3d906152f8565b60405180910390fd5b8091505092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000801916815260200160006004811115612ed057612ecf613579565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f3c81612f07565b8114612f4757600080fd5b50565b600081359050612f5981612f33565b92915050565b600060208284031215612f7557612f74612efd565b5b6000612f8384828501612f4a565b91505092915050565b60008115159050919050565b612fa181612f8c565b82525050565b6000602082019050612fbc6000830184612f98565b92915050565b600080fd5b600060a08284031215612fdd57612fdc612fc2565b5b81905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061301182612fe6565b9050919050565b61302181613006565b811461302c57600080fd5b50565b60008135905061303e81613018565b92915050565b6000806040838503121561305b5761305a612efd565b5b600083013567ffffffffffffffff81111561307957613078612f02565b5b61308585828601612fc7565b92505060206130968582860161302f565b9150509250929050565b6000604082840312156130b6576130b5612fc2565b5b81905092915050565b600080604083850312156130d6576130d5612efd565b5b600083013567ffffffffffffffff8111156130f4576130f3612f02565b5b613100858286016130a0565b92505060206131118582860161302f565b9150509250929050565b6000819050919050565b61312e8161311b565b811461313957600080fd5b50565b60008135905061314b81613125565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6131a48261315b565b810181811067ffffffffffffffff821117156131c3576131c261316c565b5b80604052505050565b60006131d6612ef3565b90506131e2828261319b565b919050565b600067ffffffffffffffff8211156132025761320161316c565b5b61320b8261315b565b9050602081019050919050565b82818337600083830152505050565b600061323a613235846131e7565b6131cc565b90508281526020810184848401111561325657613255613156565b5b613261848285613218565b509392505050565b600082601f83011261327e5761327d613151565b5b813561328e848260208601613227565b91505092915050565b600080600080608085870312156132b1576132b0612efd565b5b60006132bf8782880161302f565b94505060206132d08782880161302f565b93505060406132e18782880161313c565b925050606085013567ffffffffffffffff81111561330257613301612f02565b5b61330e87828801613269565b91505092959194509250565b61332381612f07565b82525050565b600060208201905061333e600083018461331a565b92915050565b6000819050919050565b61335781613344565b811461336257600080fd5b50565b6000813590506133748161334e565b92915050565b6000602082840312156133905761338f612efd565b5b600061339e84828501613365565b91505092915050565b6133b081613344565b82525050565b60006020820190506133cb60008301846133a7565b92915050565b6000608082840312156133e7576133e6612fc2565b5b81905092915050565b6000806040838503121561340757613406612efd565b5b600083013567ffffffffffffffff81111561342557613424612f02565b5b613431858286016133d1565b92505060206134428582860161302f565b9150509250929050565b6000806040838503121561346357613462612efd565b5b600061347185828601613365565b92505060206134828582860161302f565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126134ac576134ab613151565b5b8235905067ffffffffffffffff8111156134c9576134c861348c565b5b6020830191508360018202830111156134e5576134e4613491565b5b9250929050565b60008060006040848603121561350557613504612efd565b5b60006135138682870161313c565b935050602084013567ffffffffffffffff81111561353457613533612f02565b5b61354086828701613496565b92509250509250925092565b61355581613006565b82525050565b6135648161311b565b82525050565b61357381613344565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106135b9576135b8613579565b5b50565b60008190506135ca826135a8565b919050565b60006135da826135bc565b9050919050565b6135ea816135cf565b82525050565b61012082016000820151613607600085018261354c565b50602082015161361a602085018261355b565b50604082015161362d604085018261355b565b506060820151613640606085018261354c565b506080820151613653608085018261355b565b5060a082015161366660a085018261355b565b5060c082015161367960c085018261356a565b5060e082015161368c60e08501826135e1565b506101008201516136a161010085018261354c565b50505050565b6000610120820190506136bd60008301846135f0565b92915050565b600080602083850312156136da576136d9612efd565b5b600083013567ffffffffffffffff8111156136f8576136f7612f02565b5b61370485828601613496565b92509250509250929050565b6137198161311b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561375957808201518184015260208101905061373e565b83811115613768576000848401525b50505050565b60006137798261371f565b613783818561372a565b935061379381856020860161373b565b61379c8161315b565b840191505092915050565b6000610160820190506137bd60008301866135f0565b6137cb610120830185613710565b8181036101408301526137de818461376e565b9050949350505050565b6137f181613006565b82525050565b600060208201905061380c60008301846137e8565b92915050565b600060a0828403121561382857613827612fc2565b5b81905092915050565b6000806040838503121561384857613847612efd565b5b600083013567ffffffffffffffff81111561386657613865612f02565b5b61387285828601613812565b92505060206138838582860161302f565b9150509250929050565b6000608082840312156138a3576138a2612fc2565b5b81905092915050565b600080604083850312156138c3576138c2612efd565b5b600083013567ffffffffffffffff8111156138e1576138e0612f02565b5b6138ed8582860161388d565b92505060206138fe8582860161302f565b9150509250929050565b600060208201905061391d6000830184613710565b92915050565b60006080828403121561393957613938612fc2565b5b81905092915050565b6000806040838503121561395957613958612efd565b5b600083013567ffffffffffffffff81111561397757613976612f02565b5b61398385828601613923565b92505060206139948582860161302f565b9150509250929050565b600061010082840312156139b5576139b4612fc2565b5b81905092915050565b600080604083850312156139d5576139d4612efd565b5b600083013567ffffffffffffffff8111156139f3576139f2612f02565b5b6139ff8582860161399e565b9250506020613a108582860161302f565b9150509250929050565b600060208284031215613a3057613a2f612efd565b5b6000613a3e8482850161302f565b91505092915050565b60008060408385031215613a5e57613a5d612efd565b5b6000613a6c8582860161313c565b9250506020613a7d8582860161313c565b9150509250929050565b7f4e6f744875620000000000000000000000000000000000000000000000000000600082015250565b6000613abd60068361372a565b9150613ac882613a87565b602082019050919050565b60006020820190508181036000830152613aec81613ab0565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613b1f57613b1e613af3565b5b80840192508235915067ffffffffffffffff821115613b4157613b40613af8565b5b602083019250600182023603831315613b5d57613b5c613afd565b5b509250929050565b600081905092915050565b6000613b7c8385613b65565b9350613b89838584613218565b82840190509392505050565b6000613ba2828486613b70565b91508190509392505050565b600060c082019050613bc360008301896133a7565b613bd06020830188613710565b613bdd6040830187613710565b613bea60608301866133a7565b613bf76080830185613710565b613c0460a0830184613710565b979650505050505050565b60008083356001602003843603038112613c2c57613c2b613af3565b5b80840192508235915067ffffffffffffffff821115613c4e57613c4d613af8565b5b602083019250600182023603831315613c6a57613c69613afd565b5b509250929050565b613c7b81613344565b82525050565b613c8a81613006565b82525050565b600082825260208201905092915050565b6000613cad8385613c90565b9350613cba838584613218565b613cc38361315b565b840190509392505050565b613cd78161311b565b82525050565b6000608082019050613cf26000830188613c72565b613cff6020830187613c81565b8181036040830152613d12818587613ca1565b9050613d216060830184613cce565b9695505050505050565b613d3481612f8c565b8114613d3f57600080fd5b50565b600081519050613d5181613d2b565b92915050565b600060208284031215613d6d57613d6c612efd565b5b6000613d7b84828501613d42565b91505092915050565b600082825260208201905092915050565b6000613da18385613d84565b9350613dae838584613218565b613db78361315b565b840190509392505050565b8082525050565b8082525050565b8082525050565b600061010082019050613ded600083018c613cce565b613dfa602083018b613cce565b8181036040830152613e0d81898b613d95565b9050613e1c6060830188613c81565b613e296080830187613dc2565b613e3660a0830186613dc9565b613e4360c0830185613dc9565b613e5060e0830184613dd0565b9a9950505050505050505050565b600081519050613e6d81613018565b92915050565b600081519050613e828161334e565b92915050565b60008060408385031215613e9f57613e9e612efd565b5b6000613ead85828601613e5e565b9250506020613ebe85828601613e73565b9150509250929050565b6000604082019050613edd60008301856133a7565b613eea6020830184613710565b9392505050565b60008083356001602003843603038112613f0e57613f0d613af3565b5b80840192508235915067ffffffffffffffff821115613f3057613f2f613af8565b5b602083019250602082023603831315613f4c57613f4b613afd565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613f898161311b565b82525050565b6000613f9b8383613f80565b60208301905092915050565b6000602082019050919050565b6000613fbf82613f54565b613fc98185613f5f565b9350613fd483613f70565b8060005b83811015614005578151613fec8882613f8f565b9750613ff783613fa7565b925050600181019050613fd8565b5085935050505092915050565b600082825260208201905092915050565b600061402e8261371f565b6140388185614012565b935061404881856020860161373b565b6140518161315b565b840191505092915050565b61406581613006565b82525050565b600060608301600083015184820360008601526140888282613fb4565b915050602083015184820360208601526140a28282614023565b91505060408301516140b7604086018261405c565b508091505092915050565b600060608201905081810360008301526140dc818661406b565b90506140eb6020830185613dc2565b6140f86040830184613dc9565b949350505050565b600060a08201905061411560008301886133a7565b6141226020830187613710565b61412f6040830186613710565b61413c6060830185613710565b6141496080830184613710565b9695505050505050565b61415c81612f8c565b82525050565b60006080820190506141776000830187613cce565b6141846020830186613cce565b6141916040830185614153565b61419e6060830184613dc2565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006141e18261311b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614214576142136141a7565b5b600182019050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061427b602f8361372a565b91506142868261421f565b604082019050919050565b600060208201905081810360008301526142aa8161426e565b9050919050565b600060a08201905081810360008301526142cc81888a613d95565b90506142db6020830187613c81565b6142e86040830186613dc2565b6142f56060830185613dc9565b6143026080830184613dc9565b979650505050505050565b600080fd5b60008151905061432181613125565b92915050565b6005811061433457600080fd5b50565b60008151905061434681614327565b92915050565b600061012082840312156143635761436261430d565b5b61436e6101206131cc565b9050600061437e84828501613e5e565b600083015250602061439284828501614312565b60208301525060406143a684828501614312565b60408301525060606143ba84828501613e5e565b60608301525060806143ce84828501614312565b60808301525060a06143e284828501614312565b60a08301525060c06143f684828501613e73565b60c08301525060e061440a84828501614337565b60e08301525061010061441f84828501613e5e565b6101008301525092915050565b600067ffffffffffffffff8211156144475761444661316c565b5b6144508261315b565b9050602081019050919050565b600061447061446b8461442c565b6131cc565b90508281526020810184848401111561448c5761448b613156565b5b61449784828561373b565b509392505050565b600082601f8301126144b4576144b3613151565b5b81516144c484826020860161445d565b91505092915050565b600080600061016084860312156144e7576144e6612efd565b5b60006144f58682870161434c565b93505061012061450786828701614312565b92505061014084015167ffffffffffffffff81111561452957614528612f02565b5b6145358682870161449f565b9150509250925092565b600060c08201905061455460008301896133a7565b6145616020830188613710565b61456e60408301876133a7565b61457b6060830186613710565b6145886080830185613710565b61459560a0830184613710565b979650505050505050565b60006040820190506145b56000830185613c72565b6145c26020830184613dc9565b9392505050565b6000602082840312156145df576145de612efd565b5b60006145ed84828501614312565b91505092915050565b600060808201905061460b6000830187613cce565b6146186020830186613cce565b6146256040830185613c81565b6146326060830184613dc2565b95945050505050565b600060608201905061465060008301866133a7565b61465d6020830185613710565b61466a6040830184613710565b949350505050565b600081905092915050565b600080fd5b600061468e8385614672565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156146c1576146c061467d565b5b6020830292506146d2838584613218565b82840190509392505050565b60006146eb828486614682565b91508190509392505050565b600060a08201905061470c60008301886133a7565b61471960208301876133a7565b61472660408301866133a7565b6147336060830185613710565b6147406080830184613710565b9695505050505050565b600060e08201905061475f600083018b613c72565b61476c602083018a613c81565b818103604083015261477f81888a613ca1565b905061478e6060830187613cce565b81810360808301526147a0818661406b565b90506147af60a0830185613dc2565b6147bc60c0830184613dc9565b9998505050505050505050565b600067ffffffffffffffff8211156147e4576147e361316c565b5b602082029050602081019050919050565b6000614808614803846147c9565b6131cc565b9050808382526020820190506020840283018581111561482b5761482a613491565b5b835b8181101561485457806148408882613e5e565b84526020840193505060208101905061482d565b5050509392505050565b600082601f83011261487357614872613151565b5b81516148838482602086016147f5565b91505092915050565b600067ffffffffffffffff8211156148a7576148a661316c565b5b602082029050602081019050919050565b60006148cb6148c68461488c565b6131cc565b905080838252602082019050602084028301858111156148ee576148ed613491565b5b835b8181101561491757806149038882614312565b8452602084019350506020810190506148f0565b5050509392505050565b600082601f83011261493657614935613151565b5b81516149468482602086016148b8565b91505092915050565b60008060006060848603121561496857614967612efd565b5b600084015167ffffffffffffffff81111561498657614985612f02565b5b6149928682870161485e565b935050602084015167ffffffffffffffff8111156149b3576149b2612f02565b5b6149bf86828701614921565b925050604084015167ffffffffffffffff8111156149e0576149df612f02565b5b6149ec86828701614921565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614a2e838361354c565b60208301905092915050565b6000602082019050919050565b6000614a52826149f6565b614a5c8185614a01565b9350614a6783614a12565b8060005b83811015614a98578151614a7f8882614a22565b9750614a8a83614a3a565b925050600181019050614a6b565b5085935050505092915050565b600082825260208201905092915050565b6000614ac2838361355b565b60208301905092915050565b6000614ad982613f54565b614ae38185614aa5565b9350614aee83613f70565b8060005b83811015614b1f578151614b068882614ab6565b9750614b1183613fa7565b925050600181019050614af2565b5085935050505092915050565b6000606082019050614b4160008301866137e8565b8181036020830152614b538185614a47565b90508181036040830152614b678184614ace565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a082019050614bb560008301886133a7565b614bc26020830187613710565b614bcf60408301866133a7565b614bdc6060830185613710565b614be96080830184613710565b9695505050505050565b600060a082019050614c08600083018a613c72565b614c156020830189613c81565b8181036040830152614c28818789613ca1565b9050614c376060830186613cce565b8181036080830152614c4a818486613d95565b905098975050505050505050565b600060208284031215614c6e57614c6d612efd565b5b6000614c7c84828501613e73565b91505092915050565b6000606082019050614c9a60008301866137e8565b614ca760208301856137e8565b614cb46040830184613710565b949350505050565b600061012082019050614cd2600083018c6133a7565b614cdf602083018b613710565b614cec604083018a6133a7565b614cf960608301896133a7565b614d066080830188613710565b614d1360a08301876137e8565b614d2060c08301866137e8565b614d2d60e0830185613710565b614d3b610100830184613710565b9a9950505050505050505050565b600060c082019050614d5e600083018b613c72565b614d6b602083018a613c81565b8181036040830152614d7e81888a613ca1565b9050614d8d6060830187613cce565b8181036080830152614da0818587613d95565b9050614daf60a0830184613dc9565b9998505050505050505050565b6000614dc8838561372a565b9350614dd5838584613218565b614dde8361315b565b840190509392505050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614e30614e2b614e2684614de9565b614e0b565b614df3565b9050919050565b614e4081614e15565b82525050565b6000608082019050614e5b60008301886137e8565b8181036020830152614e6e818688614dbc565b9050614e7d60408301856137e8565b614e8a6060830184614e37565b9695505050505050565b600061010083016000830151614ead6000860182613f80565b506020830151614ec06020860182613f80565b5060408301518482036040860152614ed88282614023565b9150506060830151614eed6060860182613f80565b506080830151614f00608086018261405c565b5060a0830151614f1360a086018261405c565b5060c0830151614f2660c086018261405c565b5060e0830151614f3960e0860182613f80565b508091505092915050565b60006060820190508181036000830152614f5e8186614e94565b9050614f6d6020830185613dc2565b614f7a6040830184613dc9565b949350505050565b6000604082019050614f976000830185613710565b614fa46020830184613710565b9392505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614fec600283614fab565b9150614ff782614fb6565b600282019050919050565b6000819050919050565b61501d61501882613344565b615002565b82525050565b600061502e82614fdf565b915061503a828561500c565b60208201915061504a828461500c565b6020820191508190509392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615090601783614fab565b915061509b8261505a565b601782019050919050565b60006150b18261371f565b6150bb8185614fab565b93506150cb81856020860161373b565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061510d601183614fab565b9150615118826150d7565b601182019050919050565b600061512e82615083565b915061513a82856150a6565b915061514582615100565b915061515182846150a6565b91508190509392505050565b60006020820190508181036000830152615177818461376e565b905092915050565b600060a08201905061519460008301886133a7565b6151a160208301876133a7565b6151ae60408301866133a7565b6151bb6060830185613710565b6151c860808301846137e8565b9695505050505050565b60006151dd8261311b565b91506151e88361311b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615221576152206141a7565b5b828202905092915050565b60006152378261311b565b91506152428361311b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615277576152766141a7565b5b828201905092915050565b600061528d8261311b565b915060008214156152a1576152a06141a7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006152e260208361372a565b91506152ed826152ac565b602082019050919050565b60006020820190508181036000830152615311816152d5565b905091905056fea264697066735822122074be4707c907bedaa60c3a4fbf21be5af5b74734758fbc584864feda3da1ca3a64736f6c63430008090033",
  "libraries": {
    "Logic": "0x60011d26C3c1C4b7f5d9B7c1ad7fd9448Ba4150b"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1308,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1303_storage)"
      },
      {
        "astId": 3721,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "sigNonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3725,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_missionIdBySlugHash",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3729,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_missionIdByChallengeHash",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3733,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_profileIdByChallengeHash",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3740,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_missionByIdByProfile",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(MissionStruct)5586_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(State)5566": {
        "encoding": "inplace",
        "label": "enum DataTypes.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1303_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1303_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(MissionStruct)5586_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct DataTypes.MissionStruct))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MissionStruct)5586_storage)"
      },
      "t_mapping(t_uint256,t_struct(MissionStruct)5586_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.MissionStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(MissionStruct)5586_storage"
      },
      "t_struct(MissionStruct)5586_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.MissionStruct",
        "members": [
          {
            "astId": 5568,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5570,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "profileId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5572,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5574,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "verifier",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5576,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "starttime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5578,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "endtime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5580,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "challengeHash",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 5583,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(State)5566"
          },
          {
            "astId": 5585,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "creator",
            "offset": 1,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)1303_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1300,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1302,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}