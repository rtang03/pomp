{
  "address": "0x025c3382BE9424668cA13245dE1D70Bdd2646318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pompHub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_missionNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Aborted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BatchVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Completed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reason",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Failed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endtime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Started",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "challenge",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUB_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "missionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.AbortWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "abortWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "profileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "challenges",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.BatchVerifyWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "batchVerifyWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "profileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "challenges",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.CanBatchVerifyData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "canBatchVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "missionId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "challenge",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CompleteWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "completeWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "challenge",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reason",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FailWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "failWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "challenge",
          "type": "string"
        }
      ],
      "name": "missionByChallenge",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "starttime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endtime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challengeHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum DataTypes.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.MissionStruct",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "missionId",
          "type": "uint256"
        }
      ],
      "name": "missionById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "starttime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endtime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challengeHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum DataTypes.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.MissionStruct",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "missionBySlug",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "starttime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endtime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "challengeHash",
              "type": "bytes32"
            },
            {
              "internalType": "enum DataTypes.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.MissionStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "missionIdBySlug",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "missionNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pompHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sigNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "slug",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minutesToExpire",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.StartWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "startWithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "challenge",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.VerifyWithSigData",
          "name": "vars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "verifyWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf92b06bb9c199d8016b62c982fb83f909fe78fcde1317e1f4e9e9ec03809643b",
  "receipt": {
    "to": null,
    "from": "0xc93b8F86c949962f3B6D01C4cdB5fC4663b1af0A",
    "contractAddress": "0x025c3382BE9424668cA13245dE1D70Bdd2646318",
    "transactionIndex": 14,
    "gasUsed": "4667188",
    "logsBloom": "0x
    "blockHash": "0xa7e23371164e97661c8be0b6a82028c3a60b333003b9adffe9f4774d8e1b0e86",
    "transactionHash": "0xf92b06bb9c199d8016b62c982fb83f909fe78fcde1317e1f4e9e9ec03809643b",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 28822986,
        "transactionHash": "0xf92b06bb9c199d8016b62c982fb83f909fe78fcde1317e1f4e9e9ec03809643b",
        "address": "0x025c3382BE9424668cA13245dE1D70Bdd2646318",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0xa7e23371164e97661c8be0b6a82028c3a60b333003b9adffe9f4774d8e1b0e86"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 28822986,
        "transactionHash": "0xf92b06bb9c199d8016b62c982fb83f909fe78fcde1317e1f4e9e9ec03809643b",
        "address": "0x025c3382BE9424668cA13245dE1D70Bdd2646318",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d5",
          "0x00000000000000000000000032c1c9547ebcd3c450bc73c88c1679f56db513fe",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0xa7e23371164e97661c8be0b6a82028c3a60b333003b9adffe9f4774d8e1b0e86"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 28822986,
        "transactionHash": "0xf92b06bb9c199d8016b62c982fb83f909fe78fcde1317e1f4e9e9ec03809643b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003a08bd59f09c000000000000000000000000000000000000000000000000000c0bb6984a699042000000000000000000000000000000000000000000000851eea1370114ff83f00000000000000000000000000000000000000000000000000bd1addaf078f442000000000000000000000000000000000000000000000851eedb3fbe6ef01ff0",
        "logIndex": 67,
        "blockHash": "0xa7e23371164e97661c8be0b6a82028c3a60b333003b9adffe9f4774d8e1b0e86"
      }
    ],
    "blockNumber": 28822986,
    "cumulativeGasUsed": "11739696",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32c1c9547ebcd3c450bc73c88c1679f56db513fe",
    "0xffcb591E32524e48775751b6B73c1D88E6A043ea"
  ],
  "numDeployments": 1,
  "solcInputHash": "68f26ef6a2c02e5b39a421cee7a22681",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pompHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_missionNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Aborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BatchVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Failed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"challenge\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUB_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.AbortWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"abortWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"challenges\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.BatchVerifyWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"batchVerifyWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"challenges\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.CanBatchVerifyData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"canBatchVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CompleteWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"completeWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FailWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"failWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"}],\"name\":\"missionByChallenge\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataTypes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.MissionStruct\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"}],\"name\":\"missionById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataTypes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.MissionStruct\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"missionBySlug\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum DataTypes.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.MissionStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"missionIdBySlug\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"missionNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pompHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sigNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minutesToExpire\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.StartWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"startWithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.VerifyWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verifyWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MissionModule.sol\":\"MissionModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@khronus/time-cog/contracts/src/KhronusTimeCog.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary KhronusTimeCog {\\n\\n     /* \\n    Reference Constants\\n    MONTH_NORMALIZER_MULTIPLIER = 153;\\n    MONTH_NORMALIZER_COMPLEMENT = 2;\\n    MONTH_NORMALIZER_DIVISOR = 5;\\n    NORMAL_YEAR_DAYS = 365;\\n    */\\n    \\n    //Used Constants\\n    uint constant DAYS_IN_ERA = 146097;\\n    uint constant DAYS_TO_UNIXEPOCH = 719468;\\n    uint constant LIMIT_YEAR = 2200;\\n    uint constant LIMET_DAY_TIMESTAMP = 84006;\\n    uint constant BASE_YEAR = 1740;\\n    //Main Library Functions\\n\\n    /*  \\n        Time format conversion functions \\n        The functions below transform date formats either from date format to day or seconds timestamps (unix format) or from timestamps to date format.\\n    */\\n\\n    //Get a timestamp in days since begining of unix epoch from a Civil Date to make it a Unix Timestamp multiply by number of seconds in day or solidity (1 days)\\n    function getDayTimestamp(uint _year, uint _month, uint _day) internal pure returns (uint _timestamp, uint _direction){\\n       require (isValidDate(_year, _month, _day), \\\"not a valid date as input as date object\\\");\\n       uint serializedDate = _serializeDate(_eralizeYear(_year, _month), _eralizeMonth(_month), _day);\\n       (serializedDate >= DAYS_TO_UNIXEPOCH) ? (_timestamp = serializedDate - DAYS_TO_UNIXEPOCH, _direction = 0):(_timestamp = DAYS_TO_UNIXEPOCH - serializedDate, _direction = 1);\\n    }\\n    \\n    //Get a Unix Timestamp from a full date-time object expressed as an array of 5 integers Year, Month, Day, Hour, Minute.\\n    function getDateObject(uint _timestamp, uint _direction) internal pure returns (uint[5] memory _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid day timestamp\\\");\\n        (_result[0],_result[1],_result[2]) = _deserializeDate(_timestamp/1 days, _direction);\\n        _result[3] = (_timestamp % 1 days) / 1 hours;\\n        _result[4] = (_timestamp % 1 hours) / 1 minutes;\\n    }\\n    //Get a day Timestamp from a full date object expressed as an array of 3 integers Year, Month, Day, to make it a Unix Timestamp multiply by number of seconds in day or solidity (1 days)\\n    function getDateObjectShort(uint _timestampDays, uint _direction) internal pure returns (uint[3] memory _result) {\\n        require (isValidDayTimestamp(_timestampDays), \\\"Not a valid day timestamp\\\");\\n        (_result[0],_result[1],_result[2]) = _deserializeDate(_timestampDays, _direction);\\n    }\\n    \\n    //Time Delta, returns the result in days of substracting the compared date from the base date, it returns the number of days and the direction 0 for positive, 1 for negative.\\n    function timeDelta(uint[3] memory _baseDate,uint[3] memory _comparedDate) internal pure returns (uint _timestampDays, uint _direction){\\n        require (isValidDate(_baseDate[0], _baseDate[1], _baseDate[2]) && isValidDate(_comparedDate[0], _comparedDate[1], _comparedDate[2]), \\\"One of the dates is not valid\\\");\\n        uint[2] memory baseT;\\n        (baseT[0], baseT[1])  = getDayTimestamp(_baseDate[0],_baseDate[1],_baseDate[2]);\\n        uint[2] memory comparedT;\\n        (comparedT[0], comparedT[1]) = getDayTimestamp(_comparedDate[0],_comparedDate[1],_comparedDate[2]);\\n        if (baseT[1] == comparedT[1]) {\\n            if (baseT[1] == 0){\\n                (baseT[0] >= comparedT[0]) ? (_timestampDays = baseT[0] - comparedT[0], _direction = 0): (_timestampDays = comparedT[0] - baseT[0], _direction = 1);\\n            }\\n            else{\\n                (baseT[0] >= comparedT[0]) ? (_timestampDays = baseT[0] - comparedT[0], _direction = 1): (_timestampDays = comparedT[0] - baseT[0], _direction = 0);\\n            }\\n        }\\n        else{\\n            (baseT[1] == 0) ? (_timestampDays = baseT[0] + comparedT[0], _direction = 0): (_timestampDays = baseT[0] + comparedT[0], _direction = 1);  \\n        }\\n    }\\n\\n    //Next Unit of time, these functions return the unix timestamp of the next unit of time, the returned timestamp is always rounded to the 0 value.\\n    function nextMinute(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 minutes) + 1  minutes;\\n    }\\n\\n    function nextHour(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 hours) + 1 hours;\\n    }\\n\\n    function nextDay(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 days) + 1 days;\\n    }\\n    \\n    function nextMonth(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        uint[3] memory dateObject;\\n        uint flag;\\n        (dateObject[0],dateObject[1],dateObject[2]) = _deserializeDate(_timestamp / 1 days,0);\\n        dateObject[2] = 1;\\n        (dateObject[1] + 1 > 12) ? (dateObject[1]=1,dateObject[0] +=1): (dateObject[1] += 1, dateObject[0] =dateObject[0]);\\n        (_result, flag) = getDayTimestamp(dateObject[0],dateObject[1],dateObject[2]);\\n        _result = (_result * 1 days);\\n    }\\n\\n    //Add Units of Time, returns the timestamp in seconds of adding a given number of units of time.\\n\\n    function addMinutes(uint _timestamp, uint _minutes) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_minutes * 1 minutes);\\n    }\\n\\n    function addHours(uint _timestamp, uint _hours) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_hours * 1 hours);\\n    }\\n\\n    function addDays(uint _timestamp, uint _days) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_days * 1 days);\\n    }\\n\\n    function addMonths(uint _timestamp, uint _months) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        uint[3] memory dateObject;\\n        uint remainder = _timestamp % 1 days;\\n        uint flag;\\n        (dateObject[0],dateObject[1],dateObject[2]) = _deserializeDate(_timestamp / 1 days,0);\\n        (dateObject[0],dateObject[1],dateObject[2]) = _addMonths(dateObject[0],dateObject[1],dateObject[2], _months);\\n        (_result, flag) = getDayTimestamp(dateObject[0],dateObject[1],dateObject[2]);\\n        _result = (_result * 1 days) + remainder;\\n    }\\n\\n    //utility functions for Civil Dates\\n    function isLeapYear(uint _year) internal pure returns(bool _result) {\\n        _result = _result = (_year % 4 == 0 &&( _year % 100 > 0 ||  _year % 400 == 0)) ? true:false;\\n    }\\n    \\n    function getDaysInMonth(uint _year,uint _month)internal pure returns(uint _result) {\\n        uint8[12] memory daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\\n        _result = (isLeapYear(_year) && _month == 2) ? 29: daysInMonth[_month - 1];\\n    }\\n\\n    function isValidDate(uint _year, uint _month, uint _day) internal pure returns(bool _result) {\\n        if (_year >= LIMIT_YEAR || _year < BASE_YEAR || _month < 1 || _month > 12 || _day < 1) {_result = false;}\\n        else{\\n            _result = (_day <= getDaysInMonth(_year, _month)) ? true: false;\\n        }\\n    }\\n\\n    function isValidTimestamp(uint _timestamp) internal pure returns(bool _result) {\\n      return (_timestamp <= (LIMET_DAY_TIMESTAMP* 1 days));\\n    }\\n\\n    function isValidDayTimestamp(uint _timestamp) internal pure returns(bool _result) {\\n       return _timestamp <= (LIMET_DAY_TIMESTAMP);\\n    }\\n\\n    // Private Functions\\n\\n    //Algorithm private functions for library use\\n    \\n    function _eralizeYear(uint _year, uint _month) private pure returns(uint _result){\\n        _result = (_month > 2) ? _year: _year -1;\\n    }\\n\\n    function _eralizeMonth(uint _month) private pure returns (uint _result) {\\n        _result = (_month > 2) ? _month - 3: _month + 9;  \\n    }\\n\\n\\n    function _getBaseMonthDay(uint _eralizedMonth) private pure returns (uint _result) {\\n        _result = ((_eralizedMonth * 153) + 2) / 5;\\n    }\\n    \\n    function _serializeDate(uint _eralizedYear, uint _eralizedMonth, uint _day) private pure returns (uint _result) {\\n        uint eras = _eralizedYear / 400;\\n        uint yearOfEra = _eralizedYear % 400;\\n        uint dayOfYear = _getBaseMonthDay(_eralizedMonth) + _day -1;\\n        uint dayOfEra = (yearOfEra * 365) + ((yearOfEra)/4) - (yearOfEra/100) + dayOfYear;\\n        uint serializedDay = (eras* DAYS_IN_ERA) + dayOfEra;\\n        _result = serializedDay;\\n    }\\n\\n    function _deserializeDate(uint _daysTimestamp, uint _direction) private pure returns (uint _year, uint _month, uint _day) {\\n        uint daysSinceBOT = (_direction == 0) ? DAYS_TO_UNIXEPOCH + _daysTimestamp:  DAYS_TO_UNIXEPOCH - _daysTimestamp;\\n        uint eras = daysSinceBOT/DAYS_IN_ERA;\\n        uint dayOfEra = daysSinceBOT % DAYS_IN_ERA;\\n        uint yearOfEra = (dayOfEra - (dayOfEra/1460) + (dayOfEra/36524) - (dayOfEra/146096))/365;\\n        uint eralizedYear = (eras * 400) + yearOfEra;\\n        uint eralizedDayOfYear = dayOfEra - ((yearOfEra*365) + (yearOfEra/4) - (yearOfEra/100));\\n        uint eralizedMonth = ((eralizedDayOfYear*5) + 2) /153;\\n        _month = (eralizedMonth < 10) ? eralizedMonth + 3: eralizedMonth - 9;\\n        _year = (_month < 3) ? eralizedYear + 1: eralizedYear; \\n        _day = eralizedDayOfYear - _getBaseMonthDay(eralizedMonth) +1;\\n    }\\n\\n    function _roundTimeUnit (uint _timestamp, uint _secondsUnit) private pure returns (uint _result) {\\n        _result = _timestamp - (_timestamp % _secondsUnit);\\n    }\\n\\n    function _addMonths (uint _year, uint _month, uint _day, uint _months) private pure returns (uint _rYear, uint _rMonth, uint _rDay){\\n    uint yearsToAdd = _months/12;\\n    uint monthsToAdd = _months % 12;\\n    _rMonth = ((_month + monthsToAdd) % 12 == 0 ) ?  12: (_month + monthsToAdd) % 12;\\n    _rYear = (_month + monthsToAdd > 12)  ? _year + yearsToAdd + 1: _year + yearsToAdd;\\n    _rDay = _day > getDaysInMonth(_rYear, _rMonth) ? getDaysInMonth(_rYear, _rMonth): _day;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb3ddae5ddb0c0246a484c948490267fd70c1796816f2bacc70b65efc50045583\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MissionModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport 'hardhat/console.sol';\\nimport './libraries/DataTypes.sol';\\nimport './libraries/Logic.sol';\\nimport './interfaces/IPompHub.sol';\\nimport './interfaces/IMissionModule.sol';\\nimport './interfaces/IMissionNFT.sol';\\n\\ncontract MissionModule is AccessControl, EIP712, ERC721Holder, IMissionModule {\\n  address public immutable pompHub;\\n  address public immutable missionNFT;\\n  bytes32 public constant HUB_ROLE = keccak256('HUB_ROLE');\\n  bytes32 internal constant ABORT_WITH_SIG_TYPEHASH =\\n    keccak256('Abort(uint256 profileId,uint256 missionId,uint256 nonce,uint256 deadline)');\\n  bytes32 internal constant COMPLETE_WITH_SIG_TYPEHASH =\\n    keccak256(\\n      'Complete(uint256 profileId,uint256 missionId,string challenge,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 internal constant FAIL_WITH_SIG_TYPEHASH =\\n    keccak256(\\n      'Fail(uint256 profileId,string challenge,uint256 reason,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 internal constant START_WITH_SIG_TYPEHASH =\\n    keccak256(\\n      'Start(uint256 profileId,string slug,string contentURI,uint256 minutesToExpire,address creator,address verifier,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 internal constant VERIFY_WITH_SIG_TYPEHASH =\\n    keccak256('Verify(uint256 profileId,string challenge,uint256 nonce,uint256 deadline)');\\n  bytes32 internal constant BATCH_VERIFY_WITH_SIG_TYPEHASH =\\n    keccak256('BatchVerify(uint256[] profileIds,string challenges,uint256 nonce,uint256 deadline)');\\n  mapping(address => uint256) public sigNonces;\\n  mapping(bytes32 => uint256) internal _missionIdBySlugHash;\\n  mapping(bytes32 => uint256) internal _missionIdByChallengeHash;\\n  mapping(bytes32 => uint256) internal _profileIdByChallengeHash;\\n  mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) internal _missionByIdByProfile;\\n\\n  event Aborted(uint256 indexed profileId, uint256 indexed missionId, uint256 timestamp);\\n  event Completed(\\n    address indexed verifier,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    bytes32 challenge,\\n    uint256 timestamp\\n  );\\n  event Started(\\n    address indexed creator,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    uint256 endtime,\\n    uint256 timestamp\\n  );\\n  event Verified(\\n    address indexed verifier,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    bytes32 challenge,\\n    uint256 timestamp\\n  );\\n  event Failed(\\n    address indexed verifier,\\n    uint256 indexed profileId,\\n    uint256 indexed missionId,\\n    bytes32 challenge,\\n    uint256 reason,\\n    uint256 timestamp\\n  );\\n  event BatchVerified(address indexed verifier, uint256 indexed count, uint256 timestamp);\\n\\n  constructor(address _pompHub, address _missionNFT) EIP712('Pomp', '1') {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _grantRole(HUB_ROLE, _pompHub);\\n    pompHub = _pompHub;\\n    missionNFT = _missionNFT;\\n  }\\n\\n  /// *********************************\\n  /// *****WRITE FUNCTIONS*****\\n  /// *********************************\\n\\n  /// @inheritdoc IMissionModule\\n  function abortWithSig(DataTypes.AbortWithSigData calldata vars, address owner) external override {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    Logic.validateSignature(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            ABORT_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            vars.missionId,\\n            sigNonces[owner],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      owner,\\n      vars.signature,\\n      vars.deadline\\n    );\\n    Logic.canAbortOrComplete(vars.profileId, vars.missionId, false, _missionByIdByProfile);\\n    ++sigNonces[owner];\\n    IMissionNFT(missionNFT).burn(_missionByIdByProfile[vars.profileId][vars.missionId].tokenId);\\n    _missionByIdByProfile[vars.profileId][vars.missionId].state = DataTypes.State.aborted;\\n\\n    emit Aborted(vars.profileId, vars.missionId, block.timestamp);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function batchVerifyWithSig(DataTypes.BatchVerifyWithSigData calldata vars, address sender)\\n    external\\n    override\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    (address[] memory _owners, uint256[] memory _tokenIds, uint256[] memory _missionIds) = Logic\\n      .batchVerify(\\n        _hashTypedDataV4(\\n          keccak256(\\n            abi.encode(\\n              BATCH_VERIFY_WITH_SIG_TYPEHASH,\\n              keccak256(abi.encodePacked(vars.profileIds)),\\n              keccak256(bytes(vars.challenges)),\\n              sigNonces[sender],\\n              vars.deadline\\n            )\\n          )\\n        ),\\n        sender,\\n        vars.signature,\\n        vars.deadline,\\n        DataTypes.BatchVerifyData(vars.profileIds, vars.challenges, sender),\\n        _missionByIdByProfile,\\n        _missionIdByChallengeHash\\n      );\\n\\n    ++sigNonces[sender];\\n\\n    IMissionNFT(missionNFT).oneToManyTransfer(address(this), _owners, _tokenIds);\\n\\n    for (uint256 i = 0; i < vars.profileIds.length; ++i) {\\n      _missionByIdByProfile[vars.profileIds[i]][_missionIds[i]].state = DataTypes.State.verified;\\n    }\\n\\n    emit BatchVerified(sender, _owners.length, block.timestamp);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function completeWithSig(DataTypes.CompleteWithSigData calldata vars, address owner)\\n    external\\n    override\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    Logic.validateSignature(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            COMPLETE_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            vars.missionId,\\n            keccak256(bytes(vars.challenge)),\\n            sigNonces[owner],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      owner,\\n      vars.signature,\\n      vars.deadline\\n    );\\n    (address verifier, bytes32 challengeHash) = Logic.completeMission(\\n      vars.profileId,\\n      vars.missionId,\\n      vars.challenge,\\n      owner,\\n      _missionByIdByProfile,\\n      _missionIdByChallengeHash,\\n      _profileIdByChallengeHash,\\n      sigNonces\\n    );\\n\\n    emit Completed(verifier, vars.profileId, vars.missionId, challengeHash, block.timestamp);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function failWithSig(DataTypes.FailWithSigData calldata vars, address sender) external override {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    bytes32 hash = keccak256(bytes(vars.challenge));\\n    Logic.validateSignature(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            FAIL_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            hash,\\n            vars.reason,\\n            sigNonces[sender],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      sender,\\n      vars.signature,\\n      vars.deadline\\n    );\\n    uint256 missionId = Logic.getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n    Logic.canVerifyOrFail(vars.profileId, missionId, sender, _missionByIdByProfile);\\n\\n    ++sigNonces[sender];\\n\\n    IMissionNFT(missionNFT).burn(_missionByIdByProfile[vars.profileId][missionId].tokenId);\\n    _missionByIdByProfile[vars.profileId][missionId].state = DataTypes.State.failed;\\n\\n    emit Failed(\\n      sender,\\n      vars.profileId,\\n      missionId,\\n      _missionByIdByProfile[vars.profileId][missionId].challengeHash,\\n      vars.reason,\\n      block.timestamp\\n    );\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function startWithSig(DataTypes.StartWithSigData calldata vars, address owner)\\n    external\\n    override\\n    returns (uint256)\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    Logic.validationStart(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            START_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            keccak256(bytes(vars.slug)),\\n            keccak256(bytes(vars.contentURI)),\\n            vars.minutesToExpire,\\n            vars.creator,\\n            vars.verifier,\\n            sigNonces[owner],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      owner,\\n      vars.signature,\\n      vars.deadline,\\n      vars.slug,\\n      _missionIdBySlugHash\\n    );\\n    ++sigNonces[owner];\\n    uint256 missionId = IPompHub(pompHub).getCountAndIncrement(vars.profileId);\\n    // todo fix royaltyRecipient & royaltyValue\\n    uint256 tokenId = IMissionNFT(missionNFT).safeMint(\\n      address(this),\\n      vars.contentURI,\\n      vars.creator,\\n      0\\n    );\\n    uint256 endtime = Logic.startMission(\\n      DataTypes.startMissionData(\\n        vars.profileId,\\n        tokenId,\\n        vars.slug,\\n        vars.minutesToExpire,\\n        vars.creator,\\n        vars.verifier,\\n        owner,\\n        missionId\\n      ),\\n      _missionByIdByProfile,\\n      _missionIdBySlugHash\\n    );\\n\\n    emit Started(vars.creator, vars.profileId, missionId, endtime, block.timestamp);\\n\\n    return tokenId;\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function verifyWithSig(DataTypes.VerifyWithSigData calldata vars, address sender)\\n    external\\n    override\\n  {\\n    require(hasRole(HUB_ROLE, msg.sender), 'NotHub');\\n    bytes32 hash = Logic.validationVerify(\\n      _hashTypedDataV4(\\n        keccak256(\\n          abi.encode(\\n            VERIFY_WITH_SIG_TYPEHASH,\\n            vars.profileId,\\n            keccak256(bytes(vars.challenge)),\\n            sigNonces[sender],\\n            vars.deadline\\n          )\\n        )\\n      ),\\n      sender,\\n      vars.signature,\\n      vars.deadline,\\n      vars.challenge\\n    );\\n    uint256 missionId = Logic.getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n    Logic.canVerifyOrFail(vars.profileId, missionId, sender, _missionByIdByProfile);\\n    ++sigNonces[sender];\\n    IERC721(missionNFT).safeTransferFrom(\\n      address(this),\\n      _missionByIdByProfile[vars.profileId][missionId].owner,\\n      _missionByIdByProfile[vars.profileId][missionId].tokenId\\n    );\\n    _missionByIdByProfile[vars.profileId][missionId].state = DataTypes.State.verified;\\n\\n    emit Verified(\\n      sender,\\n      vars.profileId,\\n      missionId,\\n      _missionByIdByProfile[vars.profileId][missionId].challengeHash,\\n      block.timestamp\\n    );\\n  }\\n\\n  /// ***********************\\n  /// ***VIEW FUNCTIONS***\\n  /// ***********************\\n\\n  /// @inheritdoc IMissionModule\\n  function canBatchVerify(DataTypes.CanBatchVerifyData calldata vars, address sender)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    Logic.canBatchVerify(\\n      DataTypes.BatchVerifyData(vars.profileIds, vars.challenges, sender),\\n      _missionByIdByProfile,\\n      _missionIdByChallengeHash\\n    );\\n    return true;\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionByChallenge(string calldata challenge)\\n    external\\n    view\\n    override\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    return\\n      Logic.missionByChallenge(\\n        challenge,\\n        missionNFT,\\n        _missionByIdByProfile,\\n        _missionIdByChallengeHash,\\n        _profileIdByChallengeHash\\n      );\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionById(uint256 profileId, uint256 missionId)\\n    external\\n    view\\n    override\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    return Logic.missionById(profileId, missionId, missionNFT, _missionByIdByProfile);\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionBySlug(uint256 profileId, string calldata slug)\\n    external\\n    view\\n    override\\n    returns (DataTypes.MissionStruct memory)\\n  {\\n    return _missionByIdByProfile[profileId][_missionIdBySlugHash[keccak256(bytes(slug))]];\\n  }\\n\\n  /// @inheritdoc IMissionModule\\n  function missionIdBySlug(string calldata slug) external view override returns (uint256) {\\n    return _missionIdBySlugHash[keccak256(bytes(slug))];\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(AccessControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xba603a4542cafb6c11288faca918ad75cd543c9bfd665f300607d4e45c0238d0\",\"license\":\"MIT\"},\"contracts/interfaces/IMissionModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport '../libraries/DataTypes.sol';\\n\\ninterface IMissionModule {\\n  function abortWithSig(DataTypes.AbortWithSigData calldata vars, address owner) external;\\n\\n  function batchVerifyWithSig(DataTypes.BatchVerifyWithSigData calldata vars, address sender)\\n    external;\\n\\n  function canBatchVerify(DataTypes.CanBatchVerifyData calldata vars, address sender)\\n    external\\n    view\\n    returns (bool);\\n\\n  function completeWithSig(DataTypes.CompleteWithSigData calldata vars, address owner) external;\\n\\n  function failWithSig(DataTypes.FailWithSigData calldata vars, address sender) external;\\n\\n  function missionByChallenge(string calldata challenge)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  function missionById(uint256 profileId, uint256 missionId)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  function missionBySlug(uint256 profileId, string calldata slug)\\n    external\\n    view\\n    returns (DataTypes.MissionStruct memory);\\n\\n  function missionIdBySlug(string calldata slug) external view returns (uint256);\\n\\n  function startWithSig(DataTypes.StartWithSigData calldata vars, address owner)\\n    external\\n    returns (uint256);\\n\\n  function sigNonces(address wallet) external view returns (uint256);\\n\\n  function verifyWithSig(DataTypes.VerifyWithSigData calldata vars, address sender) external;\\n}\\n\",\"keccak256\":\"0xd28a7a9907ccb52ba5a87a21268d7b0298818c18eefb193c132b16681a09a38c\",\"license\":\"MIT\"},\"contracts/interfaces/IMissionNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IMissionNFT {\\n  function safeMint(\\n    address to,\\n    string memory uri,\\n    address royaltyRecipient,\\n    uint96 royaltyValue\\n  ) external returns (uint256);\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function oneToManyTransfer(\\n    address from,\\n    address[] memory toAddresses,\\n    uint256[] memory tokenIds\\n  ) external;\\n}\\n\",\"keccak256\":\"0x172731a282a4210f7aa400887536583d23a34b8dda96827554f80f6a34db131f\",\"license\":\"MIT\"},\"contracts/interfaces/IPompHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\n/**\\n * @title Proof of Mission Protocol\\n * @author rtang03\\n *\\n * @notice This is the interface for the Pomp contract, the main entry point for the Pomp Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface IPompHub {\\n  /**\\n   * @notice Initializes the PompHub, setting the initial addresses\\n   *\\n   * @param _governor Governor address\\n   * @param _profileModule ProfileModule address\\n   * @param _missionModule MissionModule address\\n   */\\n  function initialize(\\n    address _governor,\\n    address _profileModule,\\n    address _missionModule\\n  ) external;\\n\\n  /**\\n   * @notice Abort a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A AbortWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function abortWithSig(DataTypes.AbortWithSigData calldata vars) external;\\n\\n  /**\\n   * @notice Batch verify missions via signature with the specified parameters.\\n   *\\n   * @param vars A BatchVerifyWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function batchVerifyWithSig(DataTypes.BatchVerifyWithSigData calldata vars) external;\\n\\n  /**\\n   * @notice validates if it can batch-verify for given profileIds and challenges\\n   *\\n   * @param vars A CanBatchVerifyData struct containing the regular parameters\\n   *\\n   */\\n  function canBatchVerify(DataTypes.CanBatchVerifyData calldata vars) external view returns (bool);\\n\\n  /**\\n   * @notice Check the eligiblity to claim profile.\\n   *\\n   * @param claimer Address of claimer.\\n   *\\n   * @param handle Check the handle fulfilling the format requirement.\\n   *\\n   * @param proof Merkle proof of the claimer.\\n   *\\n   * @return bool\\n   */\\n  function canClaim(\\n    address claimer,\\n    string calldata handle,\\n    bytes32[] calldata proof\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice check if wallet has already claim his profile\\n   *\\n   * @param wallet wallet address\\n   *\\n   * @return bool\\n   */\\n  function claimed(address wallet) external view returns (bool);\\n\\n  /**\\n   * @notice Complete a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A CompleteWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function completeWithSig(DataTypes.CompleteWithSigData calldata vars) external;\\n\\n  /**\\n   * @notice Creates a profile with the specified parameters. This\\n   * function must be called by a whitelisted profile creator.\\n   *\\n   * @param handle: The handle to set for the profile, must be unique and non-empty.\\n   *\\n   * @param proof: Merkle Tree proof of being whitelisted\\n   */\\n  function createProfile(string calldata handle, bytes32[] calldata proof)\\n    external\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns NEXT MissionCount\\n   *\\n   * @param profileId Profile identity\\n   *\\n   * @return uint256 next missionCount\\n   */\\n  function getCountAndIncrement(uint256 profileId) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the handle associated with a profile.\\n   *\\n   * @param profileId Profile identity.p\\n   *\\n   * @return string The handle associated with the profile.\\n   */\\n  function getHandle(uint256 profileId) external view returns (string memory);\\n\\n  /**\\n   * @notice Verify a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A VerifyWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function failWithSig(DataTypes.FailWithSigData calldata vars) external;\\n\\n  /**\\n   * @notice Query mission for given challenge\\n   *\\n   * @return MissionStruct Mission\\n   */\\n  function missionByChallenge(string calldata challenge)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  /**\\n   * @notice Query active merkle root hash of whitelisted profiles\\n   *\\n   * @return bytes32 merkle root hash\\n   */\\n  function merkleroot() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the Mission struct associated with a profile.\\n   *\\n   * @param profileId Profile identity.\\n   *\\n   * @param missionId The token ID of the mission.\\n   *\\n   * @return MissionStruct Mission\\n   */\\n  function missionById(uint256 profileId, uint256 missionId)\\n    external\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    );\\n\\n  /**\\n   * @notice Returns the Mission struct associated with a profile.\\n   *\\n   * @param profileId main profile identity.\\n   *\\n   * @param slug Mission slug.\\n   *\\n   * @return MissionStruct Mission.\\n   */\\n  function missionBySlug(uint256 profileId, string calldata slug)\\n    external\\n    view\\n    returns (DataTypes.MissionStruct memory);\\n\\n  /**\\n   * @notice Returns the Mission struct associated with a profile.\\n   *\\n   * @param slug Mission slug.\\n   *\\n   * @return MissionStruct Mission.\\n   */\\n  function missionIdBySlug(string calldata slug) external view returns (uint256);\\n\\n  function pause() external;\\n\\n  /**\\n   * @notice Returns the Profile struct associated with an address\\n   *\\n   * @param wallet Wallet holder address.\\n   *\\n   * @return ProfileId, ProfileStruct, Creator, Verifier\\n   */\\n  function profileByAddress(address wallet)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      DataTypes.ProfileStruct memory,\\n      bool,\\n      bool\\n    );\\n\\n  /**\\n   * @notice Returns the Profile struct associated with a profile.\\n   *\\n   * @param handle Profile handle.\\n   *\\n   * @return ProfileStruct The Profile struct associated with the profile.\\n   */\\n  function profileByHandle(string calldata handle)\\n    external\\n    view\\n    returns (DataTypes.ProfileStruct memory);\\n\\n  /**\\n   * @notice Returns the Profile struct associated with a profile.\\n   *\\n   * @param profileId The token ID of the profile to query the handle for.\\n   *\\n   * @return ProfileStruct The Profile struct associated with the profile.\\n   */\\n  function profileById(uint256 profileId) external view returns (DataTypes.ProfileStruct memory);\\n\\n  /**\\n   * @notice Returns the Profile identity associated with a profile.\\n   *\\n   * @param wallet Wallet holder address.\\n   *\\n   * @return uint256 An integer representing the profileId.\\n   */\\n  function profileIdByAddress(address wallet) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the Profile identity associated with a profile.\\n   *\\n   * @param handle Profile handle.\\n   *\\n   * @return uint256 An integer representing the profileId.\\n   */\\n  function profileIdByHandle(string calldata handle) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current profileId counter\\n   *\\n   * @return uint256 An integer representing the profileIdCounter\\n   */\\n  function profileIdCounter() external view returns (uint256);\\n\\n  /**\\n   * @notice SetProfileModule address\\n   *\\n   * @param _profileModule ProfileModule address\\n   *\\n   */\\n  function setProfileModule(address _profileModule) external;\\n\\n  /**\\n   * @notice Set Merkle root for whitelisted profiles.\\n   *\\n   * @param root A Merkle Tree Root for whitelisted profiles.\\n   *\\n   */\\n  function setMerklerootForProfiles(bytes32 root) external;\\n\\n  /**\\n   * @notice Set MissionModule address\\n   *\\n   * @param _missionModule MissionModule address\\n   *\\n   */\\n  function setMissionModule(address _missionModule) external;\\n\\n  /**\\n   * @notice Return signature nonce of a wallet\\n   *\\n   * @param wallet wallet address\\n   *\\n   * @return uint256 signature nonce\\n   */\\n  function sigNonces(address wallet) external view returns (uint256);\\n\\n  /**\\n   * @notice Start a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A StartWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   * @return uint256 An integer representing the missionId.\\n   */\\n  function startWithSig(DataTypes.StartWithSigData calldata vars) external returns (uint256);\\n\\n  function unpause() external;\\n\\n  /**\\n   * @notice Verify a mission for given profile via signature with the specified parameters.\\n   *\\n   * @param vars A VerifyWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n   *\\n   */\\n  function verifyWithSig(DataTypes.VerifyWithSigData calldata vars) external;\\n}\\n\",\"keccak256\":\"0x96d5bfb53001ea531ce2fd46b2a266250139c8246960d638ad8b6161352e2a1f\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title DataTypes\\n * @author Pomp Protocol\\n *\\n * @notice A standard library of data types used throughout the Pomp Protocol.\\n */\\nlibrary DataTypes {\\n  /**\\n   * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n   *\\n   * @param Unpaused The fully unpaused state.\\n   * @param Paused The fully paused state.\\n   */\\n  enum ProtocolState {\\n    Unpaused,\\n    Paused\\n  }\\n\\n  enum State {\\n    nftDeposited,\\n    aborted,\\n    completed,\\n    verified,\\n    failed\\n  }\\n\\n  /**\\n   * @notice Mission\\n   *\\n   * @param owner Address of mission creator\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param verifier Address of verifier\\n   * @param starttime Mission start time (in second)\\n   * @param endtime Mission expiry time (in second)\\n   * @param challengeHash Challenge hash\\n   * @param state Mission state\\n   */\\n  struct MissionStruct {\\n    address owner;\\n    uint256 profileId;\\n    uint256 tokenId;\\n    address verifier;\\n    uint256 starttime;\\n    uint256 endtime;\\n    bytes32 challengeHash;\\n    State state;\\n    address creator;\\n  }\\n\\n  /**\\n   * @notice Profile\\n   *\\n   * @param missionCount number of missions of profile started\\n   * @param handle Profile handle, max-32 lowercase alphanumeric chars\\n   * @param owner Address of profile owner\\n   */\\n  struct ProfileStruct {\\n    uint256 missionCount;\\n    string handle;\\n    address owner;\\n  }\\n\\n  /**\\n   * @notice Argument to abort mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct AbortWithSigData {\\n    uint256 profileId;\\n    uint256 missionId;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to complete mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param challenge Challenge issued by verifier. Usually obtained via out-of-band process\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct CompleteWithSigData {\\n    uint256 profileId;\\n    uint256 missionId;\\n    string challenge;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to complete mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param challenge Challenge previously issued by verifier\\n   * @param reason The reason to fail this mission\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct FailWithSigData {\\n    uint256 profileId;\\n    string challenge;\\n    uint256 reason;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to start mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param slug The Slug of the mission\\n   * @param contentURI The contentURI for missionNFT\\n   * @param minutesToExpire Number of minutes to expire\\n   * @param verifier Address of the verifier\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct StartWithSigData {\\n    uint256 profileId;\\n    string slug;\\n    string contentURI;\\n    uint256 minutesToExpire;\\n    address creator;\\n    address verifier;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to verify mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param challenge Challenge previously issued by verifier\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct VerifyWithSigData {\\n    uint256 profileId;\\n    string challenge;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  struct CanBatchVerifyData {\\n    uint256[] profileIds;\\n    string challenges;\\n  }\\n\\n  struct BatchVerifyWithSigData {\\n    uint256[] profileIds;\\n    string challenges;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  struct BatchVerifyData {\\n    uint256[] profileIds;\\n    string challenges;\\n    address sender;\\n  }\\n\\n  struct startMissionData {\\n    uint256 profileId;\\n    uint256 tokenId;\\n    string slug;\\n    uint256 minutesToExpire;\\n    address creator;\\n    address verifier;\\n    address owner;\\n    uint256 missionId;\\n  }\\n}\\n\",\"keccak256\":\"0xf533e719f9150331b2d34023c3a471c0843680b561cfcab12b6f9ff234b55a02\",\"license\":\"MIT\"},\"contracts/libraries/Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@khronus/time-cog/contracts/src/KhronusTimeCog.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport 'hardhat/console.sol';\\nimport './DataTypes.sol';\\n\\nlibrary Logic {\\n  uint8 internal constant MAX_HANDLE_LENGTH = 31;\\n\\n  error Claimed();\\n  error ContainsInvalidChars();\\n  error Expired();\\n  error InvalidLength();\\n  error HandleTaken();\\n  error ChallengeTaken();\\n  error NotFound();\\n  error NotMatched();\\n  error NotOwner();\\n  error NotVerifiable();\\n  error NotReady();\\n  error NotVerifier();\\n  error NotWhitelisted();\\n  error SecurityViolated();\\n  error SignatureExpired();\\n  error SignatureInvalid();\\n  error SlugTaken();\\n\\n  function isValidChallenges(DataTypes.BatchVerifyData calldata vars) public pure returns (bool) {\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n\\n    if (\\n      !((challengesBytesArray.length % 43) == 0 &&\\n        challengesBytesArray.length >= 43 &&\\n        uint256(challengesBytesArray.length / 43) == profileCount)\\n    ) revert InvalidLength();\\n    return true;\\n  }\\n\\n  function canBatchVerify(\\n    DataTypes.BatchVerifyData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view {\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n    isValidChallenges(vars);\\n    bytes memory tempChallengeBytes = new bytes(43);\\n    for (uint256 i = 0; i < profileCount; ++i) {\\n      for (uint256 j = 0; j < 43; ++j) {\\n        tempChallengeBytes[j] = challengesBytesArray[j + (i * 43)];\\n      }\\n      bytes32 hash = keccak256(tempChallengeBytes);\\n      uint256 missionId = getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n      uint256 profileId = vars.profileIds[i];\\n\\n      if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n      if (_missionByIdByProfile[profileId][missionId].verifier != vars.sender) revert NotVerifier();\\n      if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n        revert NotVerifiable();\\n      if (_missionByIdByProfile[profileId][missionId].challengeHash != hash) revert NotMatched();\\n    }\\n  }\\n\\n  function batchVerify(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    DataTypes.BatchVerifyData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory,\\n      uint256[] memory,\\n      uint256[] memory\\n    )\\n  {\\n    validateSignature(digest, owner, signature, deadline);\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n    isValidChallenges(vars);\\n    uint256[] memory _missionIds = new uint256[](profileCount);\\n    address[] memory _owners = new address[](profileCount);\\n    uint256[] memory _tokenIds = new uint256[](profileCount);\\n    bytes memory tempChallengeBytes = new bytes(43);\\n    for (uint256 i = 0; i < profileCount; ++i) {\\n      for (uint256 j = 0; j < 43; ++j) {\\n        tempChallengeBytes[j] = challengesBytesArray[j + (i * 43)];\\n      }\\n      bytes32 hash = keccak256(tempChallengeBytes);\\n      uint256 missionId = getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n      uint256 profileId = vars.profileIds[i];\\n\\n      if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n      if (_missionByIdByProfile[profileId][missionId].verifier != vars.sender) revert NotVerifier();\\n      if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n        revert NotVerifiable();\\n      if (_missionByIdByProfile[profileId][missionId].challengeHash != hash) revert NotMatched();\\n\\n      _owners[i] = _missionByIdByProfile[profileId][missionId].owner;\\n      _tokenIds[i] = _missionByIdByProfile[profileId][missionId].tokenId;\\n      _missionIds[i] = missionId;\\n    }\\n    return (_owners, _tokenIds, _missionIds);\\n  }\\n\\n  function canAbortOrComplete(\\n    uint256 profileId,\\n    uint256 missionId,\\n    bool check, // check Expiry boolean\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) public view {\\n    if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n    if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.nftDeposited)\\n      revert NotReady();\\n    if (check == true && _missionByIdByProfile[profileId][missionId].endtime < block.timestamp)\\n      revert Expired();\\n  }\\n\\n  function canClaimProfileWithRevert(\\n    mapping(address => bool) storage claimed,\\n    address owner,\\n    bytes32[] calldata proof,\\n    string calldata handle,\\n    bytes32 merkleroot,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash\\n  ) public view {\\n    if (claimed[owner]) revert Claimed();\\n    if (!MerkleProof.verify(proof, merkleroot, keccak256(abi.encodePacked(owner))))\\n      revert NotWhitelisted();\\n    validateHandleOrSlug(handle);\\n    if (_profileIdByHandleHash[keccak256(bytes(handle))] != 0) revert HandleTaken();\\n  }\\n\\n  function canClaimProfile(\\n    mapping(address => bool) storage claimed,\\n    address claimer,\\n    bytes32[] calldata proof,\\n    string calldata handle,\\n    bytes32 merkleroot,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash\\n  ) public view returns (bool) {\\n    return\\n      !claimed[claimer] &&\\n      (MerkleProof.verify(proof, merkleroot, keccak256(abi.encodePacked(claimer)))) &&\\n      (_profileIdByHandleHash[keccak256(bytes(handle))] == 0);\\n  }\\n\\n  function canVerifyOrFail(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address sender,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) public view {\\n    if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n    if (_missionByIdByProfile[profileId][missionId].verifier != sender) revert NotVerifier();\\n    if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n      revert NotVerifiable();\\n  }\\n\\n  function completeMission(\\n    uint256 profileId,\\n    uint256 missionId,\\n    string calldata challenge,\\n    address owner,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash,\\n    mapping(bytes32 => uint256) storage _profileIdByChallengeHash,\\n    mapping(address => uint256) storage sigNonces\\n  ) public returns (address, bytes32) {\\n    // check right length\\n    if (bytes(challenge).length != 43) revert InvalidLength();\\n    canAbortOrComplete(profileId, missionId, true, _missionByIdByProfile);\\n    isChallengeAvailable(challenge, _missionIdByChallengeHash);\\n\\n    sigNonces[owner]++;\\n\\n    bytes32 challengeHash = keccak256(bytes(challenge));\\n    _missionByIdByProfile[profileId][missionId].state = DataTypes.State.completed;\\n    _missionByIdByProfile[profileId][missionId].challengeHash = challengeHash;\\n    _missionIdByChallengeHash[challengeHash] = missionId;\\n    _profileIdByChallengeHash[challengeHash] = profileId;\\n\\n    return (_missionByIdByProfile[profileId][missionId].verifier, challengeHash);\\n  }\\n\\n  function createProfile(\\n    mapping(address => bool) storage claimed,\\n    address owner,\\n    string calldata handle,\\n    uint256 profileId,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash,\\n    mapping(uint256 => DataTypes.ProfileStruct) storage _profileById,\\n    mapping(address => uint256) storage _profileIdByAddress\\n  ) external {\\n    _profileIdByHandleHash[keccak256(bytes(handle))] = profileId;\\n    _profileById[profileId].handle = handle;\\n    _profileById[profileId].owner = owner;\\n    _profileIdByAddress[owner] = profileId;\\n\\n    claimed[owner] = true;\\n  }\\n\\n  function getMissionIdByChallengeHash(\\n    bytes32 hash,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view returns (uint256) {\\n    uint256 missionId = _missionIdByChallengeHash[hash];\\n    if (missionId == 0) revert NotFound();\\n    return missionId;\\n  }\\n\\n  function getTokenUri(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) internal view returns (string memory) {\\n    string memory uri = (_missionByIdByProfile[profileId][missionId].state ==\\n      DataTypes.State.aborted ||\\n      _missionByIdByProfile[profileId][missionId].state == DataTypes.State.failed ||\\n      _missionByIdByProfile[profileId][missionId].tokenId == 0)\\n      ? ''\\n      : IERC721Metadata(missionNFT).tokenURI(_missionByIdByProfile[profileId][missionId].tokenId);\\n    return uri;\\n  }\\n\\n  function isChallengeAvailable(\\n    string calldata challenge,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view {\\n    if (_missionIdByChallengeHash[keccak256(bytes(challenge))] != 0) revert ChallengeTaken();\\n  }\\n\\n  function isSlugAvailable(\\n    string calldata slug,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) internal view {\\n    if (_missionIdBySlugHash[keccak256(bytes(slug))] != 0) revert SlugTaken();\\n  }\\n\\n  function missionByChallenge(\\n    string calldata challenge,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash,\\n    mapping(bytes32 => uint256) storage _profileIdByChallengeHash\\n  )\\n    public\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    bytes32 challengeHash = keccak256(bytes(challenge));\\n    uint256 profileId = _profileIdByChallengeHash[challengeHash];\\n    uint256 missionId = _missionIdByChallengeHash[challengeHash];\\n    string memory uri = getTokenUri(profileId, missionId, missionNFT, _missionByIdByProfile);\\n    return (_missionByIdByProfile[profileId][missionId], missionId, uri);\\n  }\\n\\n  function missionById(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  )\\n    public\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    string memory uri = getTokenUri(profileId, missionId, missionNFT, _missionByIdByProfile);\\n    return (_missionByIdByProfile[profileId][missionId], missionId, uri);\\n  }\\n\\n  function startMission(\\n    DataTypes.startMissionData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) public returns (uint256) {\\n    _missionIdBySlugHash[keccak256(bytes(vars.slug))] = vars.missionId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].owner = vars.owner;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].profileId = vars.profileId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].tokenId = vars.tokenId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].creator = vars.creator;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].verifier = vars.verifier;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].starttime = KhronusTimeCog.addMinutes(\\n      block.timestamp,\\n      0\\n    );\\n    uint256 endtime = KhronusTimeCog.addMinutes(block.timestamp, vars.minutesToExpire);\\n    _missionByIdByProfile[vars.profileId][vars.missionId].endtime = endtime;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].state = DataTypes.State.nftDeposited;\\n\\n    return endtime;\\n  }\\n\\n  function validateHandleOrSlug(string calldata handle) internal pure {\\n    bytes memory byteHandle = bytes(handle);\\n    if (byteHandle.length == 0 || byteHandle.length > MAX_HANDLE_LENGTH) revert InvalidLength();\\n\\n    uint256 byteHandleLength = byteHandle.length;\\n    for (uint256 i = 0; i < byteHandleLength; ) {\\n      if (\\n        (byteHandle[i] < '0' ||\\n          byteHandle[i] > 'z' ||\\n          (byteHandle[i] > '9' && byteHandle[i] < 'a')) &&\\n        byteHandle[i] != '.' &&\\n        byteHandle[i] != '-' &&\\n        byteHandle[i] != '_'\\n      ) revert ContainsInvalidChars();\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function validateSignature(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline\\n  ) public view returns (bool) {\\n    if (deadline < block.timestamp) revert SignatureExpired();\\n    address recoveredAddress = ECDSA.recover(digest, signature);\\n    if (\\n      owner != recoveredAddress || !SignatureChecker.isValidSignatureNow(owner, digest, signature)\\n    ) revert SignatureInvalid();\\n    return true;\\n  }\\n\\n  function validationStart(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    string calldata slug,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) public view {\\n    validateSignature(digest, owner, signature, deadline);\\n    validateHandleOrSlug(slug);\\n    isSlugAvailable(slug, _missionIdBySlugHash);\\n  }\\n\\n  function validationVerify(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    string calldata challenge\\n  ) public view returns (bytes32) {\\n    // check right length\\n    bytes memory challengeBytesArray = bytes(challenge);\\n    if (challengeBytesArray.length != 43) revert InvalidLength();\\n    bytes32 hash = keccak256(challengeBytesArray);\\n    validateSignature(digest, owner, signature, deadline);\\n    return hash;\\n  }\\n}\\n\",\"keccak256\":\"0x376ac6427902daaaa050a0a79bfeecd4240f3323b1c221af29ef5573a7b75785\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b506040516200580838038062005808833981810160405281019062000038919062000418565b6040518060400160405280600481526020017f506f6d70000000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a081815250506200010d8184846200020f60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050506200016b6000801b336200024b60201b60201c565b6200019d7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d5836200024b60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1681525050505062000503565b600083838346306040516020016200022c959493929190620004a6565b6040516020818303038152906040528051906020012090509392505050565b6200025d82826200033c60201b60201c565b6200033857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002dd620003a660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003e082620003b3565b9050919050565b620003f281620003d3565b8114620003fe57600080fd5b50565b6000815190506200041281620003e7565b92915050565b60008060408385031215620004325762000431620003ae565b5b6000620004428582860162000401565b9250506020620004558582860162000401565b9150509250929050565b6000819050919050565b62000474816200045f565b82525050565b6000819050919050565b6200048f816200047a565b82525050565b620004a081620003d3565b82525050565b600060a082019050620004bd600083018862000469565b620004cc602083018762000469565b620004db604083018662000469565b620004ea606083018562000484565b620004f9608083018462000495565b9695505050505050565b60805160a05160c05160e05161010051610120516101405161016051615267620005a160003960008181610b8201528181611014015281816110af015281816113e0015281816118a201528181611d93015281816122c901526125bf015260008181611f940152612225015260006129db01526000612a1d015260006129fc0152600061293101526000612987015260006129b001526152676000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063a217fddf116100c3578063cb3c0a1e1161007c578063cb3c0a1e146103d6578063d547741f146103f2578063e5d9ce0b1461040e578063ed23bab91461042c578063f990ccd71461045c578063f9ea0daa1461048c5761014d565b8063a217fddf14610300578063a61e4f761461031e578063b51de50e14610350578063c171e3891461036e578063c263beaa1461038a578063c483dc3e146103a65761014d565b80632a1d5955116101155780632a1d59551461022e5780632f2ff15d1461024a57806336568abe1461026657806347119c5f1461028257806391d14854146102b257806399dac981146102e25761014d565b806301ffc9a7146101525780630c426988146101825780630dd0a9961461019e578063150b7a02146101ce578063248a9ca3146101fe575b600080fd5b61016c60048036038101906101679190612e9c565b6104be565b6040516101799190612ee4565b60405180910390f35b61019c60048036038101906101979190612f81565b6104d0565b005b6101b860048036038101906101b39190612ffc565b61079c565b6040516101c59190612ee4565b60405180910390f35b6101e860048036038101906101e391906131d4565b6108e6565b6040516101f59190613266565b60405180910390f35b610218600480360381019061021391906132b7565b6108fa565b60405161022591906132f3565b60405180910390f35b6102486004803603810190610243919061332d565b610919565b005b610264600480360381019061025f9190613389565b610cd7565b005b610280600480360381019061027b9190613389565b610cf8565b005b61029c60048036038101906102979190613429565b610d7b565b6040516102a991906135e4565b60405180910390f35b6102cc60048036038101906102c79190613389565b610f55565b6040516102d99190612ee4565b60405180910390f35b6102ea610fbf565b6040516102f791906132f3565b60405180910390f35b610308610fe3565b60405161031591906132f3565b60405180910390f35b61033860048036038101906103339190613600565b610fea565b604051610347939291906136db565b60405180910390f35b6103586110ad565b604051610365919061372b565b60405180910390f35b61038860048036038101906103839190613765565b6110d1565b005b6103a4600480360381019061039f91906137e0565b611575565b005b6103c060048036038101906103bb9190613600565b611a45565b6040516103cd919061383c565b60405180910390f35b6103f060048036038101906103eb9190613876565b611a7a565b005b61040c60048036038101906104079190613389565b611f71565b005b610416611f92565b604051610423919061372b565b60405180910390f35b610446600480360381019061044191906138f2565b611fb6565b604051610453919061383c565b60405180910390f35b6104766004803603810190610471919061394e565b61257d565b604051610483919061383c565b60405180910390f35b6104a660048036038101906104a1919061397b565b612595565b6040516104b5939291906136db565b60405180910390f35b60006104c982612652565b9050919050565b6104fa7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090613a07565b60405180910390fd5b73AB44eA3d6fcdc99400620fbD30949A302361681B63a3cdda1361061c7fd4f619864f63edbc545c29cb83475e9806d540c2177352618fabef4fcac34e14856000013586602001358780604001906105919190613a36565b60405161059f929190613ac9565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896080013560405160200161060196959493929190613ae2565b604051602081830303815290604052805190602001206126cc565b8385806060019061062d9190613b43565b87608001356040518663ffffffff1660e01b8152600401610652959493929190613c11565b602060405180830381865af415801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190613c8b565b5060008073AB44eA3d6fcdc99400620fbD30949A302361681B63b032ea0c856000013586602001358780604001906106cb9190613a36565b8860056003600460016040518a63ffffffff1660e01b81526004016106f899989796959493929190613d0b565b6040805180830381865af4158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190613dbc565b91509150836020013584600001358373ffffffffffffffffffffffffffffffffffffffff167fcca46c76156e4bf43e5edc1745b6c45eac7cfc0fda52475fa0f81cdcb42a5c62844260405161078e929190613dfc565b60405180910390a450505050565b600073AB44eA3d6fcdc99400620fbD30949A302361681B63952c277860405180606001604052808680600001906107d39190613e25565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018680602001906108289190613a36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018573ffffffffffffffffffffffffffffffffffffffff16815250600560036040518463ffffffff1660e01b81526004016108ac93929190613ff6565b60006040518083038186803b1580156108c457600080fd5b505af41580156108d8573d6000803e3d6000fd5b505050506001905092915050565b600063150b7a0260e01b9050949350505050565b6000806000838152602001908152602001600020600101549050919050565b6109437f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613a07565b60405180910390fd5b73AB44eA3d6fcdc99400620fbD30949A302361681B63a3cdda13610a3e7f76193c8d609e139a018adf57bae0c3c4c7a2d0eb05701223b06bd8c01adc48c885600001358660200135600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548860600135604051602001610a23959493929190614034565b604051602081830303815290604052805190602001206126cc565b83858060400190610a4f9190613b43565b87606001356040518663ffffffff1660e01b8152600401610a74959493929190613c11565b602060405180830381865af4158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab59190613c8b565b5073AB44eA3d6fcdc99400620fbD30949A302361681B63ae4bd6d083600001358460200135600060056040518563ffffffff1660e01b8152600401610afd9493929190614096565b60006040518083038186803b158015610b1557600080fd5b505af4158015610b29573d6000803e3d6000fd5b50505050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154610b799061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c686005600085600001358152602001908152602001600020600085602001358152602001908152602001600020600201546040518263ffffffff1660e01b8152600401610c08919061383c565b600060405180830381600087803b158015610c2257600080fd5b505af1158015610c36573d6000803e3d6000fd5b505050506001600560008460000135815260200190815260200160002060008460200135815260200190815260200160002060070160006101000a81548160ff02191690836004811115610c8d57610c8c6134b6565b5b0217905550816020013582600001357fff3596231ab8e5bb37a9baf7f9355110d118c17f0c60731ec93eb199d37f745742604051610ccb919061383c565b60405180910390a35050565b610ce0826108fa565b610ce9816126e6565b610cf383836126fa565b505050565b610d006127da565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d64906141c4565b60405180910390fd5b610d7782826127e2565b5050565b610d83612d8d565b600560008581526020019081526020016000206000600260008686604051610dac929190613ac9565b60405180910390208152602001908152602001600020548152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff166004811115610ee057610edf6134b6565b5b6004811115610ef257610ef16134b6565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090509392505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d581565b6000801b81565b610ff2612d8d565b6000606073AB44eA3d6fcdc99400620fbD30949A302361681B63b4d61add86867f00000000000000000000000000000000000000000000000000000000000000006005600360046040518763ffffffff1660e01b815260040161105a969594939291906141e4565b600060405180830381865af4158015611077573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110a09190614400565b9250925092509250925092565b7f000000000000000000000000000000000000000000000000000000000000000081565b6110fb7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b61113a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113190613a07565b60405180910390fd5b600082806020019061114c9190613a36565b60405161115a929190613ac9565b6040518091039020905073AB44eA3d6fcdc99400620fbD30949A302361681B63a3cdda136112227f9cc3774350162d9de873401b80ebde33ff0f4f4a6bc7ee58dda6ef202b2d860f8660000135858860400135600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a6080013560405160200161120796959493929190614472565b604051602081830303815290604052805190602001206126cc565b848680606001906112339190613b43565b88608001356040518663ffffffff1660e01b8152600401611258959493929190613c11565b602060405180830381865af4158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190613c8b565b50600073AB44eA3d6fcdc99400620fbD30949A302361681B63818a024c8360036040518363ffffffff1660e01b81526004016112d69291906144d3565b602060405180830381865af41580156112f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131791906144fc565b905073AB44eA3d6fcdc99400620fbD30949A302361681B63735d8b2a8560000135838660056040518563ffffffff1660e01b815260040161135b9493929190614529565b60006040518083038186803b15801561137357600080fd5b505af4158015611387573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546113d79061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c6860056000876000013581526020019081526020016000206000848152602001908152602001600020600201546040518263ffffffff1660e01b8152600401611462919061383c565b600060405180830381600087803b15801561147c57600080fd5b505af1158015611490573d6000803e3d6000fd5b5050505060046005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff021916908360048111156114e3576114e26134b6565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167f707b8ad08e58bc5a2367c8c45625ddb87d54731363b778f5722d10a345254dec60056000896000013581526020019081526020016000206000868152602001908152602001600020600601548860400135426040516115679392919061456e565b60405180910390a450505050565b61159f7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b6115de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d590613a07565b60405180910390fd5b600080600073AB44eA3d6fcdc99400620fbD30949A302361681B63d8a627106116f27f4ec37a5398d88f8f6568620d918107772e8b3aa8ee69e4329a3daeeb0a6a35728880600001906116319190613e25565b60405160200161164292919061461a565b604051602081830303815290604052805190602001208980602001906116689190613a36565b604051611676929190613ac9565b6040518091039020600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b606001356040516020016116d7959493929190614633565b604051602081830303815290604052805190602001206126cc565b868880604001906117039190613b43565b8a6060013560405180606001604052808d80600001906117239190613e25565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018d80602001906117789190613a36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018c73ffffffffffffffffffffffffffffffffffffffff16815250600560036040518963ffffffff1660e01b8152600401611801989796959493929190614686565b600060405180830381865af415801561181e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611847919061488b565b925092509250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546118999061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c182178e3085856040518463ffffffff1660e01b81526004016118fd93929190614a68565b600060405180830381600087803b15801561191757600080fd5b505af115801561192b573d6000803e3d6000fd5b5050505060005b8580600001906119429190613e25565b90508110156119ed576003600560008880600001906119619190613e25565b8581811061197257611971614aad565b5b905060200201358152602001908152602001600020600084848151811061199c5761199b614aad565b5b6020026020010151815260200190815260200160002060070160006101000a81548160ff021916908360048111156119d7576119d66134b6565b5b0217905550806119e69061410a565b9050611932565b5082518473ffffffffffffffffffffffffffffffffffffffff167f4f1c4c01ed0bb6c3c7eab533380dc1f5a1688f9dca14f664f51a8052002a882942604051611a36919061383c565b60405180910390a35050505050565b6000600260008484604051611a5b929190613ac9565b6040518091039020815260200190815260200160002054905092915050565b611aa47f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada90613a07565b60405180910390fd5b600073AB44eA3d6fcdc99400620fbD30949A302361681B637da7cda0611bc27fa40842dfb38adb5c9b877f026d498df2a82043c9a0f6e3f83bb60ac349e14b498660000135878060200190611b389190613a36565b604051611b46929190613ac9565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548960600135604051602001611ba7959493929190614adc565b604051602081830303815290604052805190602001206126cc565b84868060400190611bd39190613b43565b8860600135898060200190611be89190613a36565b6040518863ffffffff1660e01b8152600401611c0a9796959493929190614b2f565b602060405180830381865af4158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190614b94565b9050600073AB44eA3d6fcdc99400620fbD30949A302361681B63818a024c8360036040518363ffffffff1660e01b8152600401611c899291906144d3565b602060405180830381865af4158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca91906144fc565b905073AB44eA3d6fcdc99400620fbD30949A302361681B63735d8b2a8560000135838660056040518563ffffffff1660e01b8152600401611d0e9493929190614529565b60006040518083038186803b158015611d2657600080fd5b505af4158015611d3a573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611d8a9061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e306005600088600001358152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056000896000013581526020019081526020016000206000868152602001908152602001600020600201546040518463ffffffff1660e01b8152600401611e6493929190614bc1565b600060405180830381600087803b158015611e7e57600080fd5b505af1158015611e92573d6000803e3d6000fd5b5050505060036005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff02191690836004811115611ee557611ee46134b6565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167fd9cc7312aeed0c2fe657f2d0972f6fde1b32ff59c7abcf319942e84f507e738e600560008960000135815260200190815260200160002060008681526020019081526020016000206006015442604051611f63929190613dfc565b60405180910390a450505050565b611f7a826108fa565b611f83816126e6565b611f8d83836127e2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611fe27f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b612021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201890613a07565b60405180910390fd5b73AB44eA3d6fcdc99400620fbD30949A302361681B634dd689186121537f29be98e70cea08d618dc7e253dea019af07adea87df664c2c3c55cb783cfd3bb86600001358780602001906120749190613a36565b604051612082929190613ac9565b604051809103902088806040019061209a9190613a36565b6040516120a8929190613ac9565b604051809103902089606001358a60800160208101906120c8919061394e565b8b60a00160208101906120db919061394e565b600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548d60e0013560405160200161213899989796959493929190614bf8565b604051602081830303815290604052805190602001206126cc565b84868060c001906121649190613b43565b8860e001358980602001906121799190613a36565b60026040518963ffffffff1660e01b815260040161219e989796959493929190614c85565b60006040518083038186803b1580156121b657600080fd5b505af41580156121ca573d6000803e3d6000fd5b50505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815461221a9061410a565b9190508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166316cd4c3a85600001356040518263ffffffff1660e01b8152600401612280919061383c565b6020604051808303816000875af115801561229f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c391906144fc565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635ff97ebf308780604001906123149190613a36565b896080016020810190612327919061394e565b60006040518663ffffffff1660e01b8152600401612349959493929190614d82565b6020604051808303816000875af1158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238c91906144fc565b9050600073AB44eA3d6fcdc99400620fbD30949A302361681B6393e7ae64604051806101000160405280896000013581526020018581526020018980602001906123d69190613a36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018960600135815260200189608001602081019061243b919061394e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018960a0016020810190612469919061394e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200186815250600560026040518463ffffffff1660e01b81526004016124c693929190614e80565b602060405180830381865af41580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250791906144fc565b9050828660000135876080016020810190612522919061394e565b73ffffffffffffffffffffffffffffffffffffffff167f27bf9a004cd5f8eb61e6bd7610afc3aeeb4d046a608102a140f1508064d851658442604051612569929190614ebe565b60405180910390a481935050505092915050565b60016020528060005260406000206000915090505481565b61259d612d8d565b6000606073AB44eA3d6fcdc99400620fbD30949A302361681B633ba0f99186867f000000000000000000000000000000000000000000000000000000000000000060056040518563ffffffff1660e01b81526004016125ff9493929190614529565b600060405180830381865af415801561261c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126459190614400565b9250925092509250925092565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806126c557506126c4826128c3565b5b9050919050565b60006126df6126d961292d565b83612a47565b9050919050565b6126f7816126f26127da565b612a7a565b50565b6127048282610f55565b6127d657600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061277b6127da565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6127ec8282610f55565b156128bf57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506128646127da565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156129a957507f000000000000000000000000000000000000000000000000000000000000000046145b156129d6577f00000000000000000000000000000000000000000000000000000000000000009050612a44565b612a417f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b17565b90505b90565b60008282604051602001612a5c929190614f5f565b60405160208183030381529060405280519060200120905092915050565b612a848282610f55565b612b1357612aa98173ffffffffffffffffffffffffffffffffffffffff166014612b51565b612ab78360001c6020612b51565b604051602001612ac892919061505f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0a9190615099565b60405180910390fd5b5050565b60008383834630604051602001612b329594939291906150bb565b6040516020818303038152906040528051906020012090509392505050565b606060006002836002612b64919061510e565b612b6e9190615168565b67ffffffffffffffff811115612b8757612b866130a9565b5b6040519080825280601f01601f191660200182016040528015612bb95781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612bf157612bf0614aad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c5557612c54614aad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612c95919061510e565b612c9f9190615168565b90505b6001811115612d3f577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612ce157612ce0614aad565b5b1a60f81b828281518110612cf857612cf7614aad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612d389061519c565b9050612ca2565b5060008414612d83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7a90615211565b60405180910390fd5b8091505092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000801916815260200160006004811115612e0d57612e0c6134b6565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e7981612e44565b8114612e8457600080fd5b50565b600081359050612e9681612e70565b92915050565b600060208284031215612eb257612eb1612e3a565b5b6000612ec084828501612e87565b91505092915050565b60008115159050919050565b612ede81612ec9565b82525050565b6000602082019050612ef96000830184612ed5565b92915050565b600080fd5b600060a08284031215612f1a57612f19612eff565b5b81905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f4e82612f23565b9050919050565b612f5e81612f43565b8114612f6957600080fd5b50565b600081359050612f7b81612f55565b92915050565b60008060408385031215612f9857612f97612e3a565b5b600083013567ffffffffffffffff811115612fb657612fb5612e3f565b5b612fc285828601612f04565b9250506020612fd385828601612f6c565b9150509250929050565b600060408284031215612ff357612ff2612eff565b5b81905092915050565b6000806040838503121561301357613012612e3a565b5b600083013567ffffffffffffffff81111561303157613030612e3f565b5b61303d85828601612fdd565b925050602061304e85828601612f6c565b9150509250929050565b6000819050919050565b61306b81613058565b811461307657600080fd5b50565b60008135905061308881613062565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130e182613098565b810181811067ffffffffffffffff82111715613100576130ff6130a9565b5b80604052505050565b6000613113612e30565b905061311f82826130d8565b919050565b600067ffffffffffffffff82111561313f5761313e6130a9565b5b61314882613098565b9050602081019050919050565b82818337600083830152505050565b600061317761317284613124565b613109565b90508281526020810184848401111561319357613192613093565b5b61319e848285613155565b509392505050565b600082601f8301126131bb576131ba61308e565b5b81356131cb848260208601613164565b91505092915050565b600080600080608085870312156131ee576131ed612e3a565b5b60006131fc87828801612f6c565b945050602061320d87828801612f6c565b935050604061321e87828801613079565b925050606085013567ffffffffffffffff81111561323f5761323e612e3f565b5b61324b878288016131a6565b91505092959194509250565b61326081612e44565b82525050565b600060208201905061327b6000830184613257565b92915050565b6000819050919050565b61329481613281565b811461329f57600080fd5b50565b6000813590506132b18161328b565b92915050565b6000602082840312156132cd576132cc612e3a565b5b60006132db848285016132a2565b91505092915050565b6132ed81613281565b82525050565b600060208201905061330860008301846132e4565b92915050565b60006080828403121561332457613323612eff565b5b81905092915050565b6000806040838503121561334457613343612e3a565b5b600083013567ffffffffffffffff81111561336257613361612e3f565b5b61336e8582860161330e565b925050602061337f85828601612f6c565b9150509250929050565b600080604083850312156133a05761339f612e3a565b5b60006133ae858286016132a2565b92505060206133bf85828601612f6c565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126133e9576133e861308e565b5b8235905067ffffffffffffffff811115613406576134056133c9565b5b602083019150836001820283011115613422576134216133ce565b5b9250929050565b60008060006040848603121561344257613441612e3a565b5b600061345086828701613079565b935050602084013567ffffffffffffffff81111561347157613470612e3f565b5b61347d868287016133d3565b92509250509250925092565b61349281612f43565b82525050565b6134a181613058565b82525050565b6134b081613281565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106134f6576134f56134b6565b5b50565b6000819050613507826134e5565b919050565b6000613517826134f9565b9050919050565b6135278161350c565b82525050565b610120820160008201516135446000850182613489565b5060208201516135576020850182613498565b50604082015161356a6040850182613498565b50606082015161357d6060850182613489565b5060808201516135906080850182613498565b5060a08201516135a360a0850182613498565b5060c08201516135b660c08501826134a7565b5060e08201516135c960e085018261351e565b506101008201516135de610100850182613489565b50505050565b6000610120820190506135fa600083018461352d565b92915050565b6000806020838503121561361757613616612e3a565b5b600083013567ffffffffffffffff81111561363557613634612e3f565b5b613641858286016133d3565b92509250509250929050565b61365681613058565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561369657808201518184015260208101905061367b565b60008484015250505050565b60006136ad8261365c565b6136b78185613667565b93506136c7818560208601613678565b6136d081613098565b840191505092915050565b6000610160820190506136f1600083018661352d565b6136ff61012083018561364d565b81810361014083015261371281846136a2565b9050949350505050565b61372581612f43565b82525050565b6000602082019050613740600083018461371c565b92915050565b600060a0828403121561375c5761375b612eff565b5b81905092915050565b6000806040838503121561377c5761377b612e3a565b5b600083013567ffffffffffffffff81111561379a57613799612e3f565b5b6137a685828601613746565b92505060206137b785828601612f6c565b9150509250929050565b6000608082840312156137d7576137d6612eff565b5b81905092915050565b600080604083850312156137f7576137f6612e3a565b5b600083013567ffffffffffffffff81111561381557613814612e3f565b5b613821858286016137c1565b925050602061383285828601612f6c565b9150509250929050565b6000602082019050613851600083018461364d565b92915050565b60006080828403121561386d5761386c612eff565b5b81905092915050565b6000806040838503121561388d5761388c612e3a565b5b600083013567ffffffffffffffff8111156138ab576138aa612e3f565b5b6138b785828601613857565b92505060206138c885828601612f6c565b9150509250929050565b600061010082840312156138e9576138e8612eff565b5b81905092915050565b6000806040838503121561390957613908612e3a565b5b600083013567ffffffffffffffff81111561392757613926612e3f565b5b613933858286016138d2565b925050602061394485828601612f6c565b9150509250929050565b60006020828403121561396457613963612e3a565b5b600061397284828501612f6c565b91505092915050565b6000806040838503121561399257613991612e3a565b5b60006139a085828601613079565b92505060206139b185828601613079565b9150509250929050565b7f4e6f744875620000000000000000000000000000000000000000000000000000600082015250565b60006139f1600683613667565b91506139fc826139bb565b602082019050919050565b60006020820190508181036000830152613a20816139e4565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613a5357613a52613a27565b5b80840192508235915067ffffffffffffffff821115613a7557613a74613a2c565b5b602083019250600182023603831315613a9157613a90613a31565b5b509250929050565b600081905092915050565b6000613ab08385613a99565b9350613abd838584613155565b82840190509392505050565b6000613ad6828486613aa4565b91508190509392505050565b600060c082019050613af760008301896132e4565b613b04602083018861364d565b613b11604083018761364d565b613b1e60608301866132e4565b613b2b608083018561364d565b613b3860a083018461364d565b979650505050505050565b60008083356001602003843603038112613b6057613b5f613a27565b5b80840192508235915067ffffffffffffffff821115613b8257613b81613a2c565b5b602083019250600182023603831315613b9e57613b9d613a31565b5b509250929050565b613baf81613281565b82525050565b613bbe81612f43565b82525050565b600082825260208201905092915050565b6000613be18385613bc4565b9350613bee838584613155565b613bf783613098565b840190509392505050565b613c0b81613058565b82525050565b6000608082019050613c266000830188613ba6565b613c336020830187613bb5565b8181036040830152613c46818587613bd5565b9050613c556060830184613c02565b9695505050505050565b613c6881612ec9565b8114613c7357600080fd5b50565b600081519050613c8581613c5f565b92915050565b600060208284031215613ca157613ca0612e3a565b5b6000613caf84828501613c76565b91505092915050565b600082825260208201905092915050565b6000613cd58385613cb8565b9350613ce2838584613155565b613ceb83613098565b840190509392505050565b8082525050565b8082525050565b8082525050565b600061010082019050613d21600083018c613c02565b613d2e602083018b613c02565b8181036040830152613d4181898b613cc9565b9050613d506060830188613bb5565b613d5d6080830187613cf6565b613d6a60a0830186613cfd565b613d7760c0830185613cfd565b613d8460e0830184613d04565b9a9950505050505050505050565b600081519050613da181612f55565b92915050565b600081519050613db68161328b565b92915050565b60008060408385031215613dd357613dd2612e3a565b5b6000613de185828601613d92565b9250506020613df285828601613da7565b9150509250929050565b6000604082019050613e1160008301856132e4565b613e1e602083018461364d565b9392505050565b60008083356001602003843603038112613e4257613e41613a27565b5b80840192508235915067ffffffffffffffff821115613e6457613e63613a2c565b5b602083019250602082023603831315613e8057613e7f613a31565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ebd81613058565b82525050565b6000613ecf8383613eb4565b60208301905092915050565b6000602082019050919050565b6000613ef382613e88565b613efd8185613e93565b9350613f0883613ea4565b8060005b83811015613f39578151613f208882613ec3565b9750613f2b83613edb565b925050600181019050613f0c565b5085935050505092915050565b600082825260208201905092915050565b6000613f628261365c565b613f6c8185613f46565b9350613f7c818560208601613678565b613f8581613098565b840191505092915050565b613f9981612f43565b82525050565b60006060830160008301518482036000860152613fbc8282613ee8565b91505060208301518482036020860152613fd68282613f57565b9150506040830151613feb6040860182613f90565b508091505092915050565b600060608201905081810360008301526140108186613f9f565b905061401f6020830185613cf6565b61402c6040830184613cfd565b949350505050565b600060a08201905061404960008301886132e4565b614056602083018761364d565b614063604083018661364d565b614070606083018561364d565b61407d608083018461364d565b9695505050505050565b61409081612ec9565b82525050565b60006080820190506140ab6000830187613c02565b6140b86020830186613c02565b6140c56040830185614087565b6140d26060830184613cf6565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061411582613058565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614147576141466140db565b5b600182019050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006141ae602f83613667565b91506141b982614152565b604082019050919050565b600060208201905081810360008301526141dd816141a1565b9050919050565b600060a08201905081810360008301526141ff81888a613cc9565b905061420e6020830187613bb5565b61421b6040830186613cf6565b6142286060830185613cfd565b6142356080830184613cfd565b979650505050505050565b600080fd5b60008151905061425481613062565b92915050565b6005811061426757600080fd5b50565b6000815190506142798161425a565b92915050565b6000610120828403121561429657614295614240565b5b6142a1610120613109565b905060006142b184828501613d92565b60008301525060206142c584828501614245565b60208301525060406142d984828501614245565b60408301525060606142ed84828501613d92565b606083015250608061430184828501614245565b60808301525060a061431584828501614245565b60a08301525060c061432984828501613da7565b60c08301525060e061433d8482850161426a565b60e08301525061010061435284828501613d92565b6101008301525092915050565b600067ffffffffffffffff82111561437a576143796130a9565b5b61438382613098565b9050602081019050919050565b60006143a361439e8461435f565b613109565b9050828152602081018484840111156143bf576143be613093565b5b6143ca848285613678565b509392505050565b600082601f8301126143e7576143e661308e565b5b81516143f7848260208601614390565b91505092915050565b6000806000610160848603121561441a57614419612e3a565b5b60006144288682870161427f565b93505061012061443a86828701614245565b92505061014084015167ffffffffffffffff81111561445c5761445b612e3f565b5b614468868287016143d2565b9150509250925092565b600060c08201905061448760008301896132e4565b614494602083018861364d565b6144a160408301876132e4565b6144ae606083018661364d565b6144bb608083018561364d565b6144c860a083018461364d565b979650505050505050565b60006040820190506144e86000830185613ba6565b6144f56020830184613cfd565b9392505050565b60006020828403121561451257614511612e3a565b5b600061452084828501614245565b91505092915050565b600060808201905061453e6000830187613c02565b61454b6020830186613c02565b6145586040830185613bb5565b6145656060830184613cf6565b95945050505050565b600060608201905061458360008301866132e4565b614590602083018561364d565b61459d604083018461364d565b949350505050565b600081905092915050565b600080fd5b82818337505050565b60006145ca83856145a5565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156145fd576145fc6145b0565b5b60208302925061460e8385846145b5565b82840190509392505050565b60006146278284866145be565b91508190509392505050565b600060a08201905061464860008301886132e4565b61465560208301876132e4565b61466260408301866132e4565b61466f606083018561364d565b61467c608083018461364d565b9695505050505050565b600060e08201905061469b600083018b613ba6565b6146a8602083018a613bb5565b81810360408301526146bb81888a613bd5565b90506146ca6060830187613c02565b81810360808301526146dc8186613f9f565b90506146eb60a0830185613cf6565b6146f860c0830184613cfd565b9998505050505050505050565b600067ffffffffffffffff8211156147205761471f6130a9565b5b602082029050602081019050919050565b600061474461473f84614705565b613109565b90508083825260208201905060208402830185811115614767576147666133ce565b5b835b81811015614790578061477c8882613d92565b845260208401935050602081019050614769565b5050509392505050565b600082601f8301126147af576147ae61308e565b5b81516147bf848260208601614731565b91505092915050565b600067ffffffffffffffff8211156147e3576147e26130a9565b5b602082029050602081019050919050565b6000614807614802846147c8565b613109565b9050808382526020820190506020840283018581111561482a576148296133ce565b5b835b81811015614853578061483f8882614245565b84526020840193505060208101905061482c565b5050509392505050565b600082601f8301126148725761487161308e565b5b81516148828482602086016147f4565b91505092915050565b6000806000606084860312156148a4576148a3612e3a565b5b600084015167ffffffffffffffff8111156148c2576148c1612e3f565b5b6148ce8682870161479a565b935050602084015167ffffffffffffffff8111156148ef576148ee612e3f565b5b6148fb8682870161485d565b925050604084015167ffffffffffffffff81111561491c5761491b612e3f565b5b6149288682870161485d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061496a8383613489565b60208301905092915050565b6000602082019050919050565b600061498e82614932565b614998818561493d565b93506149a38361494e565b8060005b838110156149d45781516149bb888261495e565b97506149c683614976565b9250506001810190506149a7565b5085935050505092915050565b600082825260208201905092915050565b60006149fe8383613498565b60208301905092915050565b6000614a1582613e88565b614a1f81856149e1565b9350614a2a83613ea4565b8060005b83811015614a5b578151614a4288826149f2565b9750614a4d83613edb565b925050600181019050614a2e565b5085935050505092915050565b6000606082019050614a7d600083018661371c565b8181036020830152614a8f8185614983565b90508181036040830152614aa38184614a0a565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a082019050614af160008301886132e4565b614afe602083018761364d565b614b0b60408301866132e4565b614b18606083018561364d565b614b25608083018461364d565b9695505050505050565b600060a082019050614b44600083018a613ba6565b614b516020830189613bb5565b8181036040830152614b64818789613bd5565b9050614b736060830186613c02565b8181036080830152614b86818486613cc9565b905098975050505050505050565b600060208284031215614baa57614ba9612e3a565b5b6000614bb884828501613da7565b91505092915050565b6000606082019050614bd6600083018661371c565b614be3602083018561371c565b614bf0604083018461364d565b949350505050565b600061012082019050614c0e600083018c6132e4565b614c1b602083018b61364d565b614c28604083018a6132e4565b614c3560608301896132e4565b614c42608083018861364d565b614c4f60a083018761371c565b614c5c60c083018661371c565b614c6960e083018561364d565b614c7761010083018461364d565b9a9950505050505050505050565b600060c082019050614c9a600083018b613ba6565b614ca7602083018a613bb5565b8181036040830152614cba81888a613bd5565b9050614cc96060830187613c02565b8181036080830152614cdc818587613cc9565b9050614ceb60a0830184613cfd565b9998505050505050505050565b6000614d048385613667565b9350614d11838584613155565b614d1a83613098565b840190509392505050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614d6c614d67614d6284614d25565b614d47565b614d2f565b9050919050565b614d7c81614d51565b82525050565b6000608082019050614d97600083018861371c565b8181036020830152614daa818688614cf8565b9050614db9604083018561371c565b614dc66060830184614d73565b9695505050505050565b600061010083016000830151614de96000860182613eb4565b506020830151614dfc6020860182613eb4565b5060408301518482036040860152614e148282613f57565b9150506060830151614e296060860182613eb4565b506080830151614e3c6080860182613f90565b5060a0830151614e4f60a0860182613f90565b5060c0830151614e6260c0860182613f90565b5060e0830151614e7560e0860182613eb4565b508091505092915050565b60006060820190508181036000830152614e9a8186614dd0565b9050614ea96020830185613cf6565b614eb66040830184613cfd565b949350505050565b6000604082019050614ed3600083018561364d565b614ee0602083018461364d565b9392505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614f28600283614ee7565b9150614f3382614ef2565b600282019050919050565b6000819050919050565b614f59614f5482613281565b614f3e565b82525050565b6000614f6a82614f1b565b9150614f768285614f48565b602082019150614f868284614f48565b6020820191508190509392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000614fcc601783614ee7565b9150614fd782614f96565b601782019050919050565b6000614fed8261365c565b614ff78185614ee7565b9350615007818560208601613678565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615049601183614ee7565b915061505482615013565b601182019050919050565b600061506a82614fbf565b91506150768285614fe2565b91506150818261503c565b915061508d8284614fe2565b91508190509392505050565b600060208201905081810360008301526150b381846136a2565b905092915050565b600060a0820190506150d060008301886132e4565b6150dd60208301876132e4565b6150ea60408301866132e4565b6150f7606083018561364d565b615104608083018461371c565b9695505050505050565b600061511982613058565b915061512483613058565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561515d5761515c6140db565b5b828202905092915050565b600061517382613058565b915061517e83613058565b9250828201905080821115615196576151956140db565b5b92915050565b60006151a782613058565b9150600082036151ba576151b96140db565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006151fb602083613667565b9150615206826151c5565b602082019050919050565b6000602082019050818103600083015261522a816151ee565b905091905056fea26469706673582212204280e9492bccad0c33f8eb2d13c21f78eb66235be0cea6c9a8b627ce00aa088364736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063a217fddf116100c3578063cb3c0a1e1161007c578063cb3c0a1e146103d6578063d547741f146103f2578063e5d9ce0b1461040e578063ed23bab91461042c578063f990ccd71461045c578063f9ea0daa1461048c5761014d565b8063a217fddf14610300578063a61e4f761461031e578063b51de50e14610350578063c171e3891461036e578063c263beaa1461038a578063c483dc3e146103a65761014d565b80632a1d5955116101155780632a1d59551461022e5780632f2ff15d1461024a57806336568abe1461026657806347119c5f1461028257806391d14854146102b257806399dac981146102e25761014d565b806301ffc9a7146101525780630c426988146101825780630dd0a9961461019e578063150b7a02146101ce578063248a9ca3146101fe575b600080fd5b61016c60048036038101906101679190612e9c565b6104be565b6040516101799190612ee4565b60405180910390f35b61019c60048036038101906101979190612f81565b6104d0565b005b6101b860048036038101906101b39190612ffc565b61079c565b6040516101c59190612ee4565b60405180910390f35b6101e860048036038101906101e391906131d4565b6108e6565b6040516101f59190613266565b60405180910390f35b610218600480360381019061021391906132b7565b6108fa565b60405161022591906132f3565b60405180910390f35b6102486004803603810190610243919061332d565b610919565b005b610264600480360381019061025f9190613389565b610cd7565b005b610280600480360381019061027b9190613389565b610cf8565b005b61029c60048036038101906102979190613429565b610d7b565b6040516102a991906135e4565b60405180910390f35b6102cc60048036038101906102c79190613389565b610f55565b6040516102d99190612ee4565b60405180910390f35b6102ea610fbf565b6040516102f791906132f3565b60405180910390f35b610308610fe3565b60405161031591906132f3565b60405180910390f35b61033860048036038101906103339190613600565b610fea565b604051610347939291906136db565b60405180910390f35b6103586110ad565b604051610365919061372b565b60405180910390f35b61038860048036038101906103839190613765565b6110d1565b005b6103a4600480360381019061039f91906137e0565b611575565b005b6103c060048036038101906103bb9190613600565b611a45565b6040516103cd919061383c565b60405180910390f35b6103f060048036038101906103eb9190613876565b611a7a565b005b61040c60048036038101906104079190613389565b611f71565b005b610416611f92565b604051610423919061372b565b60405180910390f35b610446600480360381019061044191906138f2565b611fb6565b604051610453919061383c565b60405180910390f35b6104766004803603810190610471919061394e565b61257d565b604051610483919061383c565b60405180910390f35b6104a660048036038101906104a1919061397b565b612595565b6040516104b5939291906136db565b60405180910390f35b60006104c982612652565b9050919050565b6104fa7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090613a07565b60405180910390fd5b73__$9842325bb1826b70c2ef476a1c714a02a7$__63a3cdda1361061c7fd4f619864f63edbc545c29cb83475e9806d540c2177352618fabef4fcac34e14856000013586602001358780604001906105919190613a36565b60405161059f929190613ac9565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054896080013560405160200161060196959493929190613ae2565b604051602081830303815290604052805190602001206126cc565b8385806060019061062d9190613b43565b87608001356040518663ffffffff1660e01b8152600401610652959493929190613c11565b602060405180830381865af415801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190613c8b565b5060008073__$9842325bb1826b70c2ef476a1c714a02a7$__63b032ea0c856000013586602001358780604001906106cb9190613a36565b8860056003600460016040518a63ffffffff1660e01b81526004016106f899989796959493929190613d0b565b6040805180830381865af4158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190613dbc565b91509150836020013584600001358373ffffffffffffffffffffffffffffffffffffffff167fcca46c76156e4bf43e5edc1745b6c45eac7cfc0fda52475fa0f81cdcb42a5c62844260405161078e929190613dfc565b60405180910390a450505050565b600073__$9842325bb1826b70c2ef476a1c714a02a7$__63952c277860405180606001604052808680600001906107d39190613e25565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018680602001906108289190613a36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018573ffffffffffffffffffffffffffffffffffffffff16815250600560036040518463ffffffff1660e01b81526004016108ac93929190613ff6565b60006040518083038186803b1580156108c457600080fd5b505af41580156108d8573d6000803e3d6000fd5b505050506001905092915050565b600063150b7a0260e01b9050949350505050565b6000806000838152602001908152602001600020600101549050919050565b6109437f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613a07565b60405180910390fd5b73__$9842325bb1826b70c2ef476a1c714a02a7$__63a3cdda13610a3e7f76193c8d609e139a018adf57bae0c3c4c7a2d0eb05701223b06bd8c01adc48c885600001358660200135600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548860600135604051602001610a23959493929190614034565b604051602081830303815290604052805190602001206126cc565b83858060400190610a4f9190613b43565b87606001356040518663ffffffff1660e01b8152600401610a74959493929190613c11565b602060405180830381865af4158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab59190613c8b565b5073__$9842325bb1826b70c2ef476a1c714a02a7$__63ae4bd6d083600001358460200135600060056040518563ffffffff1660e01b8152600401610afd9493929190614096565b60006040518083038186803b158015610b1557600080fd5b505af4158015610b29573d6000803e3d6000fd5b50505050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154610b799061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c686005600085600001358152602001908152602001600020600085602001358152602001908152602001600020600201546040518263ffffffff1660e01b8152600401610c08919061383c565b600060405180830381600087803b158015610c2257600080fd5b505af1158015610c36573d6000803e3d6000fd5b505050506001600560008460000135815260200190815260200160002060008460200135815260200190815260200160002060070160006101000a81548160ff02191690836004811115610c8d57610c8c6134b6565b5b0217905550816020013582600001357fff3596231ab8e5bb37a9baf7f9355110d118c17f0c60731ec93eb199d37f745742604051610ccb919061383c565b60405180910390a35050565b610ce0826108fa565b610ce9816126e6565b610cf383836126fa565b505050565b610d006127da565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d64906141c4565b60405180910390fd5b610d7782826127e2565b5050565b610d83612d8d565b600560008581526020019081526020016000206000600260008686604051610dac929190613ac9565b60405180910390208152602001908152602001600020548152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff166004811115610ee057610edf6134b6565b5b6004811115610ef257610ef16134b6565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090509392505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d581565b6000801b81565b610ff2612d8d565b6000606073__$9842325bb1826b70c2ef476a1c714a02a7$__63b4d61add86867f00000000000000000000000000000000000000000000000000000000000000006005600360046040518763ffffffff1660e01b815260040161105a969594939291906141e4565b600060405180830381865af4158015611077573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110a09190614400565b9250925092509250925092565b7f000000000000000000000000000000000000000000000000000000000000000081565b6110fb7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b61113a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113190613a07565b60405180910390fd5b600082806020019061114c9190613a36565b60405161115a929190613ac9565b6040518091039020905073__$9842325bb1826b70c2ef476a1c714a02a7$__63a3cdda136112227f9cc3774350162d9de873401b80ebde33ff0f4f4a6bc7ee58dda6ef202b2d860f8660000135858860400135600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a6080013560405160200161120796959493929190614472565b604051602081830303815290604052805190602001206126cc565b848680606001906112339190613b43565b88608001356040518663ffffffff1660e01b8152600401611258959493929190613c11565b602060405180830381865af4158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190613c8b565b50600073__$9842325bb1826b70c2ef476a1c714a02a7$__63818a024c8360036040518363ffffffff1660e01b81526004016112d69291906144d3565b602060405180830381865af41580156112f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131791906144fc565b905073__$9842325bb1826b70c2ef476a1c714a02a7$__63735d8b2a8560000135838660056040518563ffffffff1660e01b815260040161135b9493929190614529565b60006040518083038186803b15801561137357600080fd5b505af4158015611387573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546113d79061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342966c6860056000876000013581526020019081526020016000206000848152602001908152602001600020600201546040518263ffffffff1660e01b8152600401611462919061383c565b600060405180830381600087803b15801561147c57600080fd5b505af1158015611490573d6000803e3d6000fd5b5050505060046005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff021916908360048111156114e3576114e26134b6565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167f707b8ad08e58bc5a2367c8c45625ddb87d54731363b778f5722d10a345254dec60056000896000013581526020019081526020016000206000868152602001908152602001600020600601548860400135426040516115679392919061456e565b60405180910390a450505050565b61159f7f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b6115de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d590613a07565b60405180910390fd5b600080600073__$9842325bb1826b70c2ef476a1c714a02a7$__63d8a627106116f27f4ec37a5398d88f8f6568620d918107772e8b3aa8ee69e4329a3daeeb0a6a35728880600001906116319190613e25565b60405160200161164292919061461a565b604051602081830303815290604052805190602001208980602001906116689190613a36565b604051611676929190613ac9565b6040518091039020600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b606001356040516020016116d7959493929190614633565b604051602081830303815290604052805190602001206126cc565b868880604001906117039190613b43565b8a6060013560405180606001604052808d80600001906117239190613e25565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018d80602001906117789190613a36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018c73ffffffffffffffffffffffffffffffffffffffff16815250600560036040518963ffffffff1660e01b8152600401611801989796959493929190614686565b600060405180830381865af415801561181e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611847919061488b565b925092509250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546118999061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c182178e3085856040518463ffffffff1660e01b81526004016118fd93929190614a68565b600060405180830381600087803b15801561191757600080fd5b505af115801561192b573d6000803e3d6000fd5b5050505060005b8580600001906119429190613e25565b90508110156119ed576003600560008880600001906119619190613e25565b8581811061197257611971614aad565b5b905060200201358152602001908152602001600020600084848151811061199c5761199b614aad565b5b6020026020010151815260200190815260200160002060070160006101000a81548160ff021916908360048111156119d7576119d66134b6565b5b0217905550806119e69061410a565b9050611932565b5082518473ffffffffffffffffffffffffffffffffffffffff167f4f1c4c01ed0bb6c3c7eab533380dc1f5a1688f9dca14f664f51a8052002a882942604051611a36919061383c565b60405180910390a35050505050565b6000600260008484604051611a5b929190613ac9565b6040518091039020815260200190815260200160002054905092915050565b611aa47f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada90613a07565b60405180910390fd5b600073__$9842325bb1826b70c2ef476a1c714a02a7$__637da7cda0611bc27fa40842dfb38adb5c9b877f026d498df2a82043c9a0f6e3f83bb60ac349e14b498660000135878060200190611b389190613a36565b604051611b46929190613ac9565b6040518091039020600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548960600135604051602001611ba7959493929190614adc565b604051602081830303815290604052805190602001206126cc565b84868060400190611bd39190613b43565b8860600135898060200190611be89190613a36565b6040518863ffffffff1660e01b8152600401611c0a9796959493929190614b2f565b602060405180830381865af4158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190614b94565b9050600073__$9842325bb1826b70c2ef476a1c714a02a7$__63818a024c8360036040518363ffffffff1660e01b8152600401611c899291906144d3565b602060405180830381865af4158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca91906144fc565b905073__$9842325bb1826b70c2ef476a1c714a02a7$__63735d8b2a8560000135838660056040518563ffffffff1660e01b8152600401611d0e9493929190614529565b60006040518083038186803b158015611d2657600080fd5b505af4158015611d3a573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154611d8a9061410a565b919050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e306005600088600001358152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056000896000013581526020019081526020016000206000868152602001908152602001600020600201546040518463ffffffff1660e01b8152600401611e6493929190614bc1565b600060405180830381600087803b158015611e7e57600080fd5b505af1158015611e92573d6000803e3d6000fd5b5050505060036005600086600001358152602001908152602001600020600083815260200190815260200160002060070160006101000a81548160ff02191690836004811115611ee557611ee46134b6565b5b02179055508084600001358473ffffffffffffffffffffffffffffffffffffffff167fd9cc7312aeed0c2fe657f2d0972f6fde1b32ff59c7abcf319942e84f507e738e600560008960000135815260200190815260200160002060008681526020019081526020016000206006015442604051611f63929190613dfc565b60405180910390a450505050565b611f7a826108fa565b611f83816126e6565b611f8d83836127e2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611fe27f4761169e40d0efb53bf684d47e54c803c1511483244b1a2fca6dbbd91b4508d533610f55565b612021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201890613a07565b60405180910390fd5b73__$9842325bb1826b70c2ef476a1c714a02a7$__634dd689186121537f29be98e70cea08d618dc7e253dea019af07adea87df664c2c3c55cb783cfd3bb86600001358780602001906120749190613a36565b604051612082929190613ac9565b604051809103902088806040019061209a9190613a36565b6040516120a8929190613ac9565b604051809103902089606001358a60800160208101906120c8919061394e565b8b60a00160208101906120db919061394e565b600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548d60e0013560405160200161213899989796959493929190614bf8565b604051602081830303815290604052805190602001206126cc565b84868060c001906121649190613b43565b8860e001358980602001906121799190613a36565b60026040518963ffffffff1660e01b815260040161219e989796959493929190614c85565b60006040518083038186803b1580156121b657600080fd5b505af41580156121ca573d6000803e3d6000fd5b50505050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815461221a9061410a565b9190508190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166316cd4c3a85600001356040518263ffffffff1660e01b8152600401612280919061383c565b6020604051808303816000875af115801561229f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c391906144fc565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635ff97ebf308780604001906123149190613a36565b896080016020810190612327919061394e565b60006040518663ffffffff1660e01b8152600401612349959493929190614d82565b6020604051808303816000875af1158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238c91906144fc565b9050600073__$9842325bb1826b70c2ef476a1c714a02a7$__6393e7ae64604051806101000160405280896000013581526020018581526020018980602001906123d69190613a36565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018960600135815260200189608001602081019061243b919061394e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018960a0016020810190612469919061394e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200186815250600560026040518463ffffffff1660e01b81526004016124c693929190614e80565b602060405180830381865af41580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250791906144fc565b9050828660000135876080016020810190612522919061394e565b73ffffffffffffffffffffffffffffffffffffffff167f27bf9a004cd5f8eb61e6bd7610afc3aeeb4d046a608102a140f1508064d851658442604051612569929190614ebe565b60405180910390a481935050505092915050565b60016020528060005260406000206000915090505481565b61259d612d8d565b6000606073__$9842325bb1826b70c2ef476a1c714a02a7$",
  "libraries": {
    "Logic": "0xAB44eA3d6fcdc99400620fbD30949A302361681B"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3435,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3430_storage)"
      },
      {
        "astId": 5848,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "sigNonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5852,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_missionIdBySlugHash",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5856,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_missionIdByChallengeHash",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5860,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_profileIdByChallengeHash",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5867,
        "contract": "contracts/MissionModule.sol:MissionModule",
        "label": "_missionByIdByProfile",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(MissionStruct)8480_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(State)8460": {
        "encoding": "inplace",
        "label": "enum DataTypes.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3430_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3430_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(MissionStruct)8480_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct DataTypes.MissionStruct))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MissionStruct)8480_storage)"
      },
      "t_mapping(t_uint256,t_struct(MissionStruct)8480_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.MissionStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(MissionStruct)8480_storage"
      },
      "t_struct(MissionStruct)8480_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.MissionStruct",
        "members": [
          {
            "astId": 8462,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8464,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "profileId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8466,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8468,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "verifier",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8470,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "starttime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8472,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "endtime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8474,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "challengeHash",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 8477,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(State)8460"
          },
          {
            "astId": 8479,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "creator",
            "offset": 1,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)3430_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3427,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3429,
            "contract": "contracts/MissionModule.sol:MissionModule",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}