{
  "address": "0xAB44eA3d6fcdc99400620fbD30949A302361681B",
  "abi": [
    {
      "inputs": [],
      "name": "ChallengeTaken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Claimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContainsInvalidChars",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HandleTaken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMatched",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVerifiable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVerifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SecurityViolated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlugTaken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "profileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "challenges",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.BatchVerifyData",
          "name": "vars",
          "type": "tuple"
        }
      ],
      "name": "isValidChallenges",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "challenge",
          "type": "string"
        }
      ],
      "name": "validationVerify",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xefc560bb1045450442b779981efcd239059d4e75061e1a64d746b5b19abcbe86",
  "receipt": {
    "to": null,
    "from": "0xc93b8F86c949962f3B6D01C4cdB5fC4663b1af0A",
    "contractAddress": "0xAB44eA3d6fcdc99400620fbD30949A302361681B",
    "transactionIndex": 14,
    "gasUsed": "4177707",
    "logsBloom": "0x
    "blockHash": "0x99f24ab7e9c94bd211312025fd3e6f7bf55ecfe032b7cf5d9391dcc6cdc8cb93",
    "transactionHash": "0xefc560bb1045450442b779981efcd239059d4e75061e1a64d746b5b19abcbe86",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 28822979,
        "transactionHash": "0xefc560bb1045450442b779981efcd239059d4e75061e1a64d746b5b19abcbe86",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c93b8f86c949962f3b6d01c4cdb5fc4663b1af0a",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000033f29bbc3c802b0000000000000000000000000000000000000000000000000c8f5bc401fddf75000000000000000000000000000000000000000000000851ea2ee114ba9ebd1a0000000000000000000000000000000000000000000000000c5b692845c15f4a000000000000000000000000000000000000000000000851ea62d3b076db3d45",
        "logIndex": 61,
        "blockHash": "0x99f24ab7e9c94bd211312025fd3e6f7bf55ecfe032b7cf5d9391dcc6cdc8cb93"
      }
    ],
    "blockNumber": 28822979,
    "cumulativeGasUsed": "6825505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "129a422f14c412eb193062598b0b323b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ChallengeTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContainsInvalidChars\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HandleTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMatched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVerifiable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVerifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SecurityViolated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlugTaken\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"challenges\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.BatchVerifyData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"isValidChallenges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"challenge\",\"type\":\"string\"}],\"name\":\"validationVerify\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Logic.sol\":\"Logic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@khronus/time-cog/contracts/src/KhronusTimeCog.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary KhronusTimeCog {\\n\\n     /* \\n    Reference Constants\\n    MONTH_NORMALIZER_MULTIPLIER = 153;\\n    MONTH_NORMALIZER_COMPLEMENT = 2;\\n    MONTH_NORMALIZER_DIVISOR = 5;\\n    NORMAL_YEAR_DAYS = 365;\\n    */\\n    \\n    //Used Constants\\n    uint constant DAYS_IN_ERA = 146097;\\n    uint constant DAYS_TO_UNIXEPOCH = 719468;\\n    uint constant LIMIT_YEAR = 2200;\\n    uint constant LIMET_DAY_TIMESTAMP = 84006;\\n    uint constant BASE_YEAR = 1740;\\n    //Main Library Functions\\n\\n    /*  \\n        Time format conversion functions \\n        The functions below transform date formats either from date format to day or seconds timestamps (unix format) or from timestamps to date format.\\n    */\\n\\n    //Get a timestamp in days since begining of unix epoch from a Civil Date to make it a Unix Timestamp multiply by number of seconds in day or solidity (1 days)\\n    function getDayTimestamp(uint _year, uint _month, uint _day) internal pure returns (uint _timestamp, uint _direction){\\n       require (isValidDate(_year, _month, _day), \\\"not a valid date as input as date object\\\");\\n       uint serializedDate = _serializeDate(_eralizeYear(_year, _month), _eralizeMonth(_month), _day);\\n       (serializedDate >= DAYS_TO_UNIXEPOCH) ? (_timestamp = serializedDate - DAYS_TO_UNIXEPOCH, _direction = 0):(_timestamp = DAYS_TO_UNIXEPOCH - serializedDate, _direction = 1);\\n    }\\n    \\n    //Get a Unix Timestamp from a full date-time object expressed as an array of 5 integers Year, Month, Day, Hour, Minute.\\n    function getDateObject(uint _timestamp, uint _direction) internal pure returns (uint[5] memory _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid day timestamp\\\");\\n        (_result[0],_result[1],_result[2]) = _deserializeDate(_timestamp/1 days, _direction);\\n        _result[3] = (_timestamp % 1 days) / 1 hours;\\n        _result[4] = (_timestamp % 1 hours) / 1 minutes;\\n    }\\n    //Get a day Timestamp from a full date object expressed as an array of 3 integers Year, Month, Day, to make it a Unix Timestamp multiply by number of seconds in day or solidity (1 days)\\n    function getDateObjectShort(uint _timestampDays, uint _direction) internal pure returns (uint[3] memory _result) {\\n        require (isValidDayTimestamp(_timestampDays), \\\"Not a valid day timestamp\\\");\\n        (_result[0],_result[1],_result[2]) = _deserializeDate(_timestampDays, _direction);\\n    }\\n    \\n    //Time Delta, returns the result in days of substracting the compared date from the base date, it returns the number of days and the direction 0 for positive, 1 for negative.\\n    function timeDelta(uint[3] memory _baseDate,uint[3] memory _comparedDate) internal pure returns (uint _timestampDays, uint _direction){\\n        require (isValidDate(_baseDate[0], _baseDate[1], _baseDate[2]) && isValidDate(_comparedDate[0], _comparedDate[1], _comparedDate[2]), \\\"One of the dates is not valid\\\");\\n        uint[2] memory baseT;\\n        (baseT[0], baseT[1])  = getDayTimestamp(_baseDate[0],_baseDate[1],_baseDate[2]);\\n        uint[2] memory comparedT;\\n        (comparedT[0], comparedT[1]) = getDayTimestamp(_comparedDate[0],_comparedDate[1],_comparedDate[2]);\\n        if (baseT[1] == comparedT[1]) {\\n            if (baseT[1] == 0){\\n                (baseT[0] >= comparedT[0]) ? (_timestampDays = baseT[0] - comparedT[0], _direction = 0): (_timestampDays = comparedT[0] - baseT[0], _direction = 1);\\n            }\\n            else{\\n                (baseT[0] >= comparedT[0]) ? (_timestampDays = baseT[0] - comparedT[0], _direction = 1): (_timestampDays = comparedT[0] - baseT[0], _direction = 0);\\n            }\\n        }\\n        else{\\n            (baseT[1] == 0) ? (_timestampDays = baseT[0] + comparedT[0], _direction = 0): (_timestampDays = baseT[0] + comparedT[0], _direction = 1);  \\n        }\\n    }\\n\\n    //Next Unit of time, these functions return the unix timestamp of the next unit of time, the returned timestamp is always rounded to the 0 value.\\n    function nextMinute(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 minutes) + 1  minutes;\\n    }\\n\\n    function nextHour(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 hours) + 1 hours;\\n    }\\n\\n    function nextDay(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _roundTimeUnit(_timestamp, 1 days) + 1 days;\\n    }\\n    \\n    function nextMonth(uint _timestamp) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        uint[3] memory dateObject;\\n        uint flag;\\n        (dateObject[0],dateObject[1],dateObject[2]) = _deserializeDate(_timestamp / 1 days,0);\\n        dateObject[2] = 1;\\n        (dateObject[1] + 1 > 12) ? (dateObject[1]=1,dateObject[0] +=1): (dateObject[1] += 1, dateObject[0] =dateObject[0]);\\n        (_result, flag) = getDayTimestamp(dateObject[0],dateObject[1],dateObject[2]);\\n        _result = (_result * 1 days);\\n    }\\n\\n    //Add Units of Time, returns the timestamp in seconds of adding a given number of units of time.\\n\\n    function addMinutes(uint _timestamp, uint _minutes) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_minutes * 1 minutes);\\n    }\\n\\n    function addHours(uint _timestamp, uint _hours) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_hours * 1 hours);\\n    }\\n\\n    function addDays(uint _timestamp, uint _days) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        _result = _timestamp + (_days * 1 days);\\n    }\\n\\n    function addMonths(uint _timestamp, uint _months) internal pure returns (uint _result) {\\n        require (isValidTimestamp(_timestamp), \\\"Not a valid timestamp\\\");\\n        uint[3] memory dateObject;\\n        uint remainder = _timestamp % 1 days;\\n        uint flag;\\n        (dateObject[0],dateObject[1],dateObject[2]) = _deserializeDate(_timestamp / 1 days,0);\\n        (dateObject[0],dateObject[1],dateObject[2]) = _addMonths(dateObject[0],dateObject[1],dateObject[2], _months);\\n        (_result, flag) = getDayTimestamp(dateObject[0],dateObject[1],dateObject[2]);\\n        _result = (_result * 1 days) + remainder;\\n    }\\n\\n    //utility functions for Civil Dates\\n    function isLeapYear(uint _year) internal pure returns(bool _result) {\\n        _result = _result = (_year % 4 == 0 &&( _year % 100 > 0 ||  _year % 400 == 0)) ? true:false;\\n    }\\n    \\n    function getDaysInMonth(uint _year,uint _month)internal pure returns(uint _result) {\\n        uint8[12] memory daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\\n        _result = (isLeapYear(_year) && _month == 2) ? 29: daysInMonth[_month - 1];\\n    }\\n\\n    function isValidDate(uint _year, uint _month, uint _day) internal pure returns(bool _result) {\\n        if (_year >= LIMIT_YEAR || _year < BASE_YEAR || _month < 1 || _month > 12 || _day < 1) {_result = false;}\\n        else{\\n            _result = (_day <= getDaysInMonth(_year, _month)) ? true: false;\\n        }\\n    }\\n\\n    function isValidTimestamp(uint _timestamp) internal pure returns(bool _result) {\\n      return (_timestamp <= (LIMET_DAY_TIMESTAMP* 1 days));\\n    }\\n\\n    function isValidDayTimestamp(uint _timestamp) internal pure returns(bool _result) {\\n       return _timestamp <= (LIMET_DAY_TIMESTAMP);\\n    }\\n\\n    // Private Functions\\n\\n    //Algorithm private functions for library use\\n    \\n    function _eralizeYear(uint _year, uint _month) private pure returns(uint _result){\\n        _result = (_month > 2) ? _year: _year -1;\\n    }\\n\\n    function _eralizeMonth(uint _month) private pure returns (uint _result) {\\n        _result = (_month > 2) ? _month - 3: _month + 9;  \\n    }\\n\\n\\n    function _getBaseMonthDay(uint _eralizedMonth) private pure returns (uint _result) {\\n        _result = ((_eralizedMonth * 153) + 2) / 5;\\n    }\\n    \\n    function _serializeDate(uint _eralizedYear, uint _eralizedMonth, uint _day) private pure returns (uint _result) {\\n        uint eras = _eralizedYear / 400;\\n        uint yearOfEra = _eralizedYear % 400;\\n        uint dayOfYear = _getBaseMonthDay(_eralizedMonth) + _day -1;\\n        uint dayOfEra = (yearOfEra * 365) + ((yearOfEra)/4) - (yearOfEra/100) + dayOfYear;\\n        uint serializedDay = (eras* DAYS_IN_ERA) + dayOfEra;\\n        _result = serializedDay;\\n    }\\n\\n    function _deserializeDate(uint _daysTimestamp, uint _direction) private pure returns (uint _year, uint _month, uint _day) {\\n        uint daysSinceBOT = (_direction == 0) ? DAYS_TO_UNIXEPOCH + _daysTimestamp:  DAYS_TO_UNIXEPOCH - _daysTimestamp;\\n        uint eras = daysSinceBOT/DAYS_IN_ERA;\\n        uint dayOfEra = daysSinceBOT % DAYS_IN_ERA;\\n        uint yearOfEra = (dayOfEra - (dayOfEra/1460) + (dayOfEra/36524) - (dayOfEra/146096))/365;\\n        uint eralizedYear = (eras * 400) + yearOfEra;\\n        uint eralizedDayOfYear = dayOfEra - ((yearOfEra*365) + (yearOfEra/4) - (yearOfEra/100));\\n        uint eralizedMonth = ((eralizedDayOfYear*5) + 2) /153;\\n        _month = (eralizedMonth < 10) ? eralizedMonth + 3: eralizedMonth - 9;\\n        _year = (_month < 3) ? eralizedYear + 1: eralizedYear; \\n        _day = eralizedDayOfYear - _getBaseMonthDay(eralizedMonth) +1;\\n    }\\n\\n    function _roundTimeUnit (uint _timestamp, uint _secondsUnit) private pure returns (uint _result) {\\n        _result = _timestamp - (_timestamp % _secondsUnit);\\n    }\\n\\n    function _addMonths (uint _year, uint _month, uint _day, uint _months) private pure returns (uint _rYear, uint _rMonth, uint _rDay){\\n    uint yearsToAdd = _months/12;\\n    uint monthsToAdd = _months % 12;\\n    _rMonth = ((_month + monthsToAdd) % 12 == 0 ) ?  12: (_month + monthsToAdd) % 12;\\n    _rYear = (_month + monthsToAdd > 12)  ? _year + yearsToAdd + 1: _year + yearsToAdd;\\n    _rDay = _day > getDaysInMonth(_rYear, _rMonth) ? getDaysInMonth(_rYear, _rMonth): _day;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb3ddae5ddb0c0246a484c948490267fd70c1796816f2bacc70b65efc50045583\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title DataTypes\\n * @author Pomp Protocol\\n *\\n * @notice A standard library of data types used throughout the Pomp Protocol.\\n */\\nlibrary DataTypes {\\n  /**\\n   * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n   *\\n   * @param Unpaused The fully unpaused state.\\n   * @param Paused The fully paused state.\\n   */\\n  enum ProtocolState {\\n    Unpaused,\\n    Paused\\n  }\\n\\n  enum State {\\n    nftDeposited,\\n    aborted,\\n    completed,\\n    verified,\\n    failed\\n  }\\n\\n  /**\\n   * @notice Mission\\n   *\\n   * @param owner Address of mission creator\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param verifier Address of verifier\\n   * @param starttime Mission start time (in second)\\n   * @param endtime Mission expiry time (in second)\\n   * @param challengeHash Challenge hash\\n   * @param state Mission state\\n   */\\n  struct MissionStruct {\\n    address owner;\\n    uint256 profileId;\\n    uint256 tokenId;\\n    address verifier;\\n    uint256 starttime;\\n    uint256 endtime;\\n    bytes32 challengeHash;\\n    State state;\\n    address creator;\\n  }\\n\\n  /**\\n   * @notice Profile\\n   *\\n   * @param missionCount number of missions of profile started\\n   * @param handle Profile handle, max-32 lowercase alphanumeric chars\\n   * @param owner Address of profile owner\\n   */\\n  struct ProfileStruct {\\n    uint256 missionCount;\\n    string handle;\\n    address owner;\\n  }\\n\\n  /**\\n   * @notice Argument to abort mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct AbortWithSigData {\\n    uint256 profileId;\\n    uint256 missionId;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to complete mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param missionId Mission identity\\n   * @param challenge Challenge issued by verifier. Usually obtained via out-of-band process\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct CompleteWithSigData {\\n    uint256 profileId;\\n    uint256 missionId;\\n    string challenge;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to complete mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param challenge Challenge previously issued by verifier\\n   * @param reason The reason to fail this mission\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct FailWithSigData {\\n    uint256 profileId;\\n    string challenge;\\n    uint256 reason;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to start mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param slug The Slug of the mission\\n   * @param contentURI The contentURI for missionNFT\\n   * @param minutesToExpire Number of minutes to expire\\n   * @param verifier Address of the verifier\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct StartWithSigData {\\n    uint256 profileId;\\n    string slug;\\n    string contentURI;\\n    uint256 minutesToExpire;\\n    address creator;\\n    address verifier;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  /**\\n   * @notice Argument to verify mission with EIP-712 signature\\n   *\\n   * @param profileId Profile identity\\n   * @param challenge Challenge previously issued by verifier\\n   * @param signature The signature to reconstruct an EIP-712 typed data signature\\n   * @param deadline The signature's deadline to reconstruct an EIP-712 typed data signature\\n   */\\n  struct VerifyWithSigData {\\n    uint256 profileId;\\n    string challenge;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  struct CanBatchVerifyData {\\n    uint256[] profileIds;\\n    string challenges;\\n  }\\n\\n  struct BatchVerifyWithSigData {\\n    uint256[] profileIds;\\n    string challenges;\\n    bytes signature;\\n    uint256 deadline;\\n  }\\n\\n  struct BatchVerifyData {\\n    uint256[] profileIds;\\n    string challenges;\\n    address sender;\\n  }\\n\\n  struct startMissionData {\\n    uint256 profileId;\\n    uint256 tokenId;\\n    string slug;\\n    uint256 minutesToExpire;\\n    address creator;\\n    address verifier;\\n    address owner;\\n    uint256 missionId;\\n  }\\n}\\n\",\"keccak256\":\"0xf533e719f9150331b2d34023c3a471c0843680b561cfcab12b6f9ff234b55a02\",\"license\":\"MIT\"},\"contracts/libraries/Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@khronus/time-cog/contracts/src/KhronusTimeCog.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport 'hardhat/console.sol';\\nimport './DataTypes.sol';\\n\\nlibrary Logic {\\n  uint8 internal constant MAX_HANDLE_LENGTH = 31;\\n\\n  error Claimed();\\n  error ContainsInvalidChars();\\n  error Expired();\\n  error InvalidLength();\\n  error HandleTaken();\\n  error ChallengeTaken();\\n  error NotFound();\\n  error NotMatched();\\n  error NotOwner();\\n  error NotVerifiable();\\n  error NotReady();\\n  error NotVerifier();\\n  error NotWhitelisted();\\n  error SecurityViolated();\\n  error SignatureExpired();\\n  error SignatureInvalid();\\n  error SlugTaken();\\n\\n  function isValidChallenges(DataTypes.BatchVerifyData calldata vars) public pure returns (bool) {\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n\\n    if (\\n      !((challengesBytesArray.length % 43) == 0 &&\\n        challengesBytesArray.length >= 43 &&\\n        uint256(challengesBytesArray.length / 43) == profileCount)\\n    ) revert InvalidLength();\\n    return true;\\n  }\\n\\n  function canBatchVerify(\\n    DataTypes.BatchVerifyData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view {\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n    isValidChallenges(vars);\\n    bytes memory tempChallengeBytes = new bytes(43);\\n    for (uint256 i = 0; i < profileCount; ++i) {\\n      for (uint256 j = 0; j < 43; ++j) {\\n        tempChallengeBytes[j] = challengesBytesArray[j + (i * 43)];\\n      }\\n      bytes32 hash = keccak256(tempChallengeBytes);\\n      uint256 missionId = getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n      uint256 profileId = vars.profileIds[i];\\n\\n      if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n      if (_missionByIdByProfile[profileId][missionId].verifier != vars.sender) revert NotVerifier();\\n      if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n        revert NotVerifiable();\\n      if (_missionByIdByProfile[profileId][missionId].challengeHash != hash) revert NotMatched();\\n    }\\n  }\\n\\n  function batchVerify(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    DataTypes.BatchVerifyData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory,\\n      uint256[] memory,\\n      uint256[] memory\\n    )\\n  {\\n    validateSignature(digest, owner, signature, deadline);\\n    uint256 profileCount = vars.profileIds.length;\\n    bytes memory challengesBytesArray = bytes(vars.challenges);\\n    isValidChallenges(vars);\\n    uint256[] memory _missionIds = new uint256[](profileCount);\\n    address[] memory _owners = new address[](profileCount);\\n    uint256[] memory _tokenIds = new uint256[](profileCount);\\n    bytes memory tempChallengeBytes = new bytes(43);\\n    for (uint256 i = 0; i < profileCount; ++i) {\\n      for (uint256 j = 0; j < 43; ++j) {\\n        tempChallengeBytes[j] = challengesBytesArray[j + (i * 43)];\\n      }\\n      bytes32 hash = keccak256(tempChallengeBytes);\\n      uint256 missionId = getMissionIdByChallengeHash(hash, _missionIdByChallengeHash);\\n      uint256 profileId = vars.profileIds[i];\\n\\n      if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n      if (_missionByIdByProfile[profileId][missionId].verifier != vars.sender) revert NotVerifier();\\n      if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n        revert NotVerifiable();\\n      if (_missionByIdByProfile[profileId][missionId].challengeHash != hash) revert NotMatched();\\n\\n      _owners[i] = _missionByIdByProfile[profileId][missionId].owner;\\n      _tokenIds[i] = _missionByIdByProfile[profileId][missionId].tokenId;\\n      _missionIds[i] = missionId;\\n    }\\n    return (_owners, _tokenIds, _missionIds);\\n  }\\n\\n  function canAbortOrComplete(\\n    uint256 profileId,\\n    uint256 missionId,\\n    bool check, // check Expiry boolean\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) public view {\\n    if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n    if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.nftDeposited)\\n      revert NotReady();\\n    if (check == true && _missionByIdByProfile[profileId][missionId].endtime < block.timestamp)\\n      revert Expired();\\n  }\\n\\n  function canClaimProfileWithRevert(\\n    mapping(address => bool) storage claimed,\\n    address owner,\\n    bytes32[] calldata proof,\\n    string calldata handle,\\n    bytes32 merkleroot,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash\\n  ) public view {\\n    if (claimed[owner]) revert Claimed();\\n    if (!MerkleProof.verify(proof, merkleroot, keccak256(abi.encodePacked(owner))))\\n      revert NotWhitelisted();\\n    validateHandleOrSlug(handle);\\n    if (_profileIdByHandleHash[keccak256(bytes(handle))] != 0) revert HandleTaken();\\n  }\\n\\n  function canClaimProfile(\\n    mapping(address => bool) storage claimed,\\n    address claimer,\\n    bytes32[] calldata proof,\\n    string calldata handle,\\n    bytes32 merkleroot,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash\\n  ) public view returns (bool) {\\n    return\\n      !claimed[claimer] &&\\n      (MerkleProof.verify(proof, merkleroot, keccak256(abi.encodePacked(claimer)))) &&\\n      (_profileIdByHandleHash[keccak256(bytes(handle))] == 0);\\n  }\\n\\n  function canVerifyOrFail(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address sender,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) public view {\\n    if (_missionByIdByProfile[profileId][missionId].starttime == 0) revert NotFound();\\n    if (_missionByIdByProfile[profileId][missionId].verifier != sender) revert NotVerifier();\\n    if (_missionByIdByProfile[profileId][missionId].state != DataTypes.State.completed)\\n      revert NotVerifiable();\\n  }\\n\\n  function completeMission(\\n    uint256 profileId,\\n    uint256 missionId,\\n    string calldata challenge,\\n    address owner,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash,\\n    mapping(bytes32 => uint256) storage _profileIdByChallengeHash,\\n    mapping(address => uint256) storage sigNonces\\n  ) public returns (address, bytes32) {\\n    // check right length\\n    if (bytes(challenge).length != 43) revert InvalidLength();\\n    canAbortOrComplete(profileId, missionId, true, _missionByIdByProfile);\\n    isChallengeAvailable(challenge, _missionIdByChallengeHash);\\n\\n    sigNonces[owner]++;\\n\\n    bytes32 challengeHash = keccak256(bytes(challenge));\\n    _missionByIdByProfile[profileId][missionId].state = DataTypes.State.completed;\\n    _missionByIdByProfile[profileId][missionId].challengeHash = challengeHash;\\n    _missionIdByChallengeHash[challengeHash] = missionId;\\n    _profileIdByChallengeHash[challengeHash] = profileId;\\n\\n    return (_missionByIdByProfile[profileId][missionId].verifier, challengeHash);\\n  }\\n\\n  function createProfile(\\n    mapping(address => bool) storage claimed,\\n    address owner,\\n    string calldata handle,\\n    uint256 profileId,\\n    mapping(bytes32 => uint256) storage _profileIdByHandleHash,\\n    mapping(uint256 => DataTypes.ProfileStruct) storage _profileById,\\n    mapping(address => uint256) storage _profileIdByAddress\\n  ) external {\\n    _profileIdByHandleHash[keccak256(bytes(handle))] = profileId;\\n    _profileById[profileId].handle = handle;\\n    _profileById[profileId].owner = owner;\\n    _profileIdByAddress[owner] = profileId;\\n\\n    claimed[owner] = true;\\n  }\\n\\n  function getMissionIdByChallengeHash(\\n    bytes32 hash,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view returns (uint256) {\\n    uint256 missionId = _missionIdByChallengeHash[hash];\\n    if (missionId == 0) revert NotFound();\\n    return missionId;\\n  }\\n\\n  function getTokenUri(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  ) internal view returns (string memory) {\\n    string memory uri = (_missionByIdByProfile[profileId][missionId].state ==\\n      DataTypes.State.aborted ||\\n      _missionByIdByProfile[profileId][missionId].state == DataTypes.State.failed ||\\n      _missionByIdByProfile[profileId][missionId].tokenId == 0)\\n      ? ''\\n      : IERC721Metadata(missionNFT).tokenURI(_missionByIdByProfile[profileId][missionId].tokenId);\\n    return uri;\\n  }\\n\\n  function isChallengeAvailable(\\n    string calldata challenge,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash\\n  ) public view {\\n    if (_missionIdByChallengeHash[keccak256(bytes(challenge))] != 0) revert ChallengeTaken();\\n  }\\n\\n  function isSlugAvailable(\\n    string calldata slug,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) internal view {\\n    if (_missionIdBySlugHash[keccak256(bytes(slug))] != 0) revert SlugTaken();\\n  }\\n\\n  function missionByChallenge(\\n    string calldata challenge,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdByChallengeHash,\\n    mapping(bytes32 => uint256) storage _profileIdByChallengeHash\\n  )\\n    public\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    bytes32 challengeHash = keccak256(bytes(challenge));\\n    uint256 profileId = _profileIdByChallengeHash[challengeHash];\\n    uint256 missionId = _missionIdByChallengeHash[challengeHash];\\n    string memory uri = getTokenUri(profileId, missionId, missionNFT, _missionByIdByProfile);\\n    return (_missionByIdByProfile[profileId][missionId], missionId, uri);\\n  }\\n\\n  function missionById(\\n    uint256 profileId,\\n    uint256 missionId,\\n    address missionNFT,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile\\n  )\\n    public\\n    view\\n    returns (\\n      DataTypes.MissionStruct memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    string memory uri = getTokenUri(profileId, missionId, missionNFT, _missionByIdByProfile);\\n    return (_missionByIdByProfile[profileId][missionId], missionId, uri);\\n  }\\n\\n  function startMission(\\n    DataTypes.startMissionData calldata vars,\\n    mapping(uint256 => mapping(uint256 => DataTypes.MissionStruct)) storage _missionByIdByProfile,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) public returns (uint256) {\\n    _missionIdBySlugHash[keccak256(bytes(vars.slug))] = vars.missionId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].owner = vars.owner;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].profileId = vars.profileId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].tokenId = vars.tokenId;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].creator = vars.creator;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].verifier = vars.verifier;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].starttime = KhronusTimeCog.addMinutes(\\n      block.timestamp,\\n      0\\n    );\\n    uint256 endtime = KhronusTimeCog.addMinutes(block.timestamp, vars.minutesToExpire);\\n    _missionByIdByProfile[vars.profileId][vars.missionId].endtime = endtime;\\n    _missionByIdByProfile[vars.profileId][vars.missionId].state = DataTypes.State.nftDeposited;\\n\\n    return endtime;\\n  }\\n\\n  function validateHandleOrSlug(string calldata handle) internal pure {\\n    bytes memory byteHandle = bytes(handle);\\n    if (byteHandle.length == 0 || byteHandle.length > MAX_HANDLE_LENGTH) revert InvalidLength();\\n\\n    uint256 byteHandleLength = byteHandle.length;\\n    for (uint256 i = 0; i < byteHandleLength; ) {\\n      if (\\n        (byteHandle[i] < '0' ||\\n          byteHandle[i] > 'z' ||\\n          (byteHandle[i] > '9' && byteHandle[i] < 'a')) &&\\n        byteHandle[i] != '.' &&\\n        byteHandle[i] != '-' &&\\n        byteHandle[i] != '_'\\n      ) revert ContainsInvalidChars();\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function validateSignature(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline\\n  ) public view returns (bool) {\\n    if (deadline < block.timestamp) revert SignatureExpired();\\n    address recoveredAddress = ECDSA.recover(digest, signature);\\n    if (\\n      owner != recoveredAddress || !SignatureChecker.isValidSignatureNow(owner, digest, signature)\\n    ) revert SignatureInvalid();\\n    return true;\\n  }\\n\\n  function validationStart(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    string calldata slug,\\n    mapping(bytes32 => uint256) storage _missionIdBySlugHash\\n  ) public view {\\n    validateSignature(digest, owner, signature, deadline);\\n    validateHandleOrSlug(slug);\\n    isSlugAvailable(slug, _missionIdBySlugHash);\\n  }\\n\\n  function validationVerify(\\n    bytes32 digest,\\n    address owner,\\n    bytes calldata signature,\\n    uint256 deadline,\\n    string calldata challenge\\n  ) public view returns (bytes32) {\\n    // check right length\\n    bytes memory challengeBytesArray = bytes(challenge);\\n    if (challengeBytesArray.length != 43) revert InvalidLength();\\n    bytes32 hash = keccak256(challengeBytesArray);\\n    validateSignature(digest, owner, signature, deadline);\\n    return hash;\\n  }\\n}\\n\",\"keccak256\":\"0x376ac6427902daaaa050a0a79bfeecd4240f3323b1c221af29ef5573a7b75785\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614aee610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806393e7ae64116100ac578063ae4bd6d01161007b578063ae4bd6d014610312578063b032ea0c1461032e578063b4d61add1461036c578063d8a627101461039e578063f97791e0146103d057610115565b806393e7ae641461026d578063952c2778146102aa578063a3cdda13146102c6578063abd9aa95146102f657610115565b80634dd68918116100e85780634dd68918146101d5578063735d8b2a146101f15780637da7cda01461020d578063818a024c1461023d57610115565b8063065c8e971461011a57806336c4f02e1461014357806336edeae6146101735780633ba0f991146101a3575b600080fd5b81801561012657600080fd5b50610141600480360381019061013c919061301c565b6103ec565b005b61015d6004803603810190610158919061316a565b610537565b60405161016a9190613254565b60405180910390f35b61018d60048036038101906101889190613293565b610643565b60405161019a9190613254565b60405180910390f35b6101bd60048036038101906101b89190613312565b610729565b6040516101cc93929190613573565b60405180910390f35b6101ef60048036038101906101ea919061360a565b6108f9565b005b61020b60048036038101906102069190613312565b610926565b005b610227600480360381019061022291906136d9565b610ac8565b60405161023491906137a4565b60405180910390f35b610257600480360381019061025291906137bf565b610b77565b60405161026491906137ff565b60405180910390f35b81801561027957600080fd5b50610294600480360381019061028f919061383a565b610bd3565b6040516102a191906137ff565b60405180910390f35b6102c460048036038101906102bf91906138a9565b610ee4565b005b6102e060048036038101906102db9190613918565b6112bd565b6040516102ed9190613254565b60405180910390f35b610310600480360381019061030b919061316a565b611417565b005b61032c600480360381019061032791906139cc565b6115b9565b005b81801561033a57600080fd5b5061035560048036038101906103509190613a33565b611720565b604051610363929190613b18565b60405180910390f35b61038660048036038101906103819190613b41565b6118eb565b60405161039593929190613573565b60405180910390f35b6103b860048036038101906103b39190613bdb565b611b0a565b6040516103c793929190613e17565b60405180910390f35b6103ea60048036038101906103e59190613e63565b6120ec565b005b838360008888604051610400929190613f02565b60405180910390208152602001908152602001600020819055508585836000878152602001908152602001600020600101918261043e929190614161565b508682600086815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050505050565b60008860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561060057506105ff878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848a6040516020016105e49190614279565b60405160208183030381529060405280519060200120612154565b5b801561063557506000826000878760405161061c929190613f02565b6040518091039020815260200190815260200160002054145b905098975050505050505050565b60008082806000019061065691906142a3565b90509050600083806020019061066c9190614306565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000602b82516106c19190614398565b1480156106d05750602b815110155b80156106e8575081602b82516106e691906143f8565b145b61071e576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600192505050919050565b610731612d94565b6000606060006107438888888861216b565b90508460008981526020019081526020016000206000888152602001908152602001600020878282604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16600481111561087a576108796133a6565b5b600481111561088c5761088b6133a6565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509250935093509350509450945094915050565b61090688888888886112bd565b506109118383612329565b61091c8383836126f6565b5050505050505050565b600081600086815260200190815260200160002060008581526020019081526020016000206004015403610986576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16816000868152602001908152602001600020600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a31576040517f2466355600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026004811115610a4557610a446133a6565b5b816000868152602001908152602001600020600085815260200190815260200160002060070160009054906101000a900460ff166004811115610a8b57610a8a6133a6565b5b14610ac2576040517fb94aed5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050602b815114610b4d576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081805190602001209050610b668a8a8a8a8a6112bd565b508092505050979650505050505050565b60008082600085815260200190815260200160002054905060008103610bc9576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b60008360e00135826000868060400190610bed9190614306565b604051610bfb929190613f02565b60405180910390208152602001908152602001600020819055508360c0016020810190610c289190614429565b8360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600001358360008660000135815260200190815260200160002060008660e0013581526020019081526020016000206001018190555083602001358360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060020181905550836080016020810190610d159190614429565b8360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060070160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360a0016020810190610d949190614429565b8360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e0b42600061275e565b8360008660000135815260200190815260200160002060008660e001358152602001908152602001600020600401819055506000610e4d42866060013561275e565b9050808460008760000135815260200190815260200160002060008760e0013581526020019081526020016000206005018190555060008460008760000135815260200190815260200160002060008760e00135815260200190815260200160002060070160006101000a81548160ff02191690836004811115610ed457610ed36133a6565b5b0217905550809150509392505050565b6000838060000190610ef691906142a3565b905090506000848060200190610f0c9190614306565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050610f5a85610643565b506000602b67ffffffffffffffff811115610f7857610f77613f26565b5b6040519080825280601f01601f191660200182016040528015610faa5781602001600182028036833780820191505090505b50905060005b838110156112b45760005b602b81101561104c5783602b83610fd29190614456565b82610fdd91906144b0565b81518110610fee57610fed6144e4565b5b602001015160f81c60f81b83828151811061100c5761100b6144e4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061104590614513565b9050610fbb565b5060008280519060200120905060006110658288610b77565b9050600089806000019061107991906142a3565b8581811061108a576110896144e4565b5b9050602002013590506000896000838152602001908152602001600020600084815260200190815260200160002060040154036110f3576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8960400160208101906111069190614429565b73ffffffffffffffffffffffffffffffffffffffff16896000838152602001908152602001600020600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111b0576040517f2466355600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260048111156111c4576111c36133a6565b5b896000838152602001908152602001600020600084815260200190815260200160002060070160009054906101000a900460ff16600481111561120a576112096133a6565b5b14611241576040517fb94aed5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82896000838152602001908152602001600020600084815260200190815260200160002060060154146112a0576040517f2554246c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050806112ad90614513565b9050610fb0565b50505050505050565b6000428210156112f9576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113498786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506127c8565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415806113d257506113d0868887878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506127ef565b155b15611409576040517f37e8456b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600191505095945050505050565b8760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561149a576040517fbcb4729800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61150c868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083896040516020016114f19190614279565b60405160208183030381529060405280519060200120612154565b611542576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61154c8484612329565b60008160008686604051611561929190613f02565b6040518091039020815260200190815260200160002054146115af576040517f902815b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b600081600086815260200190815260200160002060008581526020019081526020016000206004015403611619576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600481111561162d5761162c6133a6565b5b816000868152602001908152602001600020600085815260200190815260200160002060070160009054906101000a900460ff166004811115611673576116726133a6565b5b146116aa576040517f9488aaa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115158215151480156116e3575042816000868152602001908152602001600020600085815260200190815260200160002060050154105b1561171a576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600080602b8989905014611760576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61176d8b8b6001896115b9565b6117788989876120ec565b8260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906117c790614513565b9190505550600089896040516117de929190613f02565b6040518091039020905060028760008e815260200190815260200160002060008d815260200190815260200160002060070160006101000a81548160ff02191690836004811115611832576118316133a6565b5b0217905550808760008e815260200190815260200160002060008d8152602001908152602001600020600601819055508a866000838152602001908152602001600020819055508b856000838152602001908152602001600020819055508660008d815260200190815260200160002060008c815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16819250925050995099975050505050505050565b6118f3612d94565b6000606060008989604051611909929190613f02565b6040518091039020905060008560008381526020019081526020016000205490506000876000848152602001908152602001600020549050600061194f83838d8d61216b565b90508960008481526020019081526020016000206000838152602001908152602001600020828282604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff166004811115611a8657611a856133a6565b5b6004811115611a9857611a976133a6565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505092509650965096505050505096509650969350505050565b6060806060611b1c8b8b8b8b8b6112bd565b506000868060000190611b2f91906142a3565b905090506000878060200190611b459190614306565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050611b9388610643565b5060008267ffffffffffffffff811115611bb057611baf613f26565b5b604051908082528060200260200182016040528015611bde5781602001602082028036833780820191505090505b50905060008367ffffffffffffffff811115611bfd57611bfc613f26565b5b604051908082528060200260200182016040528015611c2b5781602001602082028036833780820191505090505b50905060008467ffffffffffffffff811115611c4a57611c49613f26565b5b604051908082528060200260200182016040528015611c785781602001602082028036833780820191505090505b5090506000602b67ffffffffffffffff811115611c9857611c97613f26565b5b6040519080825280601f01601f191660200182016040528015611cca5781602001600182028036833780820191505090505b50905060005b868110156120ce5760005b602b811015611d6c5786602b83611cf29190614456565b82611cfd91906144b0565b81518110611d0e57611d0d6144e4565b5b602001015160f81c60f81b838281518110611d2c57611d2b6144e4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611d6590614513565b9050611cdb565b506000828051906020012090506000611d85828e610b77565b905060008f8060000190611d9991906142a3565b85818110611daa57611da96144e4565b5b90506020020135905060008f600083815260200190815260200160002060008481526020019081526020016000206004015403611e13576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8f6040016020810190611e269190614429565b73ffffffffffffffffffffffffffffffffffffffff168f6000838152602001908152602001600020600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ed0576040517f2466355600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026004811115611ee457611ee36133a6565b5b8f6000838152602001908152602001600020600084815260200190815260200160002060070160009054906101000a900460ff166004811115611f2a57611f296133a6565b5b14611f61576040517fb94aed5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828f600083815260200190815260200160002060008481526020019081526020016000206006015414611fc0576040517f2554246c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8e6000828152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687858151811061201a576120196144e4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508e600082815260200190815260200160002060008381526020019081526020016000206002015486858151811061208e5761208d6144e4565b5b602002602001018181525050818885815181106120ae576120ad6144e4565b5b602002602001018181525050505050806120c790614513565b9050611cd0565b50828285985098509850505050505050985098509895505050505050565b60008160008585604051612101929190613f02565b60405180910390208152602001908152602001600020541461214f576040517f3eab91b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008261216185846129b5565b1490509392505050565b6060600060016004811115612183576121826133a6565b5b836000888152602001908152602001600020600087815260200190815260200160002060070160009054906101000a900460ff1660048111156121c9576121c86133a6565b5b148061222b57506004808111156121e3576121e26133a6565b5b836000888152602001908152602001600020600087815260200190815260200160002060070160009054906101000a900460ff166004811115612229576122286133a6565b5b145b8061225c57506000836000888152602001908152602001600020600087815260200190815260200160002060020154145b61230a578373ffffffffffffffffffffffffffffffffffffffff1663c87b56dd8460008981526020019081526020016000206000888152602001908152602001600020600201546040518263ffffffff1660e01b81526004016122bf919061456a565b600060405180830381865afa1580156122dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123059190614677565b61231b565b604051806020016040528060008152505b905080915050949350505050565b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000815114806123865750601f60ff168151115b156123bd576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151905060005b818110156126ef577f3000000000000000000000000000000000000000000000000000000000000000838281518110612402576124016144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916108061249957507f7a0000000000000000000000000000000000000000000000000000000000000083828151811061246a576124696144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b8061256c57507f39000000000000000000000000000000000000000000000000000000000000008382815181106124d3576124d26144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611801561256b57507f610000000000000000000000000000000000000000000000000000000000000083828151811061253c5761253b6144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916105b5b80156125d757507f2e000000000000000000000000000000000000000000000000000000000000008382815181106125a7576125a66144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b801561264257507f2d00000000000000000000000000000000000000000000000000000000000000838281518110612612576126116144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b80156126ad57507f5f0000000000000000000000000000000000000000000000000000000000000083828151811061267d5761267c6144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156126e4576040517f9c5e550b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010190506123c6565b5050505050565b6000816000858560405161270b929190613f02565b604051809103902081526020019081526020016000205414612759576040517f903f87db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600061276983612a0b565b6127a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279f9061471d565b60405180910390fd5b603c826127b59190614456565b836127c091906144b0565b905092915050565b60008060006127d78585612a29565b915091506127e481612a7a565b819250505092915050565b60008060006127fe8585612a29565b9150915060006004811115612816576128156133a6565b5b816004811115612829576128286133a6565b5b14801561286157508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612871576001925050506129ae565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016128a69291906147a1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516129109190614802565b600060405180830381855afa9150503d806000811461294b576040519150601f19603f3d011682016040523d82523d6000602084013e612950565b606091505b5091509150818015612963575060208151145b80156129a75750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906129a5919061482e565b145b9450505050505b9392505050565b60008082905060005b8451811015612a00576129eb828683815181106129de576129dd6144e4565b5b6020026020010151612c46565b915080806129f890614513565b9150506129be565b508091505092915050565b60006201518062014826612a1f9190614456565b8211159050919050565b6000806041835103612a6a5760008060006020860151925060408601519150606086015160001a9050612a5e87828585612c71565b94509450505050612a73565b60006002915091505b9250929050565b60006004811115612a8e57612a8d6133a6565b5b816004811115612aa157612aa06133a6565b5b0315612c435760016004811115612abb57612aba6133a6565b5b816004811115612ace57612acd6133a6565b5b03612b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b05906148a7565b60405180910390fd5b60026004811115612b2257612b216133a6565b5b816004811115612b3557612b346133a6565b5b03612b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6c90614913565b60405180910390fd5b60036004811115612b8957612b886133a6565b5b816004811115612b9c57612b9b6133a6565b5b03612bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd3906149a5565b60405180910390fd5b600480811115612bef57612bee6133a6565b5b816004811115612c0257612c016133a6565b5b03612c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3990614a37565b60405180910390fd5b5b50565b6000818310612c5e57612c598284612d7d565b612c69565b612c688383612d7d565b5b905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612cac576000600391509150612d74565b601b8560ff1614158015612cc45750601c8560ff1614155b15612cd6576000600491509150612d74565b600060018787878760405160008152602001604052604051612cfb9493929190614a73565b6020604051602081039080840390855afa158015612d1d573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612d6b57600060019250925050612d74565b80600092509250505b94509492505050565b600082600052816020526040600020905092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000801916815260200160006004811115612e1457612e136133a6565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612e5e81612e4b565b8114612e6957600080fd5b50565b600081359050612e7b81612e55565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612eac82612e81565b9050919050565b612ebc81612ea1565b8114612ec757600080fd5b50565b600081359050612ed981612eb3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612f0457612f03612edf565b5b8235905067ffffffffffffffff811115612f2157612f20612ee4565b5b602083019150836001820283011115612f3d57612f3c612ee9565b5b9250929050565b6000819050919050565b612f5781612f44565b8114612f6257600080fd5b50565b600081359050612f7481612f4e565b92915050565b6000819050919050565b612f8d81612f7a565b8114612f9857600080fd5b50565b600081359050612faa81612f84565b92915050565b6000819050919050565b612fc381612fb0565b8114612fce57600080fd5b50565b600081359050612fe081612fba565b92915050565b6000819050919050565b612ff981612fe6565b811461300457600080fd5b50565b60008135905061301681612ff0565b92915050565b60008060008060008060008060e0898b03121561303c5761303b612e41565b5b600061304a8b828c01612e6c565b985050602061305b8b828c01612eca565b975050604089013567ffffffffffffffff81111561307c5761307b612e46565b5b6130888b828c01612eee565b9650965050606061309b8b828c01612f65565b94505060806130ac8b828c01612f9b565b93505060a06130bd8b828c01612fd1565b92505060c06130ce8b828c01613007565b9150509295985092959890939650565b60008083601f8401126130f4576130f3612edf565b5b8235905067ffffffffffffffff81111561311157613110612ee4565b5b60208301915083602082028301111561312d5761312c612ee9565b5b9250929050565b6000819050919050565b61314781613134565b811461315257600080fd5b50565b6000813590506131648161313e565b92915050565b60008060008060008060008060c0898b03121561318a57613189612e41565b5b60006131988b828c01612e6c565b98505060206131a98b828c01612eca565b975050604089013567ffffffffffffffff8111156131ca576131c9612e46565b5b6131d68b828c016130de565b9650965050606089013567ffffffffffffffff8111156131f9576131f8612e46565b5b6132058b828c01612eee565b945094505060806132188b828c01613155565b92505060a06132298b828c01612f9b565b9150509295985092959890939650565b60008115159050919050565b61324e81613239565b82525050565b60006020820190506132696000830184613245565b92915050565b600080fd5b60006060828403121561328a5761328961326f565b5b81905092915050565b6000602082840312156132a9576132a8612e41565b5b600082013567ffffffffffffffff8111156132c7576132c6612e46565b5b6132d384828501613274565b91505092915050565b6000819050919050565b6132ef816132dc565b81146132fa57600080fd5b50565b60008135905061330c816132e6565b92915050565b6000806000806080858703121561332c5761332b612e41565b5b600061333a87828801612f65565b945050602061334b87828801612f65565b935050604061335c87828801612eca565b925050606061336d878288016132fd565b91505092959194509250565b61338281612ea1565b82525050565b61339181612f44565b82525050565b6133a081613134565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106133e6576133e56133a6565b5b50565b60008190506133f7826133d5565b919050565b6000613407826133e9565b9050919050565b613417816133fc565b82525050565b610120820160008201516134346000850182613379565b5060208201516134476020850182613388565b50604082015161345a6040850182613388565b50606082015161346d6060850182613379565b5060808201516134806080850182613388565b5060a082015161349360a0850182613388565b5060c08201516134a660c0850182613397565b5060e08201516134b960e085018261340e565b506101008201516134ce610100850182613379565b50505050565b6134dd81612f44565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561351d578082015181840152602081019050613502565b60008484015250505050565b6000601f19601f8301169050919050565b6000613545826134e3565b61354f81856134ee565b935061355f8185602086016134ff565b61356881613529565b840191505092915050565b600061016082019050613589600083018661341d565b6135976101208301856134d4565b8181036101408301526135aa818461353a565b9050949350505050565b60008083601f8401126135ca576135c9612edf565b5b8235905067ffffffffffffffff8111156135e7576135e6612ee4565b5b60208301915083600182028301111561360357613602612ee9565b5b9250929050565b60008060008060008060008060c0898b03121561362a57613629612e41565b5b60006136388b828c01613155565b98505060206136498b828c01612eca565b975050604089013567ffffffffffffffff81111561366a57613669612e46565b5b6136768b828c016135b4565b965096505060606136898b828c01612f65565b945050608089013567ffffffffffffffff8111156136aa576136a9612e46565b5b6136b68b828c01612eee565b935093505060a06136c98b828c01612f9b565b9150509295985092959890939650565b600080600080600080600060a0888a0312156136f8576136f7612e41565b5b60006137068a828b01613155565b97505060206137178a828b01612eca565b965050604088013567ffffffffffffffff81111561373857613737612e46565b5b6137448a828b016135b4565b955095505060606137578a828b01612f65565b935050608088013567ffffffffffffffff81111561377857613777612e46565b5b6137848a828b01612eee565b925092505092959891949750929550565b61379e81613134565b82525050565b60006020820190506137b96000830184613795565b92915050565b600080604083850312156137d6576137d5612e41565b5b60006137e485828601613155565b92505060206137f585828601612f9b565b9150509250929050565b600060208201905061381460008301846134d4565b92915050565b600061010082840312156138315761383061326f565b5b81905092915050565b60008060006060848603121561385357613852612e41565b5b600084013567ffffffffffffffff81111561387157613870612e46565b5b61387d8682870161381a565b935050602061388e868287016132fd565b925050604061389f86828701612f9b565b9150509250925092565b6000806000606084860312156138c2576138c1612e41565b5b600084013567ffffffffffffffff8111156138e0576138df612e46565b5b6138ec86828701613274565b93505060206138fd868287016132fd565b925050604061390e86828701612f9b565b9150509250925092565b60008060008060006080868803121561393457613933612e41565b5b600061394288828901613155565b955050602061395388828901612eca565b945050604086013567ffffffffffffffff81111561397457613973612e46565b5b613980888289016135b4565b9350935050606061399388828901612f65565b9150509295509295909350565b6139a981613239565b81146139b457600080fd5b50565b6000813590506139c6816139a0565b92915050565b600080600080608085870312156139e6576139e5612e41565b5b60006139f487828801612f65565b9450506020613a0587828801612f65565b9350506040613a16878288016139b7565b9250506060613a27878288016132fd565b91505092959194509250565b60008060008060008060008060006101008a8c031215613a5657613a55612e41565b5b6000613a648c828d01612f65565b9950506020613a758c828d01612f65565b98505060408a013567ffffffffffffffff811115613a9657613a95612e46565b5b613aa28c828d01612eee565b97509750506060613ab58c828d01612eca565b9550506080613ac68c828d016132fd565b94505060a0613ad78c828d01612f9b565b93505060c0613ae88c828d01612f9b565b92505060e0613af98c828d01613007565b9150509295985092959850929598565b613b1281612ea1565b82525050565b6000604082019050613b2d6000830185613b09565b613b3a6020830184613795565b9392505050565b60008060008060008060a08789031215613b5e57613b5d612e41565b5b600087013567ffffffffffffffff811115613b7c57613b7b612e46565b5b613b8889828a01612eee565b96509650506020613b9b89828a01612eca565b9450506040613bac89828a016132fd565b9350506060613bbd89828a01612f9b565b9250506080613bce89828a01612f9b565b9150509295509295509295565b60008060008060008060008060e0898b031215613bfb57613bfa612e41565b5b6000613c098b828c01613155565b9850506020613c1a8b828c01612eca565b975050604089013567ffffffffffffffff811115613c3b57613c3a612e46565b5b613c478b828c016135b4565b96509650506060613c5a8b828c01612f65565b945050608089013567ffffffffffffffff811115613c7b57613c7a612e46565b5b613c878b828c01613274565b93505060a0613c988b828c016132fd565b92505060c0613ca98b828c01612f9b565b9150509295985092959890939650565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613cf18383613379565b60208301905092915050565b6000602082019050919050565b6000613d1582613cb9565b613d1f8185613cc4565b9350613d2a83613cd5565b8060005b83811015613d5b578151613d428882613ce5565b9750613d4d83613cfd565b925050600181019050613d2e565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613da08383613388565b60208301905092915050565b6000602082019050919050565b6000613dc482613d68565b613dce8185613d73565b9350613dd983613d84565b8060005b83811015613e0a578151613df18882613d94565b9750613dfc83613dac565b925050600181019050613ddd565b5085935050505092915050565b60006060820190508181036000830152613e318186613d0a565b90508181036020830152613e458185613db9565b90508181036040830152613e598184613db9565b9050949350505050565b600080600060408486031215613e7c57613e7b612e41565b5b600084013567ffffffffffffffff811115613e9a57613e99612e46565b5b613ea686828701612eee565b93509350506020613eb986828701612f9b565b9150509250925092565b600081905092915050565b82818337600083830152505050565b6000613ee98385613ec3565b9350613ef6838584613ece565b82840190509392505050565b6000613f0f828486613edd565b91508190509392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f9c57607f821691505b602082108103613faf57613fae613f55565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026140177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613fda565b6140218683613fda565b95508019841693508086168417925050509392505050565b6000819050919050565b600061405e61405961405484612f44565b614039565b612f44565b9050919050565b6000819050919050565b61407883614043565b61408c61408482614065565b848454613fe7565b825550505050565b600090565b6140a1614094565b6140ac81848461406f565b505050565b5b818110156140d0576140c5600082614099565b6001810190506140b2565b5050565b601f821115614115576140e681613fb5565b6140ef84613fca565b810160208510156140fe578190505b61411261410a85613fca565b8301826140b1565b50505b505050565b600082821c905092915050565b60006141386000198460080261411a565b1980831691505092915050565b60006141518383614127565b9150826002028217905092915050565b61416b8383613f1b565b67ffffffffffffffff81111561418457614183613f26565b5b61418e8254613f84565b6141998282856140d4565b6000601f8311600181146141c857600084156141b6578287013590505b6141c08582614145565b865550614228565b601f1984166141d686613fb5565b60005b828110156141fe578489013582556001820191506020850194506020810190506141d9565b8683101561421b5784890135614217601f891682614127565b8355505b6001600288020188555050505b50505050505050565b60008160601b9050919050565b600061424982614231565b9050919050565b600061425b8261423e565b9050919050565b61427361426e82612ea1565b614250565b82525050565b60006142858284614262565b60148201915081905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126142c0576142bf614294565b5b80840192508235915067ffffffffffffffff8211156142e2576142e1614299565b5b6020830192506020820236038313156142fe576142fd61429e565b5b509250929050565b6000808335600160200384360303811261432357614322614294565b5b80840192508235915067ffffffffffffffff82111561434557614344614299565b5b6020830192506001820236038313156143615761436061429e565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006143a382612f44565b91506143ae83612f44565b9250826143be576143bd614369565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061440382612f44565b915061440e83612f44565b92508261441e5761441d614369565b5b828204905092915050565b60006020828403121561443f5761443e612e41565b5b600061444d84828501612eca565b91505092915050565b600061446182612f44565b915061446c83612f44565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144a5576144a46143c9565b5b828202905092915050565b60006144bb82612f44565b91506144c683612f44565b92508282019050808211156144de576144dd6143c9565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061451e82612f44565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145505761454f6143c9565b5b600182019050919050565b61456481612f44565b82525050565b600060208201905061457f600083018461455b565b92915050565b600080fd5b61459382613529565b810181811067ffffffffffffffff821117156145b2576145b1613f26565b5b80604052505050565b60006145c5612e37565b90506145d1828261458a565b919050565b600067ffffffffffffffff8211156145f1576145f0613f26565b5b6145fa82613529565b9050602081019050919050565b600061461a614615846145d6565b6145bb565b90508281526020810184848401111561463657614635614585565b5b6146418482856134ff565b509392505050565b600082601f83011261465e5761465d612edf565b5b815161466e848260208601614607565b91505092915050565b60006020828403121561468d5761468c612e41565b5b600082015167ffffffffffffffff8111156146ab576146aa612e46565b5b6146b784828501614649565b91505092915050565b600082825260208201905092915050565b7f4e6f7420612076616c69642074696d657374616d700000000000000000000000600082015250565b60006147076015836146c0565b9150614712826146d1565b602082019050919050565b60006020820190508181036000830152614736816146fa565b9050919050565b61474681613134565b82525050565b600081519050919050565b600082825260208201905092915050565b60006147738261474c565b61477d8185614757565b935061478d8185602086016134ff565b61479681613529565b840191505092915050565b60006040820190506147b6600083018561473d565b81810360208301526147c88184614768565b90509392505050565b60006147dc8261474c565b6147e68185613ec3565b93506147f68185602086016134ff565b80840191505092915050565b600061480e82846147d1565b915081905092915050565b6000815190506148288161313e565b92915050565b60006020828403121561484457614843612e41565b5b600061485284828501614819565b91505092915050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006148916018836146c0565b915061489c8261485b565b602082019050919050565b600060208201905081810360008301526148c081614884565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006148fd601f836146c0565b9150614908826148c7565b602082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061498f6022836146c0565b915061499a82614933565b604082019050919050565b600060208201905081810360008301526149be81614982565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000614a216022836146c0565b9150614a2c826149c5565b604082019050919050565b60006020820190508181036000830152614a5081614a14565b9050919050565b600060ff82169050919050565b614a6d81614a57565b82525050565b6000608082019050614a88600083018761473d565b614a956020830186614a64565b614aa2604083018561473d565b614aaf606083018461473d565b9594505050505056fea2646970667358221220ef66b669bca5218d4ae4aea33d5bd293e4d5431a1358f73c71f41b61dc0e3be464736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806393e7ae64116100ac578063ae4bd6d01161007b578063ae4bd6d014610312578063b032ea0c1461032e578063b4d61add1461036c578063d8a627101461039e578063f97791e0146103d057610115565b806393e7ae641461026d578063952c2778146102aa578063a3cdda13146102c6578063abd9aa95146102f657610115565b80634dd68918116100e85780634dd68918146101d5578063735d8b2a146101f15780637da7cda01461020d578063818a024c1461023d57610115565b8063065c8e971461011a57806336c4f02e1461014357806336edeae6146101735780633ba0f991146101a3575b600080fd5b81801561012657600080fd5b50610141600480360381019061013c919061301c565b6103ec565b005b61015d6004803603810190610158919061316a565b610537565b60405161016a9190613254565b60405180910390f35b61018d60048036038101906101889190613293565b610643565b60405161019a9190613254565b60405180910390f35b6101bd60048036038101906101b89190613312565b610729565b6040516101cc93929190613573565b60405180910390f35b6101ef60048036038101906101ea919061360a565b6108f9565b005b61020b60048036038101906102069190613312565b610926565b005b610227600480360381019061022291906136d9565b610ac8565b60405161023491906137a4565b60405180910390f35b610257600480360381019061025291906137bf565b610b77565b60405161026491906137ff565b60405180910390f35b81801561027957600080fd5b50610294600480360381019061028f919061383a565b610bd3565b6040516102a191906137ff565b60405180910390f35b6102c460048036038101906102bf91906138a9565b610ee4565b005b6102e060048036038101906102db9190613918565b6112bd565b6040516102ed9190613254565b60405180910390f35b610310600480360381019061030b919061316a565b611417565b005b61032c600480360381019061032791906139cc565b6115b9565b005b81801561033a57600080fd5b5061035560048036038101906103509190613a33565b611720565b604051610363929190613b18565b60405180910390f35b61038660048036038101906103819190613b41565b6118eb565b60405161039593929190613573565b60405180910390f35b6103b860048036038101906103b39190613bdb565b611b0a565b6040516103c793929190613e17565b60405180910390f35b6103ea60048036038101906103e59190613e63565b6120ec565b005b838360008888604051610400929190613f02565b60405180910390208152602001908152602001600020819055508585836000878152602001908152602001600020600101918261043e929190614161565b508682600086815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050505050565b60008860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561060057506105ff878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848a6040516020016105e49190614279565b60405160208183030381529060405280519060200120612154565b5b801561063557506000826000878760405161061c929190613f02565b6040518091039020815260200190815260200160002054145b905098975050505050505050565b60008082806000019061065691906142a3565b90509050600083806020019061066c9190614306565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000602b82516106c19190614398565b1480156106d05750602b815110155b80156106e8575081602b82516106e691906143f8565b145b61071e576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600192505050919050565b610731612d94565b6000606060006107438888888861216b565b90508460008981526020019081526020016000206000888152602001908152602001600020878282604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16600481111561087a576108796133a6565b5b600481111561088c5761088b6133a6565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509250935093509350509450945094915050565b61090688888888886112bd565b506109118383612329565b61091c8383836126f6565b5050505050505050565b600081600086815260200190815260200160002060008581526020019081526020016000206004015403610986576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16816000868152602001908152602001600020600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a31576040517f2466355600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026004811115610a4557610a446133a6565b5b816000868152602001908152602001600020600085815260200190815260200160002060070160009054906101000a900460ff166004811115610a8b57610a8a6133a6565b5b14610ac2576040517fb94aed5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050602b815114610b4d576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081805190602001209050610b668a8a8a8a8a6112bd565b508092505050979650505050505050565b60008082600085815260200190815260200160002054905060008103610bc9576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b60008360e00135826000868060400190610bed9190614306565b604051610bfb929190613f02565b60405180910390208152602001908152602001600020819055508360c0016020810190610c289190614429565b8360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600001358360008660000135815260200190815260200160002060008660e0013581526020019081526020016000206001018190555083602001358360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060020181905550836080016020810190610d159190614429565b8360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060070160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360a0016020810190610d949190614429565b8360008660000135815260200190815260200160002060008660e00135815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e0b42600061275e565b8360008660000135815260200190815260200160002060008660e001358152602001908152602001600020600401819055506000610e4d42866060013561275e565b9050808460008760000135815260200190815260200160002060008760e0013581526020019081526020016000206005018190555060008460008760000135815260200190815260200160002060008760e00135815260200190815260200160002060070160006101000a81548160ff02191690836004811115610ed457610ed36133a6565b5b0217905550809150509392505050565b6000838060000190610ef691906142a3565b905090506000848060200190610f0c9190614306565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050610f5a85610643565b506000602b67ffffffffffffffff811115610f7857610f77613f26565b5b6040519080825280601f01601f191660200182016040528015610faa5781602001600182028036833780820191505090505b50905060005b838110156112b45760005b602b81101561104c5783602b83610fd29190614456565b82610fdd91906144b0565b81518110610fee57610fed6144e4565b5b602001015160f81c60f81b83828151811061100c5761100b6144e4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061104590614513565b9050610fbb565b5060008280519060200120905060006110658288610b77565b9050600089806000019061107991906142a3565b8581811061108a576110896144e4565b5b9050602002013590506000896000838152602001908152602001600020600084815260200190815260200160002060040154036110f3576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8960400160208101906111069190614429565b73ffffffffffffffffffffffffffffffffffffffff16896000838152602001908152602001600020600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111b0576040517f2466355600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260048111156111c4576111c36133a6565b5b896000838152602001908152602001600020600084815260200190815260200160002060070160009054906101000a900460ff16600481111561120a576112096133a6565b5b14611241576040517fb94aed5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82896000838152602001908152602001600020600084815260200190815260200160002060060154146112a0576040517f2554246c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050806112ad90614513565b9050610fb0565b50505050505050565b6000428210156112f9576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006113498786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506127c8565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415806113d257506113d0868887878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506127ef565b155b15611409576040517f37e8456b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600191505095945050505050565b8760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561149a576040517fbcb4729800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61150c868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083896040516020016114f19190614279565b60405160208183030381529060405280519060200120612154565b611542576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61154c8484612329565b60008160008686604051611561929190613f02565b6040518091039020815260200190815260200160002054146115af576040517f902815b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b600081600086815260200190815260200160002060008581526020019081526020016000206004015403611619576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600481111561162d5761162c6133a6565b5b816000868152602001908152602001600020600085815260200190815260200160002060070160009054906101000a900460ff166004811115611673576116726133a6565b5b146116aa576040517f9488aaa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115158215151480156116e3575042816000868152602001908152602001600020600085815260200190815260200160002060050154105b1561171a576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600080602b8989905014611760576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61176d8b8b6001896115b9565b6117788989876120ec565b8260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906117c790614513565b9190505550600089896040516117de929190613f02565b6040518091039020905060028760008e815260200190815260200160002060008d815260200190815260200160002060070160006101000a81548160ff02191690836004811115611832576118316133a6565b5b0217905550808760008e815260200190815260200160002060008d8152602001908152602001600020600601819055508a866000838152602001908152602001600020819055508b856000838152602001908152602001600020819055508660008d815260200190815260200160002060008c815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16819250925050995099975050505050505050565b6118f3612d94565b6000606060008989604051611909929190613f02565b6040518091039020905060008560008381526020019081526020016000205490506000876000848152602001908152602001600020549050600061194f83838d8d61216b565b90508960008481526020019081526020016000206000838152602001908152602001600020828282604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff166004811115611a8657611a856133a6565b5b6004811115611a9857611a976133a6565b5b81526020016007820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505092509650965096505050505096509650969350505050565b6060806060611b1c8b8b8b8b8b6112bd565b506000868060000190611b2f91906142a3565b905090506000878060200190611b459190614306565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050611b9388610643565b5060008267ffffffffffffffff811115611bb057611baf613f26565b5b604051908082528060200260200182016040528015611bde5781602001602082028036833780820191505090505b50905060008367ffffffffffffffff811115611bfd57611bfc613f26565b5b604051908082528060200260200182016040528015611c2b5781602001602082028036833780820191505090505b50905060008467ffffffffffffffff811115611c4a57611c49613f26565b5b604051908082528060200260200182016040528015611c785781602001602082028036833780820191505090505b5090506000602b67ffffffffffffffff811115611c9857611c97613f26565b5b6040519080825280601f01601f191660200182016040528015611cca5781602001600182028036833780820191505090505b50905060005b868110156120ce5760005b602b811015611d6c5786602b83611cf29190614456565b82611cfd91906144b0565b81518110611d0e57611d0d6144e4565b5b602001015160f81c60f81b838281518110611d2c57611d2b6144e4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611d6590614513565b9050611cdb565b506000828051906020012090506000611d85828e610b77565b905060008f8060000190611d9991906142a3565b85818110611daa57611da96144e4565b5b90506020020135905060008f600083815260200190815260200160002060008481526020019081526020016000206004015403611e13576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8f6040016020810190611e269190614429565b73ffffffffffffffffffffffffffffffffffffffff168f6000838152602001908152602001600020600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ed0576040517f2466355600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026004811115611ee457611ee36133a6565b5b8f6000838152602001908152602001600020600084815260200190815260200160002060070160009054906101000a900460ff166004811115611f2a57611f296133a6565b5b14611f61576040517fb94aed5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828f600083815260200190815260200160002060008481526020019081526020016000206006015414611fc0576040517f2554246c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8e6000828152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687858151811061201a576120196144e4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508e600082815260200190815260200160002060008381526020019081526020016000206002015486858151811061208e5761208d6144e4565b5b602002602001018181525050818885815181106120ae576120ad6144e4565b5b602002602001018181525050505050806120c790614513565b9050611cd0565b50828285985098509850505050505050985098509895505050505050565b60008160008585604051612101929190613f02565b60405180910390208152602001908152602001600020541461214f576040517f3eab91b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008261216185846129b5565b1490509392505050565b6060600060016004811115612183576121826133a6565b5b836000888152602001908152602001600020600087815260200190815260200160002060070160009054906101000a900460ff1660048111156121c9576121c86133a6565b5b148061222b57506004808111156121e3576121e26133a6565b5b836000888152602001908152602001600020600087815260200190815260200160002060070160009054906101000a900460ff166004811115612229576122286133a6565b5b145b8061225c57506000836000888152602001908152602001600020600087815260200190815260200160002060020154145b61230a578373ffffffffffffffffffffffffffffffffffffffff1663c87b56dd8460008981526020019081526020016000206000888152602001908152602001600020600201546040518263ffffffff1660e01b81526004016122bf919061456a565b600060405180830381865afa1580156122dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123059190614677565b61231b565b604051806020016040528060008152505b905080915050949350505050565b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000815114806123865750601f60ff168151115b156123bd576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151905060005b818110156126ef577f3000000000000000000000000000000000000000000000000000000000000000838281518110612402576124016144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916108061249957507f7a0000000000000000000000000000000000000000000000000000000000000083828151811061246a576124696144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b8061256c57507f39000000000000000000000000000000000000000000000000000000000000008382815181106124d3576124d26144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611801561256b57507f610000000000000000000000000000000000000000000000000000000000000083828151811061253c5761253b6144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916105b5b80156125d757507f2e000000000000000000000000000000000000000000000000000000000000008382815181106125a7576125a66144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b801561264257507f2d00000000000000000000000000000000000000000000000000000000000000838281518110612612576126116144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b80156126ad57507f5f0000000000000000000000000000000000000000000000000000000000000083828151811061267d5761267c6144e4565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156126e4576040517f9c5e550b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010190506123c6565b5050505050565b6000816000858560405161270b929190613f02565b604051809103902081526020019081526020016000205414612759576040517f903f87db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600061276983612a0b565b6127a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279f9061471d565b60405180910390fd5b603c826127b59190614456565b836127c091906144b0565b905092915050565b60008060006127d78585612a29565b915091506127e481612a7a565b819250505092915050565b60008060006127fe8585612a29565b9150915060006004811115612816576128156133a6565b5b816004811115612829576128286133a6565b5b14801561286157508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612871576001925050506129ae565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016128a69291906147a1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516129109190614802565b600060405180830381855afa9150503d806000811461294b576040519150601f19603f3d011682016040523d82523d6000602084013e612950565b606091505b5091509150818015612963575060208151145b80156129a75750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906129a5919061482e565b145b9450505050505b9392505050565b60008082905060005b8451811015612a00576129eb828683815181106129de576129dd6144e4565b5b6020026020010151612c46565b915080806129f890614513565b9150506129be565b508091505092915050565b60006201518062014826612a1f9190614456565b8211159050919050565b6000806041835103612a6a5760008060006020860151925060408601519150606086015160001a9050612a5e87828585612c71565b94509450505050612a73565b60006002915091505b9250929050565b60006004811115612a8e57612a8d6133a6565b5b816004811115612aa157612aa06133a6565b5b0315612c435760016004811115612abb57612aba6133a6565b5b816004811115612ace57612acd6133a6565b5b03612b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b05906148a7565b60405180910390fd5b60026004811115612b2257612b216133a6565b5b816004811115612b3557612b346133a6565b5b03612b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6c90614913565b60405180910390fd5b60036004811115612b8957612b886133a6565b5b816004811115612b9c57612b9b6133a6565b5b03612bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd3906149a5565b60405180910390fd5b600480811115612bef57612bee6133a6565b5b816004811115612c0257612c016133a6565b5b03612c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3990614a37565b60405180910390fd5b5b50565b6000818310612c5e57612c598284612d7d565b612c69565b612c688383612d7d565b5b905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612cac576000600391509150612d74565b601b8560ff1614158015612cc45750601c8560ff1614155b15612cd6576000600491509150612d74565b600060018787878760405160008152602001604052604051612cfb9493929190614a73565b6020604051602081039080840390855afa158015612d1d573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612d6b57600060019250925050612d74565b80600092509250505b94509492505050565b600082600052816020526040600020905092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000801916815260200160006004811115612e1457612e136133a6565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612e5e81612e4b565b8114612e6957600080fd5b50565b600081359050612e7b81612e55565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612eac82612e81565b9050919050565b612ebc81612ea1565b8114612ec757600080fd5b50565b600081359050612ed981612eb3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612f0457612f03612edf565b5b8235905067ffffffffffffffff811115612f2157612f20612ee4565b5b602083019150836001820283011115612f3d57612f3c612ee9565b5b9250929050565b6000819050919050565b612f5781612f44565b8114612f6257600080fd5b50565b600081359050612f7481612f4e565b92915050565b6000819050919050565b612f8d81612f7a565b8114612f9857600080fd5b50565b600081359050612faa81612f84565b92915050565b6000819050919050565b612fc381612fb0565b8114612fce57600080fd5b50565b600081359050612fe081612fba565b92915050565b6000819050919050565b612ff981612fe6565b811461300457600080fd5b50565b60008135905061301681612ff0565b92915050565b60008060008060008060008060e0898b03121561303c5761303b612e41565b5b600061304a8b828c01612e6c565b985050602061305b8b828c01612eca565b975050604089013567ffffffffffffffff81111561307c5761307b612e46565b5b6130888b828c01612eee565b9650965050606061309b8b828c01612f65565b94505060806130ac8b828c01612f9b565b93505060a06130bd8b828c01612fd1565b92505060c06130ce8b828c01613007565b9150509295985092959890939650565b60008083601f8401126130f4576130f3612edf565b5b8235905067ffffffffffffffff81111561311157613110612ee4565b5b60208301915083602082028301111561312d5761312c612ee9565b5b9250929050565b6000819050919050565b61314781613134565b811461315257600080fd5b50565b6000813590506131648161313e565b92915050565b60008060008060008060008060c0898b03121561318a57613189612e41565b5b60006131988b828c01612e6c565b98505060206131a98b828c01612eca565b975050604089013567ffffffffffffffff8111156131ca576131c9612e46565b5b6131d68b828c016130de565b9650965050606089013567ffffffffffffffff8111156131f9576131f8612e46565b5b6132058b828c01612eee565b945094505060806132188b828c01613155565b92505060a06132298b828c01612f9b565b9150509295985092959890939650565b60008115159050919050565b61324e81613239565b82525050565b60006020820190506132696000830184613245565b92915050565b600080fd5b60006060828403121561328a5761328961326f565b5b81905092915050565b6000602082840312156132a9576132a8612e41565b5b600082013567ffffffffffffffff8111156132c7576132c6612e46565b5b6132d384828501613274565b91505092915050565b6000819050919050565b6132ef816132dc565b81146132fa57600080fd5b50565b60008135905061330c816132e6565b92915050565b6000806000806080858703121561332c5761332b612e41565b5b600061333a87828801612f65565b945050602061334b87828801612f65565b935050604061335c87828801612eca565b925050606061336d878288016132fd565b91505092959194509250565b61338281612ea1565b82525050565b61339181612f44565b82525050565b6133a081613134565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106133e6576133e56133a6565b5b50565b60008190506133f7826133d5565b919050565b6000613407826133e9565b9050919050565b613417816133fc565b82525050565b610120820160008201516134346000850182613379565b5060208201516134476020850182613388565b50604082015161345a6040850182613388565b50606082015161346d6060850182613379565b5060808201516134806080850182613388565b5060a082015161349360a0850182613388565b5060c08201516134a660c0850182613397565b5060e08201516134b960e085018261340e565b506101008201516134ce610100850182613379565b50505050565b6134dd81612f44565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561351d578082015181840152602081019050613502565b60008484015250505050565b6000601f19601f8301169050919050565b6000613545826134e3565b61354f81856134ee565b935061355f8185602086016134ff565b61356881613529565b840191505092915050565b600061016082019050613589600083018661341d565b6135976101208301856134d4565b8181036101408301526135aa818461353a565b9050949350505050565b60008083601f8401126135ca576135c9612edf565b5b8235905067ffffffffffffffff8111156135e7576135e6612ee4565b5b60208301915083600182028301111561360357613602612ee9565b5b9250929050565b60008060008060008060008060c0898b03121561362a57613629612e41565b5b60006136388b828c01613155565b98505060206136498b828c01612eca565b975050604089013567ffffffffffffffff81111561366a57613669612e46565b5b6136768b828c016135b4565b965096505060606136898b828c01612f65565b945050608089013567ffffffffffffffff8111156136aa576136a9612e46565b5b6136b68b828c01612eee565b935093505060a06136c98b828c01612f9b565b9150509295985092959890939650565b600080600080600080600060a0888a0312156136f8576136f7612e41565b5b60006137068a828b01613155565b97505060206137178a828b01612eca565b965050604088013567ffffffffffffffff81111561373857613737612e46565b5b6137448a828b016135b4565b955095505060606137578a828b01612f65565b935050608088013567ffffffffffffffff81111561377857613777612e46565b5b6137848a828b01612eee565b925092505092959891949750929550565b61379e81613134565b82525050565b60006020820190506137b96000830184613795565b92915050565b600080604083850312156137d6576137d5612e41565b5b60006137e485828601613155565b92505060206137f585828601612f9b565b9150509250929050565b600060208201905061381460008301846134d4565b92915050565b600061010082840312156138315761383061326f565b5b81905092915050565b60008060006060848603121561385357613852612e41565b5b600084013567ffffffffffffffff81111561387157613870612e46565b5b61387d8682870161381a565b935050602061388e868287016132fd565b925050604061389f86828701612f9b565b9150509250925092565b6000806000606084860312156138c2576138c1612e41565b5b600084013567ffffffffffffffff8111156138e0576138df612e46565b5b6138ec86828701613274565b93505060206138fd868287016132fd565b925050604061390e86828701612f9b565b9150509250925092565b60008060008060006080868803121561393457613933612e41565b5b600061394288828901613155565b955050602061395388828901612eca565b945050604086013567ffffffffffffffff81111561397457613973612e46565b5b613980888289016135b4565b9350935050606061399388828901612f65565b9150509295509295909350565b6139a981613239565b81146139b457600080fd5b50565b6000813590506139c6816139a0565b92915050565b600080600080608085870312156139e6576139e5612e41565b5b60006139f487828801612f65565b9450506020613a0587828801612f65565b9350506040613a16878288016139b7565b9250506060613a27878288016132fd565b91505092959194509250565b60008060008060008060008060006101008a8c031215613a5657613a55612e41565b5b6000613a648c828d01612f65565b9950506020613a758c828d01612f65565b98505060408a013567ffffffffffffffff811115613a9657613a95612e46565b5b613aa28c828d01612eee565b97509750506060613ab58c828d01612eca565b9550506080613ac68c828d016132fd565b94505060a0613ad78c828d01612f9b565b93505060c0613ae88c828d01612f9b565b92505060e0613af98c828d01613007565b9150509295985092959850929598565b613b1281612ea1565b82525050565b6000604082019050613b2d6000830185613b09565b613b3a6020830184613795565b9392505050565b60008060008060008060a08789031215613b5e57613b5d612e41565b5b600087013567ffffffffffffffff811115613b7c57613b7b612e46565b5b613b8889828a01612eee565b96509650506020613b9b89828a01612eca565b9450506040613bac89828a016132fd565b9350506060613bbd89828a01612f9b565b9250506080613bce89828a01612f9b565b9150509295509295509295565b60008060008060008060008060e0898b031215613bfb57613bfa612e41565b5b6000613c098b828c01613155565b9850506020613c1a8b828c01612eca565b975050604089013567ffffffffffffffff811115613c3b57613c3a612e46565b5b613c478b828c016135b4565b96509650506060613c5a8b828c01612f65565b945050608089013567ffffffffffffffff811115613c7b57613c7a612e46565b5b613c878b828c01613274565b93505060a0613c988b828c016132fd565b92505060c0613ca98b828c01612f9b565b9150509295985092959890939650565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613cf18383613379565b60208301905092915050565b6000602082019050919050565b6000613d1582613cb9565b613d1f8185613cc4565b9350613d2a83613cd5565b8060005b83811015613d5b578151613d428882613ce5565b9750613d4d83613cfd565b925050600181019050613d2e565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613da08383613388565b60208301905092915050565b6000602082019050919050565b6000613dc482613d68565b613dce8185613d73565b9350613dd983613d84565b8060005b83811015613e0a578151613df18882613d94565b9750613dfc83613dac565b925050600181019050613ddd565b5085935050505092915050565b60006060820190508181036000830152613e318186613d0a565b90508181036020830152613e458185613db9565b90508181036040830152613e598184613db9565b9050949350505050565b600080600060408486031215613e7c57613e7b612e41565b5b600084013567ffffffffffffffff811115613e9a57613e99612e46565b5b613ea686828701612eee565b93509350506020613eb986828701612f9b565b9150509250925092565b600081905092915050565b82818337600083830152505050565b6000613ee98385613ec3565b9350613ef6838584613ece565b82840190509392505050565b6000613f0f828486613edd565b91508190509392505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f9c57607f821691505b602082108103613faf57613fae613f55565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026140177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613fda565b6140218683613fda565b95508019841693508086168417925050509392505050565b6000819050919050565b600061405e61405961405484612f44565b614039565b612f44565b9050919050565b6000819050919050565b61407883614043565b61408c61408482614065565b848454613fe7565b825550505050565b600090565b6140a1614094565b6140ac81848461406f565b505050565b5b818110156140d0576140c5600082614099565b6001810190506140b2565b5050565b601f821115614115576140e681613fb5565b6140ef84613fca565b810160208510156140fe578190505b61411261410a85613fca565b8301826140b1565b50505b505050565b600082821c905092915050565b60006141386000198460080261411a565b1980831691505092915050565b60006141518383614127565b9150826002028217905092915050565b61416b8383613f1b565b67ffffffffffffffff81111561418457614183613f26565b5b61418e8254613f84565b6141998282856140d4565b6000601f8311600181146141c857600084156141b6578287013590505b6141c08582614145565b865550614228565b601f1984166141d686613fb5565b60005b828110156141fe578489013582556001820191506020850194506020810190506141d9565b8683101561421b5784890135614217601f891682614127565b8355505b6001600288020188555050505b50505050505050565b60008160601b9050919050565b600061424982614231565b9050919050565b600061425b8261423e565b9050919050565b61427361426e82612ea1565b614250565b82525050565b60006142858284614262565b60148201915081905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126142c0576142bf614294565b5b80840192508235915067ffffffffffffffff8211156142e2576142e1614299565b5b6020830192506020820236038313156142fe576142fd61429e565b5b509250929050565b6000808335600160200384360303811261432357614322614294565b5b80840192508235915067ffffffffffffffff82111561434557614344614299565b5b6020830192506001820236038313156143615761436061429e565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006143a382612f44565b91506143ae83612f44565b9250826143be576143bd614369565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061440382612f44565b915061440e83612f44565b92508261441e5761441d614369565b5b828204905092915050565b60006020828403121561443f5761443e612e41565b5b600061444d84828501612eca565b91505092915050565b600061446182612f44565b915061446c83612f44565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144a5576144a46143c9565b5b828202905092915050565b60006144bb82612f44565b91506144c683612f44565b92508282019050808211156144de576144dd6143c9565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061451e82612f44565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145505761454f6143c9565b5b600182019050919050565b61456481612f44565b82525050565b600060208201905061457f600083018461455b565b92915050565b600080fd5b61459382613529565b810181811067ffffffffffffffff821117156145b2576145b1613f26565b5b80604052505050565b60006145c5612e37565b90506145d1828261458a565b919050565b600067ffffffffffffffff8211156145f1576145f0613f26565b5b6145fa82613529565b9050602081019050919050565b600061461a614615846145d6565b6145bb565b90508281526020810184848401111561463657614635614585565b5b6146418482856134ff565b509392505050565b600082601f83011261465e5761465d612edf565b5b815161466e848260208601614607565b91505092915050565b60006020828403121561468d5761468c612e41565b5b600082015167ffffffffffffffff8111156146ab576146aa612e46565b5b6146b784828501614649565b91505092915050565b600082825260208201905092915050565b7f4e6f7420612076616c69642074696d657374616d700000000000000000000000600082015250565b60006147076015836146c0565b9150614712826146d1565b602082019050919050565b60006020820190508181036000830152614736816146fa565b9050919050565b61474681613134565b82525050565b600081519050919050565b600082825260208201905092915050565b60006147738261474c565b61477d8185614757565b935061478d8185602086016134ff565b61479681613529565b840191505092915050565b60006040820190506147b6600083018561473d565b81810360208301526147c88184614768565b90509392505050565b60006147dc8261474c565b6147e68185613ec3565b93506147f68185602086016134ff565b80840191505092915050565b600061480e82846147d1565b915081905092915050565b6000815190506148288161313e565b92915050565b60006020828403121561484457614843612e41565b5b600061485284828501614819565b91505092915050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006148916018836146c0565b915061489c8261485b565b602082019050919050565b600060208201905081810360008301526148c081614884565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006148fd601f836146c0565b9150614908826148c7565b602082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061498f6022836146c0565b915061499a82614933565b604082019050919050565b600060208201905081810360008301526149be81614982565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000614a216022836146c0565b9150614a2c826149c5565b604082019050919050565b60006020820190508181036000830152614a5081614a14565b9050919050565b600060ff82169050919050565b614a6d81614a57565b82525050565b6000608082019050614a88600083018761473d565b614a956020830186614a64565b614aa2604083018561473d565b614aaf606083018461473d565b9594505050505056fea2646970667358221220ef66b669bca5218d4ae4aea33d5bd293e4d5431a1358f73c71f41b61dc0e3be464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}